#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS 300 

// Other Library 
#include <a_http>
#include <crashdetect>
#include <streamer>
#include <sscanf2>
#include <Pawn.RakNet> 
#include <Pawn.CMD>
#include <Pawn.Regex>

// Official Hyaxe Library
#include <hy_anticheat>
#include <hy_preview>
#include <route-tracing>
#include <hy_damage>
#include <hy_string>
#include <hy_actor>
#include <hy_selection>
#include <sampvoice>

// Lang
#include <../../gamemodes/core/languages/es.pwn>

// Database
#include <../../gamemodes/utils/database/db.pwn>

// Colors
#include <../../gamemodes/core/color/pallete.pwn>

// Weapons
#include <../../gamemodes/core/weapons/info.pwn>

// Work
#include <../../gamemodes/core/work/data.pwn>
#include <../../gamemodes/core/work/miner.pwn>

// Player
#include <../../gamemodes/core/player/temp.pwn>
#include <../../gamemodes/core/player/weapons.pwn>
#include <../../gamemodes/core/player/phone.pwn>
#include <../../gamemodes/core/player/character.pwn>
#include <../../gamemodes/core/player/toys.pwn>
#include <../../gamemodes/core/player/account.pwn>
#include <../../gamemodes/core/player/textdraws.pwn>
#include <../../gamemodes/core/player/misc.pwn>
#include <../../gamemodes/core/player/crew.pwn>
#include <../../gamemodes/core/player/visual_inventory.pwn>

// Global
#include <../../gamemodes/core/global/textdraws.pwn>

// Items
#include <../../gamemodes/core/item/data.pwn>
#include <../../gamemodes/utils/item/create.pwn>
#include <../../gamemodes/utils/item/info.pwn>
#include <../../gamemodes/utils/item/grab.pwn>

// Dialogs
#include <../../gamemodes/core/dialog/dialog_id.pwn>

// Vehicles
#include <../../gamemodes/core/vehicle/global_vehicles.pwn>
#include <../../gamemodes/core/vehicle/tuning.pwn>
#include <../../gamemodes/core/vehicle/colors.pwn>

// Animations
#include <../../gamemodes/core/animations/libs.pwn>
#include <../../gamemodes/utils/animations/preload.pwn>

// Textdraws
#include <../../gamemodes/utils/textdraws/global.pwn>
#include <../../gamemodes/utils/textdraws/player.pwn>

// Textdraw easing
#include <../../gamemodes/utils/easing/equations.pwn>

// Crews
#include <../../gamemodes/core/crew/data.pwn>
#include <../../gamemodes/core/crew/rank.pwn>

// Graffitis
#include <../../gamemodes/core/graffiti/data.pwn>

// World
#include <../../gamemodes/core/world/tele.pwn>
#include <../../gamemodes/utils/world/tele.pwn>
#include <../../gamemodes/core/world/balloon.pwn>
#include <../../gamemodes/utils/world/balloon.pwn>

// Black market
#include <../../gamemodes/core/black_market/data.pwn>

// Visual inventory
#include <../../gamemodes/utils/visual_inventory/show.pwn>
#include <../../gamemodes/utils/visual_inventory/accommodate.pwn>
#include <../../gamemodes/utils/visual_inventory/actions.pwn>

// Notifications
#include <../../gamemodes/utils/notification/show.pwn>

// Player util
#include <../../gamemodes/utils/player/util.pwn>

// Edit mode
#include <../../gamemodes/utils/edit_mode/edit.pwn>

// Server Config
#define SERVER_VERSION 			"v0.5 Pre-Release Build 46"
#define SERVER_NAME 			"Hyaxe"
#define SERVER_WEBSITE 			"www.hyaxe.com"
#define SERVER_DISCORD 			"www.hyaxe.com/discord"
#define SERVER_COIN 			"Hycoins"
#define MAX_BAD_LOGIN_ATTEMPS 	3
#define REP_MULTIPLIER 			12
#define TIME_FOR_REP 			1020000
#define REP_FOR_PAYDAY 			3
#define CMD_LOGGIN 				0
#define MAX_NU_VEHICLES 		3
#define MAX_NU_PROPERTIES 		2
#define MAX_NU_WORKS 			8
#define MAX_NU_TOYS 			4
#define MAX_NU_VOBJECTS 		5
#define MAX_SU_VEHICLES 		6
#define MAX_SU_PROPERTIES 		4
#define MAX_SU_WORKS 			8
#define MAX_SU_VOBJECTS 		10

// Macros
#define CALLBACK:%0(%1) forward%0(%1);public%0(%1)

#pragma compress 0

// Default valors of ECO.TXT
new
	Float:MULTIPLIER_PROPERITES   =    3.00,
	Float:MULTIPLIER_VEHICLES     =    6.00,
	Float:MULTIPLIER_TOYS         =    1.00,
	Float:MULTIPLIER_SKINS        =    1.00,
	Float:MULTIPLIER_WEAPONS      =    1.00,
	SU_SD_PRICE                   =    10,
	SU_WORK_EXTRA_PAY             =    500;

new
	SERVER_TIME[2], SERVER_WEATHER = 1,
	Mechanic_Area,
	Farmer_Area,
	Harvest_Area;

new Float:NewUserPos[][] =
{
	{1730.460571, -1266.631835, 13.543579, 142.924987}
};

//Raknet
new VehicleDestroyed = 136;
const UNOCCUPIED_SYNC = 209,
	AIM_SYNC = 203,
	PLAYER_SYNC = 207,
	VEHICLE_SYNC = 200;

// Keys funcs
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define PRESSING(%0,%1) \
	(%0 & (%1))

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

main()
{
	SetGameModeText(SERVER_MODE);
	SendRconCommand("hostname "SERVER_HOSTNAME"");
	SendRconCommand("language "SERVER_LANGUAGE"");
	SendRconCommand("weburl "SERVER_WEBSITE"");
	SendRconCommand("minconnectiontime 50");
	SendRconCommand("ackslimit 10000");
	SendRconCommand("messageslimit 5000");
	SendRconCommand("conncookies 0");
	SendRconCommand("cookielogging 0");
	SendRconCommand("chatlogging 0");
	printf("[info: hostname] "SERVER_HOSTNAME"");
	printf("[info: language] "SERVER_LANGUAGE"");
	printf("[info: website] "SERVER_WEBSITE"");
	printf("[info: discord] "SERVER_DISCORD"");
	printf("\n[build] Hyaxe SA-MP "SERVER_VERSION"\n");
}

enum
{
	CHEAT_WEAPON,
	CHEAT_AMMO,
	CHEAT_CAR_MOD,
	CHEAT_VEHICLE_SPEED_HACK,
	CHEAT_POS,
	CHEAT_TEXT_SPAMMER,
	CHEAT_COMMAND_SPAMMER,
	CHEAT_DEATH_SPAMMER,
	CHEAT_STATE_SPAMMER,
	CHEAT_VEHICLE_ENTER_SPAMMER,
	CHEAT_JETPACK,
	CHEAT_PLAYER_SPEED,
	CHEAT_PLAYER_HEALTH,
	CHEAT_PLAYER_ARMOUR,
	CHEAT_VEHICLE_HEALTH,
	CHEAT_PLAYER_VEHICLE_WORK, // Entra a un vehiculo que no es de su trabajo
	CHEAT_PLAYER_VEHICLE_DOORS,
	CHEAT_VEHICLE_NOFUEL,
	CHEAT_SPECTATE,
	CHEAT_UNDETECTED_WEAPON,
	CHEAT_DRIVE_BY,
	CHEAT_UNOCCUPIED_VEHICLE_TP,
	CHEAT_HIGH_POS,
	CHEAT_CAR_JACKING
};

enum e_ac_Info
{
	ac_Name[24],
	bool:ac_Enabled,
	bool:ac_Kick, // 1 = kickea, 0 = avisa a admins
	ac_Detections, // enviar aviso cuando llege a este num en los seg de abajo
	ac_Interval
};

// Defaults valors on AC.TXT
new ac_Info[][e_ac_Info] =
{
	{"armas",                     true, true,         1, 0},
	{"municion",                  true, true,         1, 0},
	{"mod car",                   true, true,         1, 0},
	{"vehicle speed",             true, true,         1, 0},
	{"pos",                       true, false,        3, 10},
	{"text spammer",              true, true,         10, 5},
	{"command spammer",           true, true,         5, 5},
	{"death spammer",             true, false,        1, 0},
	{"state change spammer",      true, false,        1, 0},
	{"vehicle enter spammer",     true, false,        1, 0},
	{"jetpack",                   true, true,         1, 0},
	{"player speed",              true, true,         1, 0},
	{"player health",             true, true,         1, 0},
	{"player armour",             true, true,         1, 0},
	{"vehicle health",            true, true,         1, 0},
	{"pwork != vwork",            true, true,         1, 0},
	{"enter closed vehicle",      true, false,        1, 0},
	{"vehicle nofuel cheat",      true, false,        50, 10},
	{"player spectate",           true, false,        1, 0},
	{"pweapon != sweapon",        true, false,        1, 0},
	{"drive by",                  true, false,        1, 0},
	{"unoccupied veh tp",         true, true,         1, 0},
	{"high pos",                  true, true,         1, 0},
	{"car jacking",               true, true,         1, 0}
};

enum e_PLAYER_AC_INFO
{
	p_ac_info_DETECTIONS,
	p_ac_info_LAST_DETECTION,
	p_ac_info_IMMUNITY
};
new PLAYER_AC_INFO[MAX_PLAYERS][sizeof(ac_Info)][e_PLAYER_AC_INFO];

enum b1g_enum
{
	PING,
	bool:FAKE_PING
}
new B1G_PLAYER[MAX_PLAYERS][b1g_enum];

enum
{
	TYPE_LEGAL,
	TYPE_ILLEGAL
};

enum
{
	ROLEPLAY_STATE_NORMAL,
	ROLEPLAY_STATE_HOSPITAL,
	ROLEPLAY_STATE_INTERIOR,
	ROLEPLAY_STATE_OWN_PROPERTY,
	ROLEPLAY_STATE_GUEST_PROPERTY,
	ROLEPLAY_STATE_ARRESTED,
	ROLEPLAY_STATE_JAIL,
	ROLEPLAY_STATE_CRACK
};

enum
{
	GAME_STATE_NONE,
	GAME_STATE_CONNECTED,
	GAME_STATE_OCCUPIED,
	GAME_STATE_DEAD,
	GAME_STATE_NORMAL
};

/* Timers
0 = Kick
1 = Gangzone daño Rojo
2 = Añadir reputacion
3 = un/freeze player
4 = recuperar vida
5 = restart hambre sed
6 = esperando llamada
7 = esperar arrancar veh
8 = speedo
9 = cargando camion
10 = reciclando
11 = talando
12 = plantando
13 = gps mapa
14 = esposar
15 = jail time
16 = health down
17 = msg td
18 = intro
19 = anti cj
*/

#define MIN_VEHICLE_HEALTH         375.0
forward Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Float:GetVehicleSpeed(vehicleid);
forward Float:frandom(Float:max, Float:min, dp);

new Float:HARVEST_CHECKPOINTS[][] =
{
	{-328.332305, -1546.391357, 16.15409},
	{-250.803207, -1553.425415, 4.534295},
	{-224.260910, -1485.022827, 8.041003},
	{-308.437896, -1476.776977, 11.40934},
	{-283.487731, -1553.320068, 7.445997},
	{-258.756164, -1426.692993, 9.493670},
	{-178.887649, -1406.682250, 3.996473},
	{-177.676818, -1322.970581, 6.885325},
	{-305.899322, -1318.196533, 10.12089},
	{-325.471008, -1412.821777, 15.12606},
	{-191.962982, -1384.020019, 6.075732},
	{-214.637603, -1321.270507, 10.79362},
	{-263.975738, -1375.987426, 11.41642},
	{-308.705474, -1424.302001, 15.52844},
	{-287.710388, -1497.158325, 8.503927},
	{-387.908111, -1532.118774, 23.47214}
};

enum Player_Vehicles_Info
{
	bool:player_vehicle_VALID,
	player_vehicle_ID,
	player_vehicle_OWNER_ID,
	bool:player_vehicle_ACCESSIBLE
};
new PLAYER_VEHICLES[MAX_VEHICLES][Player_Vehicles_Info];

#define MAX_VEHICLE_OBJECTS_INDEXS 5
enum
{
	VOBJECT_TYPE_OBJECT,
	VOBJECT_TYPE_TEXT,
	VOBJECT_TYPE_COUNTRY_FLAG,
	VOBJECT_TYPE_COUNTRY_PANEL
};

enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS],

	vobject_text_TEXT[32],
	vobject_text_FONT[24],
	vobject_text_FONT_SIZE,
	vobject_text_BOLD,
	vobject_text_FONT_COLOR
};
new VEHICLE_OBJECTS[MAX_VEHICLES][MAX_SU_VOBJECTS][e_VEHICLE_OBJECTS];

enum actors_info
{
	bool:a_IN_ROB,
	a_LAST_ROB,
	a_IN_ROB_PROGRESS
}
new a_TMP[MAX_ACTORS][actors_info];

/*FakeQuery*/
new FakeQueryAmmount = 2;
//new RealQuery = 1;

/*Bot master*/
new BotsMaster[16] = "31.214.141.206";
// 88.214.56.42 | Administrator | o4o1%-i})c8L

/* Miner System */
enum miner_rocks_info
{
	r_MODELID,
	Float:r_X,
	Float:r_Y,
	Float:r_Z,
	Float:r_RX,
	Float:r_RY,
	Float:r_RZ,
	r_TYPE,
	r_WORLD,
	r_INTERIOR,
	bool:r_ACTIVATED,
	r_OBJECT_ID
};

new ROCKS_OBJ[][miner_rocks_info] =
{
	{3930, 1177.872436, 992.813354, -96.845115, 24.399999, 2.599997, 0.000000, 0, 36, 25}, // Mina A
	{3930, 1196.177978, 994.048706, -94.680076, 24.399999, 2.599997, 0.000000, 1, 36, 25},
	{3930, 1224.658569, 997.169494, -94.684623, 24.399999, 2.599997, 0.000000, 2, 36, 25},
	{3930, 1236.418090, 998.993347, -97.543411, 24.399999, 2.599997, 0.000000, 3, 36, 25},
	{3930, 1230.120605, 1019.671325, -99.555900, 24.399999, 2.599997, 0.000000, 0, 36, 25},
	{3930, 1207.183593, 1008.262329, -100.254249, 24.399995, 2.600013, -0.000006, 1, 36, 25},
	{3930, 1190.385620, 1009.850646, -98.333389, 24.399995, 2.600013, -0.000006, 2, 36, 25},
	{3930, 1179.665405, 1010.131530, -97.875244, 24.399988, 2.599982, -150.399932, 0, 36, 25},
	{3930, 1163.240478, 1005.786499, -98.784423, 24.399999, 2.599997, -85.299995, 1, 36, 25},
	{3930, 1209.523315, 998.607238, -99.839881, 24.399999, 2.599997, 0.000000, 2, 36, 25},
	{3931, 1223.792236, 1000.901733, -100.214630, 0.000000, 0.000000, 0.000000, 0, 36, 25},
	{3931, 1260.426757, 998.186218, -97.661567, 0.000000, -122.299987, 64.099983, 1, 36, 25},
	{3931, 1212.011962, 1013.100524, -96.754631, 0.000000, 0.000014, 0.000000, 2, 36, 25},
	{3931, 1193.982055, 1012.242187, -95.744636, 0.000000, 0.000000, 0.000000, 3, 36, 25},
	{3931, 1167.231689, 992.691772, -97.244628, 0.000000, 0.000000, 0.000000, 0, 36, 25},
	{3931, 1239.842163, 1020.351379, -100.454666, 0.000000, 0.000000, 0.000000, 1, 36, 25},
	{3930, 1233.481445, 1009.266235, -96.487350, 0.000000, 0.000014, 0.000000, 2, 36, 25},
	{3930, 1251.631835, 1005.076660, -99.247344, 0.000000, 0.000014, 0.000000, 3, 36, 25},
	{3930, 1189.956054, 994.439636, -96.924644, 0.000000, 0.000000, 0.000000, 0, 36, 25},
	{3930, 1198.553466, 1010.266357, -97.348808, 0.000009, 58.900024, 40.100006, 1, 36, 25},
	{3930, 1240.416381, 1008.318664, -95.574661, 0.000000, 0.000014, 0.000000, 2, 36, 25},
	{3930, 1180.246215, 994.873962, -99.361381, 36.599998, 0.000000, -55.200004, 3, 36, 25},
	{3930, 1222.842529, 1010.886718, -98.624633, 0.000007, 0.000012, 35.799980, 0, 36, 25},
	{3930, 1241.798706, 1006.211547, -98.624633, 0.000007, 0.000012, 35.799980, 1, 36, 25},
	{3930, 1253.789062, 999.310974, -98.874641, 0.000000, 0.000000, 8.599998, 2, 36, 25},
	{3930, 1187.321655, 996.277465, -99.797363, 0.000000, 0.000000, 0.000000, 0, 36, 25},
	{3930, 1205.381713, 995.057006, -94.697357, 0.000000, 0.000000, 0.000000, 1, 36, 25},
	{3930, 2006.621704, 1210.249877, -58.051799, 0.000000, 0.000000, 0.000000, 4, 37, 26}, // Mina B
	{3930, 2002.191528, 1211.020141, -56.831802, 0.000000, 0.000000, 0.000000, 5, 37, 26},
	{3930, 2003.431396, 1195.300048, -60.031810, 48.600002, 0.000000, 0.000000, 6, 37, 26},
	{3930, 1995.754516, 1209.251831, -60.907882, 0.000000, 45.999988, 47.099998, 5, 37, 26},
	{3930, 2013.841308, 1195.473999, -62.344772, 48.600002, 0.000000, 0.000000, 7, 37, 26},
	{3930, 2027.621337, 1200.035766, -62.886730, 48.600002, 0.000000, 0.000000, 4, 37, 26},
	{3930, 2029.621337, 1209.721923, -62.348133, 48.600002, 0.000000, 0.000000, 5, 37, 26},
	{3930, 2004.174682, 1197.629150, -63.108753, 0.000000, 45.999988, -56.800014, 6, 37, 26},
	{3930, 1996.451782, 1198.851684, -62.162265, 0.000000, 45.999988, 47.099998, 7, 37, 26},
	{3930, 2041.770141, 1192.692016, -62.289901, 0.000000, 19.599983, 47.099998, 4, 37, 26},
	{3930, 2047.992919, 1190.046508, -58.458881, 92.699989, 19.599983, 47.099998, 5, 37, 26},
	{3931, 2037.137329, 1210.305297, -61.818855, -30.500000, -1.099998, 0.000000, 6, 37, 26},
	{3931, 2055.554687, 1208.279418, -60.214843, -30.500000, -1.099998, 0.000000, 7, 37, 26},
	{3931, 2015.895751, 1206.989379, -62.404953, -30.500000, -1.099998, 0.000000, 4, 37, 26},
	{3931, 2016.377807, 1193.260375, -59.310298, -30.500000, -1.099998, 0.000000, 5, 37, 26},
	{3931, 1990.917358, 1199.671264, -63.990932, -30.500000, -1.099998, 0.000000, 6, 37, 26},
	{3931, 1991.524414, 1209.075195, -62.747913, -30.500000, -1.099998, 0.000000, 7, 37, 26},
	{3931, 2047.370483, 1207.462036, -63.966873, -30.500000, -1.099998, 0.000000, 4, 37, 26},
	{3929, 2022.074096, 1208.842407, -58.054317, 0.000000, 0.000000, 0.000000, 5, 37, 26},
	{3929, 2019.653442, 1209.882446, -55.744316, 0.000000, 0.000000, 0.000000, 6, 37, 26},
	{3929, 2029.603393, 1211.433227, -58.594314, 0.000000, 0.000000, 0.000000, 7, 37, 26},
	{3929, 2045.704223, 1210.327514, -59.544311, 0.000000, 0.000000, 171.200012, 4, 37, 26},
	{3929, 2042.604492, 1190.296386, -58.284328, 0.000000, 0.000000, 171.200012, 5, 37, 26},
	{3931, 2061.907470, 1205.823608, -62.572795, -30.500000, -1.099998, 0.000000, 6, 37, 26},
	{3931, 2062.033935, 1191.420166, -61.724494, -30.500000, -1.099998, 0.000000, 7, 37, 26},
	{3931, 2049.864746, 1193.782592, -63.920982, -30.500000, -1.099998, 0.000000, 4, 37, 26},
	{3931, 2034.317993, 1197.020507, -63.191623, -30.500000, -1.099998, 0.000000, 5, 37, 26},
	{3931, 2020.915527, 1197.401611, -59.825992, -30.500000, -1.099998, 0.000000, 6, 37, 26},
	{3931, 1997.382812, 1196.342041, -58.728122, -30.500000, -1.099998, 0.000000, 7, 37, 26},
	{3930, 2054.089111, 1190.715209, -60.811580, 0.000000, 19.599983, 47.099998, 4, 37, 26},
	{3930, 2057.579833, 1204.269042, -63.813278, 0.000000, 19.599983, 47.099998, 5, 37, 26},
	{3930, 2051.272949, 1207.219116, -62.947536, 0.000000, 19.599983, 47.099998, 6, 37, 26},
	{3930, 2043.150756, 1213.020019, -58.107460, 0.000000, 19.599983, 47.099998, 7, 37, 26},
	{3930, 2040.889526, 1211.909179, -59.710617, 5.999997, 31.999990, -49.800010, 4, 37, 26},
	{3930, 2009.627685, 1195.286132, -61.320980, 0.000000, 45.999988, -56.800014, 5, 37, 26},
	{3930, 2000.716430, 1200.245849, -62.464614, 0.000000, 45.999988, -56.800014, 6, 37, 26},
	{3930, 2003.081665, 1207.042358, -60.393619, 0.000000, 45.999988, -56.800014, 7, 37, 26},
	{3930, 2007.940429, 1205.770874, -62.219581, 0.000000, 45.999988, -56.800014, 4, 37, 26},
	{3930, 2003.615356, 1203.413085, -62.601642, 0.000000, 45.999988, -56.800014, 5, 37, 26},
	{3930, 2558.547119, 1920.175537, -56.770034, 0.000000, -23.799999, 103.499992, 8, 38, 27}, // Mina C
	{3930, 2568.526367, 1929.490844, -56.750083, 81.999977, -23.799999, 103.499992, 9, 38, 27},
	{3930, 2556.510986, 1925.515625, -55.503135, 81.999977, -23.799999, 103.499992, 10, 38, 27},
	{3930, 2575.620117, 1928.317382, -58.313629, 81.999977, -23.799999, 103.499992, 11, 38, 27},
	{3930, 2582.657714, 1923.599975, -57.506542, 81.999977, -23.799999, 103.499992, 8, 38, 27},
	{3930, 2591.072021, 1930.458007, -56.131759, 81.999977, -23.799999, 103.499992, 9, 38, 27},
	{3930, 2598.102539, 1921.015869, -58.439590, 81.999977, -23.799999, 167.199966, 10, 38, 27},
	{3930, 2605.449707, 1931.463500, -58.859226, 81.999977, -23.799999, 167.199966, 11, 38, 27},
	{3930, 2599.343017, 1931.116943, -58.198123, 81.999977, -23.799999, 167.199966, 8, 38, 27},
	{3930, 2605.106933, 1921.937500, -57.921848, 19.499980, -23.799999, 167.199966, 9, 38, 27},
	{3930, 2614.835937, 1919.864135, -57.544937, 19.499980, -23.799999, 167.199966, 10, 38, 27},
	{3930, 2622.473388, 1926.415893, -56.893245, 19.499980, -23.799999, 167.199966, 11, 38, 27},
	{3930, 2623.638183, 1930.964111, -53.048309, 19.499980, -23.799999, 167.199966, 8, 38, 27},
	{3930, 2629.750244, 1924.946044, -57.796928, 19.499980, -23.799999, 167.199966, 9, 38, 27},
	{3930, 2631.227050, 1914.339721, -55.732841, 19.499980, -23.799999, 167.199966, 10, 38, 27},
	{3930, 2577.853515, 1931.992675, -53.565452, 81.999977, -23.799999, 103.499992, 11, 38, 27},
	{3930, 2581.912109, 1927.186157, -57.944911, 81.999977, -23.799999, 103.499992, 8, 38, 27},
	{3930, 2596.468505, 1922.699584, -56.103130, 81.999977, -23.799999, 103.499992, 9, 38, 27},
	{3930, 2595.459716, 1928.450927, -57.102424, 81.999977, -23.799999, 103.499992, 10, 38, 27},
	{3930, 2613.909179, 1927.228271, -58.297199, 81.999977, -23.799999, 103.499992, 11, 38, 27},
	{3930, 2625.735839, 1928.402343, -55.299907, 81.999977, -23.799999, 103.499992, 8, 38, 27},
	{3930, 2599.343017, 1931.116943, -58.198123, 81.999977, -23.799999, 167.199966, 9, 38, 27},
	{3930, 2587.522705, 1932.371459, -53.971248, 81.999977, -23.799999, 167.199966, 10, 38, 27},
	{3930, 2589.001220, 1922.533447, -53.152873, 81.999977, -23.799999, 167.199966, 11, 38, 27},
	{3930, 2572.721191, 1919.130615, -58.246109, 81.999977, -77.299995, 167.199966, 8, 38, 27},
	{3930, 2572.663574, 1930.959838, -54.859481, 81.999977, -77.299995, 167.199966, 9, 38, 27},
	{3930, 2582.617431, 1931.652954, -54.070865, 81.999977, -77.299995, 167.199966, 10, 38, 27},
	{3930, 2625.432373, 1923.397094, -58.817531, 81.999977, -77.299995, 167.199966, 11, 38, 27},
	{3930, 2627.374511, 1915.446044, -58.241146, 81.999977, -77.299995, 167.199966, 8, 38, 27},
	{3930, 1163.240478, 1005.786499, -98.784423, 24.399999, 2.599997, -85.299995, 10, 38, 27},
	{3930, 1209.523315, 998.607238, -99.839881, 24.399999, 2.599997, 0.000000, 11, 38, 27},
	{3931, 1223.792236, 1000.901733, -100.214630, 0.000000, 0.000000, 0.000000, 8, 38, 27},
	{3931, 1260.426757, 998.186218, -97.661567, 0.000000, -122.299987, 64.099983, 9, 38, 27},
	{3931, 1212.011962, 1013.100524, -96.754631, 0.000000, 0.000014, 0.000000, 10, 38, 27},
	{3931, 1193.982055, 1012.242187, -95.744636, 0.000000, 0.000000, 0.000000, 11, 38, 27},
	{3931, 1167.231689, 992.691772, -97.244628, 0.000000, 0.000000, 0.000000, 8, 38, 27},
	{3931, 1239.842163, 1020.351379, -100.454666, 0.000000, 0.000000, 0.000000, 9, 38, 27},
	{3930, 1245.157104, 998.390869, -96.821304, 0.000000, 0.000000, 0.000000, 10, 38, 27},
	{3930, 1261.037231, 1006.549682, -96.821304, -68.299987, 179.999954, 179.999908, 11, 38, 27},
	{3930, 1163.794799, 1011.816040, -96.488059, -111.699996, 0.000000, -55.200004, 8, 36, 25}
};

new ServerInitTime;

/* Tuning Object System */
enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[24],
	tuning_object_PRICE
};
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
	{1000, "spl_b_mar_m", 1000},
    {1001, "spl_b_bab_m", 1000},
    {1002, "spl_b_bar_m", 1000},
    {1003, "spl_b_mab_m", 1000},
    {1004, "bnt_b_sc_m", 2000},
    {1005, "bnt_b_sc_l", 1000},
    {1007, "wg_l_b_ssk", 1000},
    {1018, "exh_b_ts", 1200},
    {1019, "exh_b_t", 2000},
    {1021, "exh_b_m", 2500},
    {1024, "lgt_b_sspt", 2000},
    {1029, "exh_c_s", 2000},
    {1043, "exh_lr_br2", 3500},
    {1044, "exh_lr_br1", 3000},
    {1047, "wg_l_a_f", 2500},
    {1048, "wg_l_c_f", 2500},
    {1049, "spl_a_f_r", 3000},
    {1050, "spl_c_f_r", 3000},
    {1056, "wg_l_a_st", 2500},
    {1090, "wg_l_a_u", 2500},
    {19306, "kmb_goflag2", 1000},
    {19307, "kmb_goflag3", 1000},
    {18647, "RedNeonTube1", 1000},
    {18648, "BlueNeonTube1", 1000},
    {18649, "GreenNeonTube1", 1000},
    {18650, "YellowNeonTube1", 1000},
    {18651, "PinkNeonTube1", 1000},
    {18652, "WhiteNeonTube1", 1000},
    {18749, "SAMPLogoSmall", 500},
    {19054, "XmasBox1", 1000},
    {19133, "ArrowType4", 1000},
    {19471, "forsale02", 500},
    {19878, "Skateboard1", 800},
    {19314, "bullhorns01", 1000},
    {19078, "TheParrot1", 4000},
    {19917, "CutsceneEngine1", 3000},
    {19893, "LaptopSAMP1", 1000},
    {2768, "CJ_CB_BURG", 1000},
    {19838, "CoffeeCup1", 1000},
    {11736, "MedicCase1", 1000},
    {1247, "bribe", 800},
    {19147, "PinSpotLight5", 1000},
    {19148, "PinSpotLight6", 1000},
    {19149, "PinSpotLight7", 1000},
    {19151, "PinSpotLight9", 1000},
    {19153, "PinSpotLight11", 1000},
    {19580, "Pizza1", 500},
    {2690, "CJ_FIRE_EXT", 1000},
    {19308, "taxi01", 1000},
    {1550, "CJ_MONEY_BAG", 1000},
	{19894, "laptop", 500},
	{19873, "toiletpaperroll1", 300},
	{19874, "soapbar1", 200},
	{19624, "case1", 600},
	{19621, "obj1", 150},
	{19833, "Cow1", 600},
    //{2404, "CJ_SURF_BOARD", 2000},
    //{2405, "CJ_SURF_BOARD2", 2000},
    //{2406, "CJ_SURF_BOARD3", 2000},
    {19317, "bassguitar01", 1000},
    {19318, "flyingv01", 1000},
    {2232, "MED_SPEAKER_4", 2000},
    {1840, "speaker_2", 2000},
    {2229, "SWANK_SPEAKER", 2000},
	{1025, "wheel_or1", 1000},
	{1073, "wheel_sr6", 1000},
	{1074, "wheel_sr3", 1000},
	{1075, "wheel_sr2", 1000},
	{1076, "wheel_lr4", 1000},
	{1077, "wheel_lr1", 1000},
	{1078, "wheel_lr3", 1000},
	{1079, "wheel_sr1", 1000},
	{1080, "wheel_sr5", 1000},
	{1081, "wheel_sr4", 1000},
	{1082, "wheel_gn1", 1000},
	{1083, "wheel_lr2", 1000},
	{1084, "wheel_lr5", 1000},
	{1085, "wheel_gn2", 1000},
	{1096, "wheel_gn3", 1000},
	{1097, "wheel_gn4", 1000},
	{1098, "wheel_gn5", 1000},
	{19620, "police", 50000}
};

//ZONAS
enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE
};

#define MAX_TERRITORIES  100
enum enum_TERRITORIES
{
	bool:territory_VALID,
	territory_ID,
	territory_NAME[32],
	bool:territory_OCCUPIED,
	territory_CREW_ID,
	territory_CREW_INDEX,
	territory_COLOR,
	Float:territory_MIN_X,
	Float:territory_MIN_Y,
	Float:territory_MIN_Z,
	Float:territory_MAX_X,
	Float:territory_MAX_Y,
	Float:territory_MAX_Z,

	territory_AREA,
	territory_GANG_ZONE,

	bool:territory_WAR,
	territory_ATTACKER_CREW_INDEX,
	territory_WAR_TIME_LEFT,
	Text:territory_TEXTDRAW,
	territory_TIMER,
	territory_LAST_ATTACK
};
new TERRITORIES[MAX_TERRITORIES][enum_TERRITORIES];

//new DCC_Channel:DiscordLogChannel;
//new DCC_Channel:CanalDudasId;

new RandomColors[] =
{
	COLOR_WHITE,
	0x000000FF,
    0x99CC00FF,
    0xFF9900FF,
	0x6699CCFF,
	0x0099FFFF,
	0xCCCC99FF,

	0xFF8C13FF,    0xC715FFFF,    0x20B2AAFF,    0xDC143CFF,    0x6495EDFF,    0xf0e68cFF,    0x778899FF,    0xFF1493FF,    0xF4A460FF,
	0xEE82EEFF,    0xFFD720FF,    0x8b4513FF,    0x4949A0FF,    0x148b8bFF,    0x14ff7fFF,    0x556b2fFF,    0x0FD9FAFF,    0x10DC29FF,
	0x534081FF,    0x0495CDFF,    0xEF6CE8FF,    0xBD34DAFF,    0x247C1BFF,    0x0C8E5DFF,    0x635B03FF,    0xCB7ED3FF,    0x65ADEBFF,
	0x5C1ACCFF,    0xF2F853FF,    0x11F891FF,    0x7B39AAFF,    0x53EB10FF,    0x54137DFF,    0x275222FF,    0xF09F5BFF,    0x3D0A4FFF,
	0x22F767FF,    0xD63034FF,    0x9A6980FF,    0xDFB935FF,    0x3793FAFF,    0x90239DFF,    0xE9AB2FFF,    0xAF2FF3FF,    0x057F94FF,
	0xB98519FF,    0x388EEAFF,    0x028151FF,    0xA55043FF,    0x0DE018FF,    0x93AB1CFF,    0x95BAF0FF,    0x369976FF,    0x18F71FFF,
	0x4B8987FF,    0x491B9EFF,    0x829DC7FF,    0xBCE635FF,    0xCEA6DFFF,    0x20D4ADFF,    0x2D74FDFF,    0x3C1C0DFF,    0x12D6D4FF,
	0x48C000FF,    0x2A51E2FF,    0xE3AC12FF,    0xFC42A8FF,    0x2FC827FF,    0x1A30BFFF,    0xB740C2FF,    0x42ACF5FF,    0x2FD9DEFF,
	0xFAFB71FF,    0x05D1CDFF,    0xC471BDFF,    0x94436EFF,    0xC1F7ECFF,    0xCE79EEFF,    0xBD1EF2FF,    0x93B7E4FF,    0x3214AAFF,
	0x184D3BFF,    0xAE4B99FF,    0x7E49D7FF,    0x4C436EFF,    0xFA24CCFF,    0xCE76BEFF,    0xA04E0AFF,    0x9F945CFF,    0xDCDE3DFF,
	0x10C9C5FF,    0x70524DFF,    0x0BE472FF,    0x8A2CD7FF,    0x6152C2FF,    0xCF72A9FF,    0xE59338FF,    0xEEDC2DFF,    0xD8C762FF,
	0xD8C762FF,    0xFF8C13FF,    0xC715FFFF,    0x20B2AAFF,    0xDC143CFF,    0x6495EDFF,    0xf0e68cFF,    0x778899FF,    0xFF1493FF,
	0xF4A460FF,    0xEE82EEFF,    0xFFD720FF,    0x8b4513FF,    0x4949A0FF,    0x148b8bFF,    0x14ff7fFF,    0x556b2fFF,    0x0FD9FAFF,
	0x10DC29FF,    0x534081FF,    0x0495CDFF,    0xEF6CE8FF,    0xBD34DAFF,    0x247C1BFF,    0x0C8E5DFF,    0x635B03FF,    0xCB7ED3FF,
	0x65ADEBFF,    0x5C1ACCFF,    0xF2F853FF,    0x11F891FF,    0x7B39AAFF,    0x53EB10FF,    0x54137DFF,    0x275222FF,    0xF09F5BFF,
	0x3D0A4FFF,    0x22F767FF,    0xD63034FF,    0x9A6980FF,    0xDFB935FF,    0x3793FAFF,    0x90239DFF,    0xE9AB2FFF,    0xAF2FF3FF,
	0x057F94FF,    0xB98519FF,    0x388EEAFF,    0x028151FF,    0xA55043FF,    0x0DE018FF,    0x93AB1CFF,    0x95BAF0FF,    0x369976FF,
	0x18F71FFF,    0x4B8987FF,    0x491B9EFF,    0x829DC7FF,    0xBCE635FF,    0xCEA6DFFF,    0x20D4ADFF,    0x2D74FDFF,    0x3C1C0DFF,
	0x12D6D4FF,    0x48C000FF,    0x2A51E2FF,    0xE3AC12FF,    0xFC42A8FF,    0x2FC827FF,    0x1A30BFFF,    0xB740C2FF,    0x42ACF5FF,
	0x2FD9DEFF,    0xFAFB71FF,    0x05D1CDFF,    0xC471BDFF,    0x94436EFF,    0xC1F7ECFF,    0xCE79EEFF,    0xBD1EF2FF,    0x93B7E4FF,
	0x3214AAFF,    0x184D3BFF,    0xAE4B99FF,    0x7E49D7FF,    0x4C436EFF,    0xFA24CCFF,    0xCE76BEFF,    0xA04E0AFF,    0x9F945CFF,
	0xDCDE3DFF,    0x10C9C5FF,    0x70524DFF,    0x0BE472FF,    0x8A2CD7FF,    0x6152C2FF,    0xCF72A9FF,    0xE59338FF,    0xEEDC2DFF,
	0xD8C762FF,    0xD8C762FF
};

enum Work_Vehicles_Info
{
	bool:work_vehicle_VALID,
	work_vehicle_WORK,
	work_vehicle_EXP,
	bool:work_vehicle_NEED_DUTY
};
new WORK_VEHICLES[MAX_VEHICLES][Work_Vehicles_Info];

new valid_work_vehicle_colors[] = {84, 63, 91, 63, 102, 65, 105, 72, 110, 93, 121, 93, 12, 95, 23, 1};
enum San_Andreas_Vehicles_Info
{
	san_andreas_vehicle_TYPE,
	san_andreas_vehicle_TYPE_IN,
	san_andreas_vehicle_TYPE_IN_EXP,
	san_andreas_vehicle_MODELID,
	Float:san_andreas_vehicle_SPAWN_X,
	Float:san_andreas_vehicle_SPAWN_Y,
	Float:san_andreas_vehicle_SPAWN_Z,
	Float:san_andreas_vehicle_SPAWN_ANGLE,
	san_andreas_vehicle_COLOR_1,
	san_andreas_vehicle_COLOR_2,
	san_andreas_vehicle_vip
};
new San_Andreas_Vehicles[][San_Andreas_Vehicles_Info] =
{
	//Renta
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.651, -1383.604, 13.002, 271.719, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.534, -1380.565, 13.003, 270.332, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.523, -1377.541, 13.013, 270.186, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.562, -1374.903, 13.020, 269.719, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.572, -1372.109, 13.028, 268.804, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.637, -1368.964, 13.042, 269.699, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.657, -1365.789, 13.061, 269.291, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 436, 1277.617, -1362.276, 13.079, 268.421, -1, -1, 0},
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 527, 1735.3537, -1318.4984, 13.8236, 91.5999, -1, -1, 0}, //Cadrona
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1738.3095, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 542, 1735.2344, -1324.0263, 13.8101, 90.1999, -1, -1, 0}, //Clover
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1734.1485, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1736.3491, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1731.3981, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1729.1182, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 539, 1542.1032, -1352.4088, 328.7123, 0.0000, -1, -1, 0}, //Vortex
	{VEHICLE_TYPE_RENT, WORK_NONE, 0, 481, 1726.6379, -1329.1241, 13.2093, 0.0000, -1, -1, 0}, //BMX

	//Camionero
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2461.737060, -2636.311035, 13.731491, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2459.911376, -2627.436767, 13.731758, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2460.749267, -2617.059814, 13.727367, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2462.090087, -2606.416992, 13.729711, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2461.382324, -2596.787109, 13.729124, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2498.064941, -2617.590820, 13.718508, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2498.016113, -2606.953857, 13.717649, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2499.478759, -2599.528320, 13.720164, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2498.920410, -2589.597167, 13.719043, 60.189689, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2499.0876, -2671.2441, 16.8844, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2493.6884, -2671.2441, 16.8844, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2488.4882, -2671.2441, 16.8844, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2483.3762, -2671.2441, 16.8844, 0.0000, -1, -1, 0},
	/*{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -494.4160, -472.8649, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -499.3518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -504.5551, -473.4075, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -510.0538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -529.0538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -544.5538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -559.5538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -572.5538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -589.0538, -473.4275, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -514.8518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -533.8518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -564.8518, -473.3605, 25.5408, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -577.3518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -583.3518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -519.4160, -472.8649, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -550.4160, -472.8649, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -489.3518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -483.3518, -473.3605, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -478.4160, -472.8649, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -473.4160, -472.8649, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -469.7829, -488.2091, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -489.7829, -488.2091, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -540.2829, -488.2091, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -564.7829, -488.2091, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -589.2829, -488.2091, 25.5098, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -579.6942, -488.2058, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -549.6942, -488.2058, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -510.6942, -488.2058, 25.5404, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -500.5240, -488.8626, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -556.0240, -488.8626, 25.4323, 180.0000, COLOR_WHITE, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4958, -480.0750, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.3096, -490.5564, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4363, -500.5580, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4330, -527.0305, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.8846, -537.6530, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -616.0970, -547.9350, 25.5963, 269.0000, 0, 0, 1},*/
	//Cosechador
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -390.604370, -1476.015747, 26.704042, 259.474060, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -385.473022, -1464.722900, 26.711814, 227.251434, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -372.544342, -1462.451293, 26.736181, 224.972244, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -375.785583, -1473.692260, 26.720621, 224.966537, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -379.832061, -1484.033203, 26.696950, 223.968917, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -389.124328, -1491.877197, 26.187450, 314.527038, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -382.092529, -1499.563842, 25.449359, 314.704895, 1, 1, 0},
	//Basurero
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1593.585327, -2171.675292, 14.095251, 271.092346, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1594.863037, -2165.973144, 14.109066, 264.657806, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1596.188720, -2159.712158, 14.095103, 267.014160, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1598.136474, -2152.792236, 14.103152, 262.389495, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1602.357910, -2143.403808, 14.106391, 213.682922, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1649.863159, -2169.069335, 14.078960, 89.003150, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 1649.602050, -2161.239746, 14.095094, 86.084152, 26, 26, 0},
	//policia ls
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1601.9473, -1696.1240, 5.6107, 89.0810, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1602.1748, -1691.9042, 5.6110, 88.4362, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1602.0411, -1700.2920, 5.6110, 88.6648, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1601.8983, -1704.0681, 5.6115, 89.3552, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1587.3389, -1710.4362, 5.6118, 1.0410, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1583.4728, -1710.5020, 5.6120, 359.4709, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 402, 1545.2308, -1680.1783, 5.7223, 89.2245, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 411, 1544.4467, -1676.0834, 5.6177, 89.6164, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 599, 1570.1743, -1710.9041, 6.0789, 0.5127, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 599, 1574.3672, -1710.9801, 6.0787, 0.3933, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.7402, -1668.5023, 5.4657, 88.7599, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.7308, -1671.5286, 5.4637, 87.6115, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.8281, -1674.2369, 5.4653, 89.9781, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, 1538.5195, -1645.3208, 6.0224, 178.7787, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, 1534.8190, -1645.2932, 6.0222, 178.9228, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 1526.7194, -1644.9723, 5.6494, 179.5714, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1601.9880, -1687.8237, 5.6110, 89.6723, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1602.2769, -1684.0154, 5.6119, 89.6658, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1591.4995, -1710.3190, 5.6105, 359.6988, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 596, 1595.5188, -1710.3881, 5.6109, 358.7049, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 528, 1546.5891, -1654.8442, 5.9344, 90.4177, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 528, 1546.4629, -1650.9556, 5.9348, 90.2691, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 1530.5052, -1644.9598, 5.6494, 179.5481, 16, 1, 0},
	//policia sf
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1588.1722, 749.2943, -5.5779, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1592.2081, 749.1027, -5.5779, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1596.2935, 749.4324, -5.5779, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1600.3527, 749.0949, -5.5779, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1604.2867, 749.3167, -5.5779, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1575.0361, 742.6935, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1574.9946, 738.4707, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1575.1072, 735.0409, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1575.0322, 730.9659, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1575.1212, 722.3821, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1575.0864, 718.5404, -5.5779, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, -1574.7537, 714.1426, -5.1303, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, -1574.6227, 710.4202, -5.1303, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, -1574.6934, 706.5904, -5.1303, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1599.5576, 693.3072, -5.5779, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1608.8636, 693.0085, -5.5779, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 597, -1612.5468, 692.6500, -5.5779, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 411, -1639.4524, 662.1886, -5.5417, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 415, -1639.3489, 666.1519, -5.5417, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 413, -1639.1108, 669.9014, -5.2635, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, -1638.7815, 678.3526, -5.4683, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, -1638.8115, 682.3326, -5.4683, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1628.3209, 691.4453, -5.0293, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1624.6458, 691.1703, -5.0293, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1621.0149, 691.4860, -5.0293, 180.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 426, -1639.1274, 658.2158, -5.5682, -90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1617.3679, 731.1095, -5.6017, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1615.6661, 731.2083, -5.6017, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1613.6464, 731.1612, -5.6017, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1611.4475, 731.4107, -5.6017, 0.0000, 16, 1, 0},
	//Policia lvpd
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2314.1758, 2475.5225, 3.0620, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2313.4473, 2480.4548, 3.0620, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2313.9863, 2470.4392, 3.0620, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2313.3777, 2466.1509, 3.0620, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2313.2185, 2460.8066, 3.0620, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2285.6572, 2474.5803, 3.0066, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2281.5867, 2475.2078, 3.0066, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2277.3740, 2475.5874, 3.0066, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2272.8518, 2475.8105, 3.0066, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2307.3750, 2431.3274, 2.9947, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 598, 2298.9263, 2431.8225, 2.9947, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, 2272.4565, 2431.9678, 3.3194, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, 2267.9832, 2431.6877, 3.3194, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 599, 2263.6194, 2431.6626, 3.3194, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 2246.5898, 2431.7930, 3.0092, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2250.7744, 2431.9976, 3.2946, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2258.8242, 2431.7910, 3.2946, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2254.3489, 2432.4753, 3.2946, 0.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 415, 2297.8123, 2451.5508, 3.0484, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 415, 2298.2183, 2455.7683, 3.0484, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.6643, 2459.1206, 2.8170, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.8755, 2460.9136, 2.8170, 90.0000, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.8306, 2463.0632, 2.8170, 90.0000, 16, 1, 0},
	//EJERCITO
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5, 563, 407.0349, 2455.8659, 19.6386, 268.3708, 1, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5, 548, 418.3270, 2536.8161, 18.2189, 359.9979, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 360.7741, 2544.1281, 16.6378, 0.3733, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 356.0309, 2544.5363, 16.7030, 359.2844, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 378.5499, 2544.0383, 16.6009, 359.9999, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 365.2172, 2544.1416, 16.5706, 0.0315, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 369.8030, 2543.9328, 16.6025, 359.9944, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 374.1511, 2543.9294, 16.5565, 359.9999, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 351.3348, 2544.3725, 16.7227, 359.9147, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3, 470, 382.8216, 2543.8920, 16.5555, 359.9999, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 455, 347.2350, 2532.3708, 17.1620, 359.5530, 61, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 455, 332.8717, 2531.9470, 17.2461, 358.2188, 61, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 455, 338.2587, 2532.4428, 17.2699, 359.4343, 61, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 520, 418.5807, 2480.6047, 17.2129, 86.1988, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 520, 419.1974, 2493.1035, 17.2077, 91.8999, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 432, 323.2878, 2540.7241, 16.8046, 4.1214, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 520, 418.6380, 2505.2890, 17.2051, 91.8998, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 520, 418.3162, 2516.7231, 17.2057, 91.8998, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 511, 290.4755, 2542.2968, 18.2143, 359.9936, 60, 61, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 432, 316.0521, 2540.3840, 16.7888, 5.1738, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 432, 309.0848, 2540.5832, 16.8046, 0.0000, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 568, 255.5951, 2550.1806, 16.6399, 359.9999, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 568, 255.2591, 2537.4445, 16.6353, 0.0000, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 568, 255.7732, 2543.8095, 16.6568, 0.0037, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 424, 274.2642, 2550.1225, 16.4723, 2.8469, 61, 60, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 424, 274.0568, 2544.1689, 16.5148, 355.2498, 61, 60, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 522, 260.7059, 2549.8178, 16.3451, 346.4467, 60, 61, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 424, 273.8152, 2537.0510, 16.5625, 357.7284, 61, 60, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 522, 265.4736, 2550.7290, 16.3836, 357.5233, 60, 61, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 522, 262.9520, 2550.8071, 16.3388, 359.7757, 60, 61, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4, 522, 268.8313, 2551.4245, 16.3569, 358.3872, 60, 61, 0},

	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2112.1623, -84.6228, 0.0383, 22.0205, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2106.7312, -111.7312, -0.3355, 209.4933, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2108.3979, -88.5186, -0.2576, 37.4940, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2104.7770, -91.9776, -0.3716, 37.5332, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2100.8601, -95.3112, -0.3883, 37.5210, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2096.0083, -98.9689, -0.3847, 37.5265, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2112.2666, -108.5957, -0.3203, -144.5012, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2117.8344, -104.6239, -0.3203, -139.0010, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_FISHER, 0, 453, 2124.2175, -100.6259, -0.3203, -139.0010, 1, 7, 0},

	// La cosa nostra
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 487, -1036.8830, -929.7128, 140.5439, 87.0861, 0, 3, 0}, //Maverick
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 593, -1017.1211, -1032.6289, 129.7097, 92.7841, 0, 3, 0}, //Dodo-finca
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 593, -1019.7943, -999.2515, 129.7708, 95.2589, 0, 3, 0}, //Dodo-finca
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 482, 696.3312, -1218.4829, 17.0062, 119.3044, 0, 3, 0}, //Burrito
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 482, 701.1527, -1225.0859, 17.0696, 122.3054, 0, 3, 0}, //Burrito
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 521, 660.5409, -1256.7888, 13.0219, 183.8081, 0, 3, 0}, //FCR-900
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 560, 693.5116, -1229.3575, 16.1862, 117.9222, 0, 3, 0}, //Sultan
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 560, 689.1580, -1222.1109, 16.1214, 118.7233, 0, 3, 0}, //Sultan
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 409, 683.6810, -1235.1760, 15.4408, 118.7156, 0, 3, 0}, //Stretch
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 487, 752.9639, -1200.7141, 25.0576, 317.7830, 0, 3, 0}, //Maverick
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 409, 679.6872, -1227.8555, 15.4913, 117.8353, 0, 3, 0}, //Stretch
	{VEHICLE_TYPE_WORK, WORK_MAFIA, 0, 521, 669.6936, -1256.8299, 13.0307, 177.2782, 0, 3, 0}, //FCR-900
	// the crew criminals
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 560, 2770.7566, -1625.6304, 10.6675, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 560, 2770.7566, -1622.4185, 10.6675, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 560, 2770.7566, -1619.4664, 10.6675, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 579, 2768.9116, -1615.4073, 10.9255, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 579, 2768.9116, -1606.8473, 10.9255, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 579, 2791.4524, -1625.2480, 10.9255, 85.6083, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 579, 2791.4524, -1621.5740, 10.9255, 85.6083, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 521, 2767.0242, -1612.1864, 10.4805, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 521, 2767.0242, -1610.8544, 10.4805, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 521, 2767.0242, -1609.7168, 10.4805, 90.0000, 0, 158, 0},
	{VEHICLE_TYPE_WORK, WORK_ENEMY_MAFIA, 0, 521, 2767.0242, -1609.7168, 10.4805, 90.0000, 0, 158, 0}
	/*{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1613.2410, -1886.6025, 13.2697, 281.5541, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1612.5444, -1883.5178, 13.2577, 274.7869, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1616.1304, -1895.8029, 13.2565, 357.8182, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1612.4306, -1889.9323, 13.2620, 273.0070, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1612.6135, -1892.8798, 13.2146, 270.0488, 1, 7, 0},
	{VEHICLE_TYPE_WORK, WORK_CLEANER, 0, 574, 1619.2185, -1895.7360, 13.2436, 0.0000, 1, 7, 0}*/
};

enum San_Andreas_Barriers_Info
{
	barrier_VEHICLE_TYPE,
	barrier_VEHICLE_TYPE_IN,
	Float:barrier_X,
	Float:barrier_Y,
	Float:barrier_Z,
	Float:barrier_ROTATION,
	barrier_INTERIOR,
	barrier_WORLD,
	barrier_OBJECT_ID,
	barrier_TIMER,
	bool:barrier_CLOSING
};
new San_Andreas_Barriers[][San_Andreas_Barriers_Info] = // usar VEHICLE_TYPE_NONE para que puedan pasar todos
{
	{VEHICLE_TYPE_WORK, WORK_NONE, -495.0410, -562.1307, 24.4932, 180.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // barrera camioneros
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1544.69629, -1630.79651, 12.31840, -90.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // barrera POLICIA LS
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2238.19897, 2450.41797, 9.80680, -90.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // barrera POLICIA LV
	{VEHICLE_TYPE_WORK, WORK_POLICE, -1572.20313, 658.83588, 6.07810, -90.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // barrera POLICIA SF 1
	{VEHICLE_TYPE_WORK, WORK_POLICE, -1701.42969, 687.59381, 23.88280, 90.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // barrera POLICIA SF 2
	{VEHICLE_TYPE_NONE, WORK_NONE, -1526.39063, 481.38281, 6.17970, 0.0, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false}, // ejercito??
	{VEHICLE_TYPE_NONE, WORK_NONE, -82.1645, -1123.0260, 0.0373, 67.1102, 0, 0, INVALID_STREAMER_ID, COLOR_WHITE, false} // grua
};

enum VEHICLE_INFO_enum
{
	bool:vehicle_info_VALID,
	vehicle_info_NAME[24],
	Float:vehicle_info_MAX_GAS, // Por defecto
	Float:vehicle_info_MAX_VEL,
	vehicle_info_PRICE,
	vehicle_info_LEVEL,
	vehicle_info_EXTRA,
	vehicle_info_BOOT_SLOTS,
	vehicle_info_SEATS,
	bool:vehicle_info_ENGINE,
	bool:vehicle_info_DRIVER_DOOR,
	bool:vehicle_info_PASSENGER_DOOR,
	vehicle_info_VIP_LEVEL,
	vehicle_info_COINS,
	bool:vehicle_info_MECHANIC_TRAILER
};
new VEHICLE_INFO[][VEHICLE_INFO_enum] =
{
    {true, "Landstalker", 80.0, 159.00, 50000, 6, 0, 10         , 4     , true, true, true, 0, 0, true},
    {true, "Bravura", 45.0, 148.00, 25000, 4, 0, 6              , 2     , true, true, true, 0, 0, true},
    {true, "Buffalo", 50.0, 188.00, 150000, 8, 0, 6             , 2     , true, true, true, 0, 0, true},
    {true, "Linerunner", 150.0, 110.00, 40000, 30, 0, 0         , 2     , true, true, true, 0, 0, false},
    {true, "Perrenial", 50.0, 134.00, 5000, 2, 0, 10            , 4     , true, true, true, 0, 0, true},
    {true, "Sentinel", 45.0, 165.00, 12000, 2, 0, 6             , 4     , true, true, true, 0, 0, true},
    {true, "Dumper", 20.0, 111.00, 700000, 30, 0, 0             , 1     , true, true, true, 0, 0, false},
    {true, "Firetruck", 120.0, 149.00, 500000, 30, 0, 0         , 2     , true, true, true, 0, 0, false},
    {true, "Trashmaster", 80.0, 101.00, 300000, 30, 0, 0        , 2     , true, true, true, 0, 0, false},
    {true, "Stretch", 80.0, 159.00, 800000, 15, 0, 12           , 4     , true, true, true, 0, 0, true},
    {true, "Manana", 40.0, 131.00, 8000, 2, 0, 4                , 2     , true, true, true, 0, 0, true},
    {true, "Infernus", 80.0, 223.00, 350000, 15, 0, 6           , 2     , true, true, true, 1, 20, true},
    {true, "Voodoo", 45.0, 170.00, 25000, 6, 0, 4               , 2     , true, true, true, 0, 0, true},
    {true, "Pony", 60.0, 111.00, 30000, 6, 0, 12                , 4     , true, true, true, 0, 0, false},
    {true, "Mule", 60.0, 106.00, 30000, 8, 0, 0                 , 2     , true, true, true, 0, 0, false},
    {true, "Cheetah", 65.0, 194.00, 20000, 15, 0, 4             , 2     , true, true, true, 1, 15, true},
    {true, "Ambulance", 120.0, 155.00, 600000, 30, 0, 0         , 4     , true, true, true, 0, 0, false},
    {false, "Leviathan", 1.0, 1.00, 1500000, 30, 0, 0           , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Moonbeam", 60.0, 116.00, 16000, 2, 0, 12            , 4     , true, true, true, 0, 0, false},
    {true, "Esperanto", 40.0, 150.00, 20000, 3, 0, 5            , 2     , true, true, true, 0, 0, true},
    {true, "Taxi", 60.0, 146.00, 80000, 8, 0, 8                 , 4     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "Washington", 50.0, 155.00, 15000, 2, 0, 6           , 4     , true, true, true, 0, 0, true},
    {true, "Bobcat", 70.0, 141.00, 20000, 6, 0, 8               , 2     , true, true, true, 0, 0, true},
    {true, "MrWhoopee", 60.0, 99.00, 30000, 15, 0, 0            , 2     , true, true, true, 0, 0, false},
    {true, "BFInjection", 30.0, 136.00, 20000, 12, 0, 4         , 2     , true, true, false, 1, 20, true},
    {false, "Hunter", 1.0, 1.00, 3000000, 30, 0, 0              , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Premier", 70.0, 175.00, 21000, 3, 0, 6              , 4     , true, true, true, 0, 0, true},
    {true, "Enforcer", 120.0, 167.00, 200000, 16, 0, 0          , 4     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Securicar", 80.0, 158.00, 150000, 15, 0, 12         , 4     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Banshee", 65.0, 203.00, 20000, 15, 0, 4             , 2     , true, true, true, 1, 15, true},
    {false, "Predator", 1.0, 1.00, 80000, 10, 0, 0              , 1     , true, true, true, 0, 0, false},
    {true, "Bus", 180.0, 131.00, 500000, 20, 0, 20              , 500   , true, true, true, 0, 0, false},
    {true, "Rhino", 200.0, 95.00, 10000000, 100, 0, 0           , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Barracks", 150.0, 111.00, 600000, 80, 0, 0          , 2     , true, true, true, 0, 0, false},
    {true, "Hotknife", 50.0, 168.00, 300000, 15, 0, 4           , 2     , true, true, true, 0, 0, true}, // >>>> No.
    {false, "Trailer1", 1.0, 1.00, 50000, 5, 0, 0               , 0     , false, false, false, 0, 0, false}, // >>>> No.
    {true, "Previon", 40.0, 150.00, 8000, 2, 0, 6               , 2     , true, true, true, 0, 0, true},
    {true, "Coach", 150.0, 159.00, 450000, 30, 0, 20            , 500   , true, true, true, 0, 0, false},
    {true, "Cabbie", 80.0, 144.00, 54000, 5, 0, 6               , 4     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "Stallion", 60.0, 170.00, 15000, 2, 0, 6             , 2     , true, true, true, 0, 0, true},
    {true, "Rumpo", 60.0, 137.00, 20000, 5, 0, 12               , 4     , true, true, true, 0, 0, false},
    {false, "RCBandit", 1.0, 1.00, 500, 1, 0, 0                 , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Romero", 60.0, 140.00, 80000, 10, 0, 0              , 2     , true, true, true, 0, 0, true},
    {true, "Packer", 150.0, 127.00, 500000, 15, 0, 0            , 2     , true, true, true, 0, 0, false},
    {true, "Monster", 80.0, 111.00, 20000, 20, 0, 20            , 2     , true, true, true, 2, 50, false},
    {true, "Admiral", 65.0, 165.00, 5000, 1, 0, 4               , 4     , true, true, true, 0, 0, true},
    {false, "Squalo", 1.0, 1.00, 20000, 12, 0, 0                , 1     , true, true, true, 2, 35, false},
    {false, "Seasparrow", 1.0, 1.00, 500000, 16, 0, 0           , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Pizzaboy", 20.0, 116.00, 1600, 1, 0, 0              , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Tram", 1.0, 1.00, 0, 0, 0, 0                       , 0     , false, false, false, 0, 0, false}, // >>>> No.
    {false, "Trailer2", 1.0, 1.00, 0, 0, 0, 0                   , 0     , false, false, false, 0, 0, false}, // >>>> No.
    {true, "Turismo", 80.0, 195.00, 20000, 15, 0, 6             , 2     , true, true, true, 1, 20, true},
    {false, "Speeder", 1.0, 1.00, 1500000, 15, 0, 0             , 1     , true, true, true, 0, 0, false},
    {false, "Reefer", 1.0, 1.00, 800000, 10, 0, 0               , 1     , true, true, true, 0, 0, false},
    {false, "Tropic", 1.0, 1.00, 1600000, 15, 0, 0              , 1     , true, true, true, 2, 35, false},
    {true, "Flatbed", 120.0, 159.00, 50000, 10, 0, 0            , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Yankee", 50.0, 107.00, 80000, 8, 0, 15              , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Caddy", 10.0, 96.00, 20000, 1, 0, 0                 , 2     , true, true, false, 1, 30, false}, // >>>> No.
    {true, "Solair", 80.0, 158.00, 20000, 3, 0, 8               , 4     , true, true, true, 0, 0, true},
    {true, "BerkleyRCVan", 60.0, 137.00, 50000, 5, 0, 12        , 4     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Skimmer", 1.0, 1.00, 160000, 15, 0, 0              , 2     , true, true, true, 0, 0, false},
    {true, "PCJ-600", 45.0, 167.00, 40000, 5, 0, 0              , 2     , true, true, false, 0, 0, false},
    {true, "Faggio", 20.0, 107.00, 1500, 1, 0, 0                , 2     , true, true, false, 0, 0, false},
    {true, "Freeway", 60.0, 142.00, 30000, 6, 0, 0              , 2     , true, true, false, 0, 0, false},
    {false, "RCBaron", 1.0, 1.00, 500, 1, 0, 0                  , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "RCRaider", 1.0, 1.00, 500, 1, 0, 0                 , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Glendale", 50.0, 148.00, 2000, 1, 0, 6              , 4     , true, true, true, 0, 0, true},
    {true, "Oceanic", 50.0, 141.00, 16000, 1, 0, 6              , 4     , true, true, true, 0, 0, true},
    {true, "Sanchez", 40.0, 143.00, 50000, 2, 0, 0              , 2     , true, true, false, 0, 0, false},
    {false, "Sparrow", 1.0, 1.00, 500000, 30, 0, 0              , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Patriot", 120.0, 158.00, 20000, 15, 0, 8            , 4     , true, true, true, 1, 30, true},
    {true, "Quad", 25.0, 111.00, 20000, 1, 0, 0                 , 2     , true, true, false, 1, 10, false},
    {false, "Coastguard", 1.0, 1.00, 150000, 5, 0, 0            , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Dinghy", 1.0, 1.00, 10000, 5, 0, 0                 , 1     , true, true, true, 0, 0, false},
    {true, "Hermes", 80.0, 150.00, 9000, 2, 0, 6                , 2     , true, true, true, 0, 0, true},
    {true, "Sabre", 45.0, 174.00, 12000, 2, 0, 6                , 2     , true, true, true, 0, 0, true},
    {false, "Rustler", 1.0, 1.00, 30000, 15, 0, 0               , 1     , true, true, true, 0, 0, false},
    {true, "ZR-350", 60.0, 188.00, 120000, 3, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "Walton", 50.0, 118.00, 3500, 1, 0, 6                , 2     , true, true, true, 0, 0, true},
    {true, "Regina", 80.0, 141.00, 10000, 5, 0, 10              , 4     , true, true, true, 0, 0, true},
    {true, "Comet", 45.0, 186.00, 130000, 6, 0, 4               , 2     , true, true, true, 0, 0, true},
    {false, "BMX", 1.0, 1.00, 150, 1, 0, 0                      , 1     , false, true, true, 0, 0, false},
    {true, "Burrito", 60.0, 158.00, 40000, 6, 0, 20             , 4     , true, true, true, 0, 0, false},
    {true, "Camper", 50.0, 124.00, 60000, 9, 0, 10              , 3     , true, true, true, 0, 0, false},
    {false, "Marquis", 1.0, 1.00, 6000000, 20, 0, 0             , 1     , true, true, true, 0, 0, false},
    {true, "Baggage", 20.0, 100.00, 1000, 1, 0, 0               , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Dozer", 25.0, 65.00, 50000, 5, 0, 0                 , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Maverick", 1.0, 1.00, 20000, 20, 0, 0              , 4     , true, true, true, 1, 60, false}, // >>>> No.
    {false, "NewsChopper", 1.0, 1.00, 500000, 20, 0, 0          , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Rancher", 90.0, 140.00, 60000, 6, 0, 10             , 2     , true, true, true, 0, 0, true},
    {true, "FBIRancher", 90.0, 158.00, 80000, 8, 0, 12          , 4     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "Virgo", 45.0, 150.00, 6000, 1, 0, 4                 , 2     , true, true, true, 0, 0, true},
    {true, "Greenwood", 45.0, 141.00, 12000, 2, 0, 4            , 4     , true, true, true, 0, 0, true},
    {false, "Jetmax", 1.0, 1.00, 5000000, 20, 0, 0              , 1     , true, true, true, 1, 35, false},
    {true, "Hotring", 80.0, 216.00, 20000, 15, 0, 0             , 2     , true, true, true, 1, 35, true},
    {true, "Sandking", 60.0, 178.00, 20000, 15, 0, 0            , 2     , true, true, true, 1, 35, true},
    {true, "Blista Compact", 60.0, 164.00, 6500, 1, 0, 4        , 2     , true, true, true, 0, 0, true},
    {false, "Police Maverick", 1.0, 1.00, 600000, 20, 0, 0      , 4     , true, true, true, 0, 0, false},
    {true, "Boxville", 60.0, 109.00, 80000, 12, 0, 12           , 4     , true, true, true, 0, 0, false},
    {true, "Benson", 70.0, 124.00, 80000, 12, 0, 12             , 2     , true, true, true, 0, 0, false},
    {true, "Mesa", 60.0, 141.00, 30000, 5, 0, 2                 , 2     , true, true, true, 0, 0, true},
    {false, "RCGoblin", 1.0, 1.00, 500, 1, 0, 0                 , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "HotringRacer A", 80.0, 216.00, 20000, 20, 0, 0      , 2     , true, true, true, 1, 35, true},
    {true, "HotringRacer B", 80.0, 216.00, 20000, 20, 0, 0      , 2     , true, true, true, 1, 35, true},
    {true, "BloodringBanger", 40.0, 174.00, 80000, 15, 0, 0     , 2     , true, true, true, 1, 20, true},
    {true, "Rancher", 80.0, 140.00, 60000, 6, 0, 10             , 2     , true, true, true, 0, 0, true},
    {true, "SuperGT", 60.0, 180.00, 250000, 15, 0, 4            , 2     , true, true, true, 0, 0, true},
    {true, "Elegant", 65.0, 167.00, 5000, 1, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Journey", 90.0, 108.00, 40000, 4, 0, 12             , 2     , true, true, true, 0, 0, false},
    {false, "Bike", 1.0, 1.00, 500, 1, 0, 0                     , 1     , false, true, true, 0, 0, false}, // >>>> No.
    {false, "MountainBike", 1.0, 1.00, 500, 1, 0, 0             , 1     , false, true, true, 0, 0, false}, // >>>> No.
    {false, "Beagle", 1.0, 1.00, 6000000, 16, 0, 0              , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Cropdust", 1.0, 1.00, 1200000, 12, 0, 0            , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Stunt", 1.0, 1.00, 1200000, 12, 0, 0               , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Tanker", 130.0, 121.00, 500000, 20, 0, 0            , 2     , true, true, true, 0, 0, false},
    {true, "Roadtrain", 150.0, 143.00, 500000, 20, 0, 0         , 2     , true, true, true, 0, 0, false},
    {true, "Nebula", 60.0, 158.00, 4000, 1, 0, 4                , 4     , true, true, true, 0, 0, true},
    {true, "Majestic", 45.0, 158.00, 4000, 1, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "Buccaneer", 50.0, 165.00, 4500, 1, 0, 4             , 2     , true, true, true, 0, 0, true},
    {false, "Shamal", 1.0, 1.00, 20000000, 30, 0, 0             , 1     , true, true, true, 0, 0, false},
    {false, "Hydra", 1.0, 1.00  , 50000000, 100, 0, 0           , 1     , true, true, true, 0, 0, false},
    {true, "FCR-900", 50.0, 169.00, 60000, 6, 0, 0              , 2     , true, true, false, 1, 25, false},
    {true, "NRG-500", 40.0, 190.00, 80000, 8, 0, 0              , 2     , true, true, false, 1, 30, false},
    {true, "HPV1000", 60.0, 168.00, 50000, 8, 0, 0              , 2     , true, true, false, 0, 0, false}, // >>>> No.
    {true, "CementTruck", 30.0, 131.00, 80000, 8, 0, 0          , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "TowTruck", 60.0, 162.00, 30000, 3, 0, 4             , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Fortune", 40.0, 159.00, 10000, 2, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "Cadrona", 45.0, 150.00, 10000, 2, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "FBITruck", 80.0, 178.00, 150000, 15, 0, 12          , 2     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "Willard", 55.0, 150.00, 5000, 1, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Forklift", 10.0, 61.00, 1500, 1, 0, 0               , 1     , true, true, true, 0, 0, false},
    {true, "Tractor", 30.0, 71.00, 2000, 1, 0, 0                , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Combine", 20.0, 111.00, 10000, 2, 0, 0              , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Feltzer", 50.0, 168.00, 13000, 3, 0, 6              , 2     , true, true, true, 0, 0, true},
    {true, "Remington", 60.0, 170.00, 15000, 3, 0, 4            , 2     , true, true, true, 0, 0, true},
    {true, "Slamvan", 60.0, 159.00, 20000, 8, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "Blade", 62.0, 174.00, 30000, 4, 0, 6                , 2     , true, true, true, 0, 0, true},
    {false, "Freight", 1.0, 1.00, 1000000, 100, 0, 0            , 500   , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Streak", 1.0, 1.00, 1000000, 100, 0, 0             , 500   , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Vortex", 20.0, 100.00, 2000, 20, 0, 0               , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Vincent", 40.0, 150.00, 5000, 1, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Bullet", 60.0, 204.00, 20000, 15, 0, 4              , 2     , true, true, true, 1, 30, true},
    {true, "Clover", 45.0, 165.00, 6000, 1, 0, 4                , 2     , true, true, true, 0, 0, true},
    {true, "Sadler", 60.0, 152.00, 5000, 1, 0, 8                , 2     , true, true, true, 0, 0, true},
    {true, "FiretruckLA", 120.0, 149.00, 2000000, 20, 0, 0      , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Hustler", 80.0, 148.00, 60000, 25, 0, 6             , 2     , true, true, true, 0, 0, true},
    {true, "Intruder", 60.0, 150.00, 15000, 3, 0, 6             , 4     , true, true, true, 0, 0, true},
    {true, "Primo", 55.0, 144.00, 3000, 1, 0, 6                 , 4     , true, true, true, 0, 0, true},
    {false, "Cargobob", 1.0, 1.00, 3000000, 20, 0, 0            , 2     , true, true, true, 0, 0, false},
    {true, "Tampa", 60.0, 154.00, 12000, 2, 0, 4                , 2     , true, true, true, 0, 0, true},
    {true, "Sunrise", 60.0, 146.00, 9000, 2, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Merit", 55.0, 158.00, 8000, 2, 0, 6                 , 4     , true, true, true, 0, 0, true},
    {true, "Utility", 60.0, 122.00, 30000, 3, 0, 6              , 2     , true, true, true, 0, 0, true}, // >>>> No.
    {false, "Nevada", 1.0, 1.00, 2000000, 30, 0, 0              , 1     , true, true, true, 0, 0, false},
    {true, "Yosemite", 60.0, 145.00, 25000, 3, 0, 8             , 2     , true, true, true, 0, 0, true},
    {true, "Windsor", 45.0, 159.00, 13500, 3, 0, 4              , 2     , true, true, true, 0, 0, true},
    {true, "MonsterA", 45.0, 111.00, 20000, 20, 0, 20           , 2     , true, true, true, 1, 50, false},
    {true, "MonsterB", 60.0, 111.00, 20000, 20, 0, 20           , 2     , true, true, true, 1, 50, false},
    {true, "Uranus", 80.0, 157.00, 15000, 3, 0, 4               , 2     , true, true, true, 0, 0, true},
    {true, "Jester", 60.0, 179.00, 25000, 5, 0, 4               , 2     , true, true, true, 1, 15, true},
    {true, "Sultan", 60.0, 170.00, 80000, 5, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Stratum", 60.0, 155.00, 29000, 4, 0, 8              , 4     , true, true, true, 0, 0, true},
    {true, "Elegy", 60.0, 179.00, 20000, 6, 0, 6                , 2     , true, true, true, 1, 15, true},
    {false, "Raindance", 1.0, 1.00, 500000, 15, 0, 0            , 2     , true, true, true, 0, 0, false},
    {false, "RC Tiger", 1.0, 1.00, 500, 1, 0, 0                 , 1     , true, true, true, 0, 0, false},
    {true, "Flash", 60.0, 166.00, 60000, 6, 0, 8                , 2     , true, true, true, 0, 0, true},
    {true, "Tahoma", 40.0, 161.00, 15000, 1, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Savanna", 50.0, 174.00, 30000, 5, 0, 6              , 4     , true, true, true, 0, 0, true},
    {true, "Bandito", 30.0, 147.00, 30000, 5, 0, 0              , 1     , true, true, true, 0, 0, true},
    {false, "FreightFlat", 1.0, 1.00, 5000000, 50, 0, 0         , 0     , true, true, true, 0, 0, false},
    {false, "StreakCarriage", 1.0, 1.00, 5000000, 50, 0, 0      , 0     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Kart", 10.0, 94.00, 20000, 1, 0, 0                  , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Mower", 15.0, 61.00, 1200, 1, 0, 0                  , 1     , true, true, true, 0, 0, false},
    {true, "Duneride", 80.0, 111.00, 1000000, 20, 0, 20         , 2     , true, true, true, 2, 50, false},
    {true, "Sweeper", 20.0, 61.00, 4000, 1, 0, 2                , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Broadway", 45.0, 159.00, 20000, 6, 0, 4             , 2     , true, true, true, 0, 0, true},
    {true, "Tornado", 40.0, 159.00, 6000, 1, 0, 4               , 2     , true, true, true, 0, 0, true},
    {false, "AT-400", 1.0, 1.00, 10000000, 50, 0, 0             , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "DFT-30", 80.0, 131.00, 100000, 10, 0, 4             , 2     , true, true, true, 0, 0, false},
    {true, "Huntley", 80.0, 159.00, 60000, 6, 0, 8              , 4     , true, true, true, 0, 0, true},
    {true, "Stafford", 60.0, 154.00, 90000, 2, 0, 6             , 4     , true, true, true, 0, 0, true},
    {true, "BF-400", 35.0, 168.00, 13000, 2, 0, 0               , 2     , true, true, false, 0, 0, false},
    {true, "Newsvan", 60.0, 137.00, 30000, 3, 0, 10             , 4     , false, false, false, 0, 0, false},
    {true, "Tug", 15.0, 86.00, 2000, 1, 0, 0                    , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Trailer 3", 1.0, 1.00, 160000, 15, 0, 0            , 0     , true, true, true, 0, 0, false},
    {true, "Emperor", 60.0, 154.00, 6000, 1, 0, 6               , 4     , true, true, true, 0, 0, true},
    {true, "Wayfarer", 50.0, 158.00, 8000, 2, 0, 0              , 2     , true, true, false, 0, 0, false},
    {true, "Euros", 50.0, 166.00, 20000, 3, 5, 5                , 2     , true, true, true, 0, 0, true},
    {true, "Hotdog", 60.0, 109.00, 30000, 5, 0, 12              , 2     , true, true, true, 0, 0, false},
    {true, "Club", 65.0, 164.00, 20000, 10, 0, 6                , 2     , true, true, true, 0, 0, true},
    {false, "FreightCarriage", 1.0, 1.00, 1000000, 100, 0, 0    , 0     , false, false, false, 0, 0, false}, // >>>> No.
    {false, "Trailer3", 1.0, 1.00, 1000000, 100, 0, 0           , 0     , false, false, false, 0, 0, false}, // >>>> No.
    {false, "Andromada", 1.0, 1.00, 1000000, 100, 0, 0          , 500   , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Dodo", 1.0, 1.00, 750000, 12, 0, 0                 , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "RCCam", 1.0, 1.00, 500, 1, 0, 0                    , 2     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "Launch", 1.0, 1.00, 800000, 8, 0, 0                , 1     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "LSPD", 60.0, 177.00, 50000, 10, 0, 8                , 4     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "SFPD", 60.0, 177.00, 50000, 10, 0, 8                , 4     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "LVPD", 60.0, 177.00, 50000, 10, 0, 8                , 4     , true, true, true, 0, 0, true},
    {true, "PoliceRanger", 90.0, 159.00, 70000, 10, 0, 12       , 2     , true, true, true, 0, 0, true}, // // >>>> No. >>>> No.
    {true, "Picador", 40.0, 152.00, 4500, 1, 0, 6               , 2     , true, true, true, 0, 0, true},
    {true, "S.W.A.T.Van", 30.0, 111.00, 4000000, 50, 0, 0       , 2     , true, true, true, 0, 0, true}, // >>>> No.
    {true, "Alpha", 60.0, 170.00, 50000, 8, 0, 4                , 2     , true, true, true, 0, 0, true},
    {true, "Phoenix", 60.0, 172.00, 35000, 10, 0, 4             , 2     , true, true, true, 0, 0, true},
    {true, "Glendale", 30.0, 148.00, 1500, 1, 0, 6              , 4     , true, true, true, 0, 0, true},
    {true, "Sadler", 40.0, 152.00, 1600, 1, 0, 6                , 2     , true, true, true, 0, 0, true},
    {false, "LuggageTrailerA", 1.0, 1.00, 500, 1, 0, 0          , 0     , true, true, true, 0, 0, false},
    {false, "LuggageTrailerB", 1.0, 1.00, 500, 1, 0, 0          , 0     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "StairTrailer", 1.0, 1.00, 500, 1, 0, 0             , 0     , true, true, true, 0, 0, false}, // >>>> No.
    {true, "Boxville", 90.0, 108.00, 60000, 6, 0, 15            , 4     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "FarmPlow", 1.0, 1.00, 3000, 1, 0, 0                , 0     , true, true, true, 0, 0, false}, // >>>> No.
    {false, "UtilityTrailer", 1.0, 1.00, 1000, 1, 0, 0          , 0     , true, true, true, 0, 0, false} // >>>> No.
};

#define MAX_BOOT_SLOTS   20
enum
{
	BOOT_TYPE_WEAPON
};
enum enum_VEHICLE_BOOT
{
	bool:vehicle_boot_VALID,
	vehicle_boot_OBJECT_ID,
	vehicle_boot_TYPE,
	vehicle_boot_INT,
	vehicle_boot_INT_EXTRA
};
new VEHICLE_BOOT[MAX_VEHICLES][MAX_BOOT_SLOTS][enum_VEHICLE_BOOT];

enum SELL_INFO_VEHICLES_Enum
{
	sel_info_vehicle_MODELID,
	Float:sell_info_SPAWN_X,
	Float:sell_info_SPAWN_Y,
	Float:sell_info_SPAWN_Z,
	Float:sell_info_SPAWN_ANGLE,
	sell_info_COLOR_1,
	sell_info_COLOR_2,
	sell_info_SHOP
};

new SELL_INFO_VEHICLES[][SELL_INFO_VEHICLES_Enum] =
{
	{400, -1971.730834, 305.717071, 35.281467, 112.761856, -1, -1, 0}, //conce0 sf
	{489, -1972.303588, 299.899291, 35.315319, 113.739143, -1, -1, 0}, //conce0
	{500, -1989.106811, 267.932830, 35.276290, 267.933868, -1, -1, 0}, //conce0
	{516, -1988.849243, 262.505828, 35.014682, 273.633972, -1, -1, 0}, //conce0
	{517, -1989.152587, 257.527374, 35.020854, 278.511993, -1, -1, 0}, //0
	{518, -1990.650756, 252.367614, 34.853424, 260.343750, -1, -1, 0}, //0
	{526, -1991.783203, 247.102294, 34.938541, 263.152526, -1, -1, 0}, //0
	{529, -1992.195556, 241.864547, 34.804782, 265.900787, -1, -1, 0}, //0
	{533, -1970.909790, 271.824432, 34.874591, 92.208198, -1, -1, 0}, //0
	{534, -1971.686889, 266.768585, 34.897808, 90.052833, -1, -1, 0}, //0
	{535, -1972.078857, 261.530334, 34.940402, 91.687599, -1, -1, 0}, //0
	{536, -1971.535644, 255.783843, 34.909259, 90.030273, -1, -1, 0}, //0
	{540, -1985.110107, 303.989593, 35.031871, 247.498382, -1, -1, 0}, //0
	{543, -1959.895751, 272.834747, 35.330417, 315.005645, -1, -1, 0}, //0
	{546, -1947.004760, 265.553222, 35.208316, 44.999832, -1, -1, 0}, //0
	{547, -1957.724731, 261.617736, 35.244117, 134.999298, -1, -1, 0}, //0
	{549, -1950.561035, 258.919067, 35.165855, 23.361270, -1, -1, 0}, //0
	{551, -1961.752929, 284.531127, 35.270526, 0.696665, -1, -1, 0}, //0
	{554, -1946.718139, 257.937591, 41.083919, 45.030506, -1, -1, 0}, //0
	{555, -1955.544677, 257.741241, 40.755210, 315.004882, -1, -1, 0}, //0
	{558, -1945.867919, 273.318969, 40.666416, 135.659255, -1, -1, 0}, //0
	{559, -1946.407836, 264.562194, 40.705158, 70.021125, -1, -1, 0}, //0
	{560, -1953.854003, 295.461822, 40.762950, 141.442657, -1, -1, 0}, //0
	{561, -1954.960693, 302.385498, 40.873092, 45.000858, -1, -1, 0}, //0
	{562, -1955.735351, 274.163513, 40.699062, 224.775680, -1, -1, 0}, //0
	{565, 561.566101, -1290.956542, 16.871730, 13.598201, -1, -1, 1}, //1 gotti
	{566, 555.651794, -1290.101562, 17.030550, 12.250467, -1, -1, 1}, //1
	{567, 548.681701, -1288.398803, 17.121070, 2.627753, -1, -1, 1}, //1
	{575, 543.408569, -1290.018676, 16.844970, 12.805674, -1, -1, 1}, //1
	{576, 537.712585, -1289.785278, 16.853311, 8.072924, -1, -1, 1}, //1
	{579, 531.610229, -1289.627563, 17.179222, 0.727972, -1, -1, 1}, //1 
	{580, 524.575805, -1290.402587, 17.038362, 347.873016, -1, -1, 1}, //1
	{585, 519.242980, -1287.057373, 16.828090, 306.424560, -1, -1, 1}, //1
	{587, 527.172241, -1282.828613, 16.988870, 225.000015, -1, -1, 1}, //1
	{589, 531.867553, -1279.575195, 16.918565, 225.000091, -1, -1, 1}, //1
	{600, 536.016235, -1276.898681, 16.963094, 225.002395, -1, -1, 1}, //1
	{602, 539.315979, -1273.561767, 17.073772, 224.999908, -1, -1, 1}, //1
	{603, 543.021911, -1270.594482, 17.126434, 224.998825, -1, -1, 1}, //1
	{402, 547.388854, -1268.065185, 17.089252, 225.000061, -1, -1, 1}, //1
	{405, 550.830261, -1264.989990, 17.167030, 225.000000, -1, -1, 1}, //1
	{604, 2123.362304, -1144.851196, 24.472566, 314.818267, -1, -1, 2}, //2 ls
	{605, 2120.166748, -1141.430053, 24.722545, 314.695739, -1, -1, 2}, //2
	{542, 2120.096923, -1136.088378, 24.996570, 314.858062, -1, -1, 2}, //2
	{462, 2126.857177, -1147.089843, 24.115188, 314.773010, -1, -1, 2}, //2
	{543, 2132.541748, -1142.541259, 24.895196, 44.777957, -1, -1, 2}, //2
	{529, 2135.447509, -1140.396362, 24.948331, 45.030994, -1, -1, 2}, //2
	{401, 1730.930053, 1887.108520, 10.599695, 134.999694, -1, -1, 3}, //
	{404, 1731.381225, 1892.453125, 10.569231, 134.707473, -1, -1, 3}, //
	{405, 1731.109252, 1898.369384, 10.702906, 135.000000, -1, -1, 3}, //
	{410, 1731.451293, 1903.748901, 10.504331, 135.005813, -1, -1, 3}, //
	{412, 1730.241699, 1908.477050, 10.707293, 134.881576, -1, -1, 3}, //
	{413, 1730.819458, 1914.079833, 10.902223, 134.658706, -1, -1, 3}, //
	{418, 1730.897949, 1919.471923, 10.925701, 135.000335, -1, -1, 3}, //
	{419, 1730.598510, 1924.523437, 10.644100, 135.000000, -1, -1, 3}, //
	{421, 1730.842407, 1929.510375, 10.778207, 134.998794, -1, -1, 3}, //
	{422, 1731.021850, 1934.202270, 10.808994, 135.312362, -1, -1, 3}, //
	{426, 1731.136352, 1938.637451, 10.596670, 134.887939, -1, -1, 3}, //
	{426, 1730.754760, 1943.268554, 10.570414, 134.479446, -1, -1, 3}, //
	{439, 1731.084106, 1948.810180, 10.755937, 134.970794, -1, -1, 3}, //
	{445, 1730.763916, 1954.217285, 10.718680, 134.999984, -1, -1, 3}, //
	{458, 1731.066528, 1959.513549, 10.657438, 136.287368, -1, -1, 3}, //
	{459, 1731.444946, 1964.863403, 10.899006, 134.975570, -1, -1, 3}, //
	{466, 1730.831176, 1969.622192, 10.593549, 134.999984, -1, -1, 3}, //
	{467, 1730.754882, 1975.104492, 10.608223, 134.999969, -1, -1, 3}, //
	{474, 1730.852539, 1980.575927, 10.568473, 135.129379, -1, -1, 3}, //
	{475, 1730.986572, 1986.015014, 10.660503, 134.965286, -1, -1, 3}, //
	{477, 1731.019409, 1990.834350, 10.559190, 134.795349, -1, -1, 3}, //
	{478, 1731.501220, 1996.037841, 10.857707, 134.984298, -1, -1, 3}, //
	{479, 1731.119262, 2000.719360, 10.598874, 134.999588, -1, -1, 3}, //
	{480, 1731.495361, 2005.884155, 10.634652, 134.999740, -1, -1, 3}, //
	{482, 1731.285766, 2010.759765, 10.950078, 135.215301, -1, -1, 3}, //
	{483, 1730.935058, 2014.496948, 10.826995, 135.018432, -1, -1, 3}, //
	{489, 1731.131103, 2019.822509, 10.965262, 134.999526, -1, -1, 3}, //
	{491, 1742.855224, 1886.187866, 10.607666, 224.881958, -1, -1, 3}, //
	{492, 1742.420410, 1891.042602, 10.625684, 225.000015, -1, -1, 3}, //
	{496, 1741.725830, 1895.996459, 10.518464, 224.999679, -1, -1, 3}, //
	{500, 1741.789916, 1901.220703, 10.979518, 224.999908, -1, -1, 3}, //
	{507, 1742.658081, 1905.751464, 10.650567, 224.999938, -1, -1, 3}, //
	{461, 1745.890258, 1853.801513, 10.397463, 44.999942, -1, -1, 3}, //
	{462, 1741.982177, 1853.458618, 10.424824, 45.022659, -1, -1, 3}, //
	{463, 1738.716674, 1853.531250, 10.366888, 45.000011, -1, -1, 3}, //
	{468, 1735.504272, 1853.494750, 10.499835, 44.996749, -1, -1, 3}, //
	{471, 1732.698120, 1853.572998, 10.344942, 44.999938, -1, -1, 3}, //
	{521, 1729.782714, 1853.793823, 10.406937, 44.999969, -1, -1, 3}, //
	{522, 1727.729858, 1853.685791, 10.398012, 44.997669, -1, -1, 3}, //
	{581, 1725.653930, 1853.688842, 10.425397, 45.000293, -1, -1, 3}, //
	{586, 1722.802734, 1853.941406, 10.325091, 45.006359, -1, -1, 3}, //
	{470, 1742.820800, 1913.142211, 10.816078, 229.028472, -1, -1, 3},
	{444, 1742.383178, 1877.171997, 11.191605, 207.159729, -1, -1, 3},
	{556, 1730.099609, 1877.612792, 11.195281, 145.682418, -1, -1, 3},
	{568, 1741.999877, 1919.793823, 10.684306, 230.327041, -1, -1, 3},
	{531, 1742.570190, 1923.476196, 10.785881, 234.443817, -1, -1, 3},
	{409, 1736.970092, 2030.637451, 10.619542, 359.768463, -1, -1, 3},
	{573, 1736.567016, 1873.478393, 11.484094, 181.366882, -1, -1, 3},
	{402, -1660.500610, 1214.428955, 7.081802, 245.781250, -1, -1, 4}, //
	{411, -1659.630004, 1216.934814, 13.398953, 332.907165, -1, -1, 4}, //
	{415, -1653.029663, 1210.681518, 13.444266, 253.155578, -1, -1, 4}, //
	{429, -1669.283081, 1206.197265, 13.351553, 294.647796, -1, -1, 4}, //
	{451, -1666.966186, 1205.829345, 20.861524, 324.716613, -1, -1, 4}, //
	{506, -1658.944458, 1206.433837, 20.860774, 17.348609, -1, -1, 4}, //
	{541, -1649.423461, 1206.491821, 20.775476, 133.478042, -1, -1, 4}, //
	{545, -1656.527587, 1216.405029, 21.003622, 44.999988, -1, -1, 4} //
	/*{446, -2231.2676, 2451.4797, 0.0119, 228.6364, -1, -1, 5},
	{452, -2241.1306, 2440.2146, 0.0119, 226.4393, -1, -1, 5},
	{453, -2250.6514, 2428.3452, 0.0119, 226.4393, -1, -1, 5},
	{454, -2262.2539, 2419.0127, 0.0119, 226.4393, -1, -1, 5},
	{454, -2202.1697, 2421.1807, 0.0119, 45.7924, -1, -1,  5},
	{472, -2234.6467, 2394.7185, 0.2970, 42.8398, -1, -1,  5},
	{484, -2213.1201, 2411.4111, 0.0119, 46.0592, -1, -1,  5},
	{473, -2237.2305, 2390.8669, 0.2970, 42.8398, -1, -1,  5},
	{493, -2223.5603, 2400.2893, -0.0596, 46.0592, -1, -1, 5},
	{595, -2245.3577, 2433.8679, 0.5854, 226.4393, -1, -1, 5}*/
};

new Float:SELL_VEHICLES_SHOPS_SPAWN[][] =
{
	{-1920.1965, 302.7697, 40.5643, -90.0000}, //sf
	{563.774475, -1273.510986, 16.867170, 12.636687}, //grotti
	{2126.008544,-1115.513916,25.176628,69.340042},//ls trucho
	{1642.246582,1796.102050,10.820312,180.149368}, //lv
	{-1645.245361, 1217.047973, 6.732273, 224.517120} //sf 2
	//{-2258.0054, 2477.0315, 0.2512, 313.4971} barcos
};

enum SELL_VEHICLES_Enum
{
	bool:sell_vehicle_VALID,
	sell_vehicle_SHOP,
	sell_vehicle_PRICE,
	sell_vehicle_LEVEL,
	sell_vehicle_EXTRA,
	sell_vehicle_VIP_LEVEL,
	Text3D:sell_vehicle_LABEL_ID
};
new SELL_VEHICLES[MAX_VEHICLES][SELL_VEHICLES_Enum];

/* RESULT_YOUTUBE */
#define MAX_RESULTS 10
enum yt_result
{
	videoID[11 + 1],
	yt_title[100 + 1]
};

new RESULT_YOUTUBE[MAX_RESULTS][yt_result],
	PLAYER_DIALOG_MP3_RESULT[MAX_PLAYERS][MAX_RESULTS][yt_result];

// AGRICULTOR
enum
{
	PLANT_TYPE_MEDICINE,     // VIDA
	PLANT_TYPE_CANNABIS,     // YOKSETIOXD
	PLANT_TYPE_CRACK         //CHALECO
}

enum seed_info_enum
{
	seed_info_TYPE,
	seed_info_PLANT_TYPE,
	seed_info_EXP,
	seed_info_NAME[24],
	seed_info_PRICE
};
new seed_info[][seed_info_enum] =
{
	{TYPE_LEGAL, PLANT_TYPE_MEDICINE, 0, "Aloe vera", 30},
	{TYPE_ILLEGAL, PLANT_TYPE_CANNABIS, 100, "Marihuana", 150},
	{TYPE_ILLEGAL, PLANT_TYPE_CRACK, 200, "Coca", 650}
};

enum plant_info_enum
{
	plant_info_SEEDS,
	plant_info_NAME[24]
};
new plant_info[][plant_info_enum] =
{
	{2, "Medicamento"},
	{4, "Marihuana"},
	{5, "Crack"}
};

#define MAX_PLANTS 4000
enum PLANTS_ENUM
{
	bool:plant_VALID,
	bool:plant_GROWING,
	bool:plant_INVISIBLE,
	Float:plant_GROWING_PROGRESS,
	plant_TYPE,
	plant_PLANTED_BY_ACCOUNT_ID,
	plant_PLANTED_BY_NAME[24],
	plant_OBJECT_ID,
	Text3D:plant_LABEL_ID,
	plant_EXPIRE_TIME,
	plant_TIMER
};
new PLANTS[MAX_PLANTS][PLANTS_ENUM];

enum
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLANT
};

/* SYSTEM - GPS */
enum
{
	CHECKPOINT_TYPE_NONE,
	CHECKPOINT_TYPE_GPS,
	CHECKPOINT_TYPE_UNLOAD_TRUCK,
	CHECKPOINT_TYPE_FINISH_TRUCK,
	CHECKPOINT_TYPE_HARVEST,
	CHECKPOINT_TYPE_TRASH,
	CHECKPOINT_TYPE_FINISH_TRASH
	//CHECKPOINT_TYPE_CLEANER,
	//CHECKPOINT_TYPE_FINISH_CLEANER
};

#define MAX_PLAYER_GPS_SAVES 10
enum Player_GPS_Enum
{
	player_gps_VALID,
	player_gps_ID,
	player_gps_NAME[24],
	Float:player_gps_X,
	Float:player_gps_Y,
	Float:player_gps_Z,
	player_gps_WORLD,
	player_gps_INTERIOR
};
new PLAYER_GPS[MAX_PLAYERS][MAX_PLAYER_GPS_SAVES][Player_GPS_Enum];

/* SYSTEM - PLAYER OBJECTS */
enum Player_Objects_Enum
{
	po_GPS,
	po_MP3,
	po_PHONE_RESOLVER
};
new PLAYER_OBJECT[MAX_PLAYERS][Player_Objects_Enum];

enum
{
	SEX_MALE,
	SEX_FEMALE
};

enum e_ZONEINFO
{
	z_Name[45],
    Float:z_MinX,
    Float:z_MinY,
    Float:z_MinZ,
    Float:z_MaxX,
    Float:z_MaxY,
    Float:z_MaxZ
};
new g_Zones[][e_ZONEINFO] =
{
	// Indoor zones
	{"Caligula's Palace",            2087.30,  1543.20,   900.00,  2437.30,  1703.20,   1200.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   900.00,  2027.30,  1083.20,   1200.90},
	// Outdoor Zones list by mabako, from gta client files
	{"The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
	{"Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
	{"Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
	{"Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
	{"Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
	{"Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
	{"Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
	{"Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
	{"Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
	{"Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
	{"Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
	{"Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
	{"Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
	{"Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
	{"Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
	{"Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{"Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{"Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{"Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{"Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{"Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{"Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{"Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{"Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
	{"Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
	{"Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
	{"Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{"Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{"Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
	{"Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
	{"City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
	{"Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{"Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{"Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{"Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{"Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{"Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{"Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{"Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{"Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{"Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
	{"Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{"Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
	{"Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
	{"Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
	{"Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
	{"Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
	{"Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
	{"Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
	{"Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
	{"Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
	{"Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{"Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{"Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{"Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{"Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{"East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{"East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{"East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{"East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{"East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{"East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{"East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{"East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{"East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{"East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{"East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{"Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
	{"Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
	{"Easter Bay Airport",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
	{"Easter Bay Airport",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
	{"Easter Bay Airport",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
	{"Easter Bay Airport",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
	{"Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
	{"Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
	{"El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
	{"El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
	{"El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
	{"El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{"El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{"El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
	{"Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
	{"Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
	{"Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
	{"Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
	{"Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
	{"Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
	{"Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
	{"Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
	{"Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
	{"Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
	{"Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
	{"Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
	{"Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
	{"Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
	{"Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
	{"Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
	{"Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
	{"Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
	{"Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
	{"Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
	{"Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
	{"Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{"Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{"Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
	{"Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
	{"Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{"Garver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{"Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
	{"Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{"Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{"Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{"Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
	{"Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{"Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{"Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
	{"Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
	{"Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{"Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
	{"Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
	{"Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{"Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{"Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{"Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{"Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{"Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{"Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{"Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{"Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{"Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{"Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{"Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{"Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{"Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{"Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{"Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{"Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{"Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{"Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{"Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{"Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{"Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{"Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{"Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{"Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{"Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{"Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{"Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{"Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{"Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
	{"Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
	{"K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{"Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{"Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{"Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{"King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
	{"King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
	{"King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
	{"LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{"LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{"LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{"LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{"LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{"Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
	{"Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
	{"Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{"Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{"Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{"Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{"Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{"Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{"Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{"Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{"Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{"Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{"Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{"Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{"Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{"Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{"Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{"Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{"Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{"Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{"Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{"Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{"Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{"Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{"Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{"Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{"Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{"Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{"Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{"Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{"Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{"Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{"Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{"Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{"Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{"Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{"Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{"Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{"Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{"Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{"Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{"Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{"Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{"Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{"Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{"Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{"Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{"Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{"Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{"Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{"Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{"Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{"Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{"Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{"Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{"Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{"North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{"Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{"Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{"Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{"Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{"Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{"Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{"Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{"Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{"Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{"Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{"Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{"Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{"Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{"Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{"Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{"Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{"Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{"Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{"Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{"Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{"Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{"Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{"Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{"Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{"Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{"Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{"Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{"Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{"Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{"Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{"Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{"Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{"Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{"Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{"Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{"Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{"Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{"Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{"Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{"Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{"Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{"Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{"Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{"Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{"Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{"Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{"Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{"Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{"Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{"Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{"Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{"Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{"Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{"Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{"Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{"Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{"Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{"Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{"Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{"Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{"Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{"Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{"Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{"Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{"San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{"Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{"Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{"Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{"Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{"Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{"Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{"Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{"Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{"Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{"Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{"Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{"Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{"Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{"Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{"Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{"Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{"Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{"The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{"The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{"The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{"The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{"The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{"The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{"The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{"The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{"The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{"The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{"The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{"The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{"The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{"The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{"The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{"Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{"Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{"Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{"Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{"Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{"Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{"Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{"Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{"Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{"Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{"Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{"Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{"Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{"Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{"Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{"Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{"Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{"Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{"Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{"Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{"Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{"Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{"Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{"Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{"Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00}
};

new g_Cities[][e_ZONEINFO] =
{
	// Main Zones
	{"Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{"Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum enum_SAFE_ZONES
{
	safe_zone_AREA_ID,
	Float:safe_zone_MIN_X,
	Float:safe_zone_MIN_Y,
	Float:safe_zone_MAX_X,
	Float:safe_zone_MAX_Y,
	safe_zone_INTERIOR,
	safe_zone_WORLD
};

new SAFE_ZONES[][enum_SAFE_ZONES] =
{
	{INVALID_STREAMER_ID, -155.0, -1273.0, 45.0, -1073.0 , 0, 0}, // Mecanico
	//{INVALID_STREAMER_ID, 2057.0, -1927.0, 2227.0, -1827.0, 0, 0}, // Mercado negro
	{INVALID_STREAMER_ID, 1119.0, -1406.0, 1279.0, -1266.0, 0, 0}, // Hospital
	{INVALID_STREAMER_ID, 2364.0, -2722.0, 2564.0, -2472.0, 0, 0} // Camionero
};

/* Rangos Policias */
enum enum_POLICE_SHOP_WEAPONS
{
	police_shop_RANK,
	police_shop_WEAPON_ID,
	police_shop_WEAPON_PRICE
};
new POLICE_SHOP_WEAPONS[][enum_POLICE_SHOP_WEAPONS] =
{
	{1, 3, 0},//porra
	{1, 22, 0},//9mm
	{1, 23, 0},//tazer
	{2, 17, 0}, //gas
	{2, 24, 0}, //deagle
	{2, 25, 0}, //escopeta
	{2, 28, 0}, //uzi
	{2, 29, 0}, //mp5
	{2, 30, 0}, //ak 47
	{2, 31, 0}, //m4
	{2, 33, 0} //rifle
};


enum enum_POLICE_SKINS
{
	police_skin_TYPE,
	police_skin_SKIN,
	police_skin_RANK
};
new POLICE_SKINS[][enum_POLICE_SKINS] =
{
	{SEX_MALE, 71, 1}, // Cadete
	{SEX_MALE, 280, 2}, // Oficial 1
	{SEX_MALE, 284, 4}, // Oficial 3
	{SEX_MALE, 281, 6}, // Detective 1
	{SEX_MALE, 285, 9}, // Sargento 1
	{SEX_MALE, 282, 10}, // Sargento 2
	{SEX_MALE, 286, 11}, // Soldado
	{SEX_MALE, 287, 13}, // Teniente
	{SEX_MALE, 288, 15}, // Jefe

	{SEX_FEMALE, 306, 1},
	{SEX_FEMALE, 307, 1},
	{SEX_FEMALE, 309, 1}
};

#define MAX_POLICE_OBJECTS 300
enum enum_POLICE_OBJECTS
{
	bool:police_object_VALID,
	police_object_USER[24],
	police_object_OBJECT_ID
};
new POLICE_OBJECTS[MAX_POLICE_OBJECTS][enum_POLICE_OBJECTS];

enum enum_POLICE_GARAGE_DOORS
{
	police_gdoor_MODELID,
	Float:police_gdoor_CLOSED_X,
	Float:police_gdoor_CLOSED_Y,
	Float:police_gdoor_CLOSED_Z,
	Float:police_gdoor_CLOSED_RX,
	Float:police_gdoor_CLOSED_RY,
	Float:police_gdoor_CLOSED_RZ,
	Float:police_gdoor_OPENED_X,
	Float:police_gdoor_OPENED_Y,
	Float:police_gdoor_OPENED_Z,
	Float:police_gdoor_OPENED_RX,
	Float:police_gdoor_OPENED_RY,
	Float:police_gdoor_OPENED_RZ,
	Float:police_gdoor_MOVE_SPEED,
	bool:police_gdoor_CLOSING,
	police_gdoor_OBJECT_ID,
	police_gdoor_TIMER
};
new POLICE_GARAGE_DOORS[][enum_POLICE_GARAGE_DOORS] =
{
	{3055, 1588.48853, -1637.85852, 14.57500, 0.0, 0.0, 0.0, 1588.48853, -1637.85852, 16.45880, 90.0, 0.0, 0.0, 1.3, false, INVALID_STREAMER_ID, -1},
	{3055, 2294.04102, 2498.81396, 4.47113,   0.00000, 0.00000, 90.00000, 2294.0410, 2498.8140, 9.0059, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{3055, 2335.13086, 2443.66895, 6.97370,   0.00000, 0.00000, 60.00000, 2335.1309, 2443.6689, 11.6876, 0.0, 0.0, 60.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{10184, -1631.69556, 688.56641, 8.70960,   0.00000, 0.00000, 90.00000, -1631.6956, 688.5664, 13.2064, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1}
};

enum enum_POLICE_DOORS
{
	police_door_MODELID,
	Float:police_door_X,
	Float:police_door_Y,
	Float:police_door_Z,
	Float:police_door_RZ,
	police_door_INTERIOR,
	police_door_WORLD,
	bool:police_door_CLOSED,
	police_door_OBJECT_ID,
	police_door_TIMER
};
new POLICE_DOORS[][enum_POLICE_DOORS] =
{
	{1495, 245.62910, 72.53300, 1002.54999, 0.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 250.65849, 62.58540, 1002.54999, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 226.16409, 71.01760, 1003.95050, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1497, 222.14630, 70.52970, 1003.95050, -90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, -1619.70764, 688.41058, 6.17220, 180.00000, 0, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 239.58211, 116.84430, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 253.19209, 108.35700, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1497, 266.59210, 112.56570, 1003.60992, 180.0, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 228.27240, 150.46510, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 228.27240, 160.45010, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 232.21030, 169.83350, 1002.01813, 180.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 2294.03516, 2492.91528, 2.26740, 90.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1497, 221.95570, 181.21680, 1002.02142, 0.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{19302, 1881.9488500, -1728.0080600, 5216.9443400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1881.9488500, -1726.2583000, 5216.9443400, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1873.9609400, -1701.8895300, 5216.9233400, 180.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1870.5865500, -1701.8895300, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1869.0052500, -1706.7932100, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1865.9495800, -1710.0686000, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1865.9642300, -1716.4146700, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1872.3482700, -1716.4731400, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1870.5643300, -1714.6610100, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1870.7441400, -1718.0427200, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1870.8906300, -1725.5587200, 5216.9233400, 180.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1877.0349100, -1725.5587200, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1870.5822800, -1736.3883100, 5216.9233400, 180.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1874.6868900, -1734.9820600, 5216.9233400, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1874.6868900, -1727.2934600, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1869.6705300, -1741.3382600, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1866.2760000, -1738.0972900, 5216.9233400, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1872.3695100, -1700.4267600, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1866.2426800, -1731.6855500, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1866.2426800, -1728.4549600, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1866.2426800, -1725.2485400, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1863.0655500, -1736.5716600, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1853.5118400, -1719.1693100, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1850.3166500, -1754.2231400, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1863.7713600, -1754.2331500, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1864.6912800, -1742.8278800, 5216.9233400, 0.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	//{19302, 1867.3038300, -1751.7044700, 5216.9233400, 180.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1874.7647700, -1750.9698500, 5216.9233400, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19302, 1874.7647700, -1746.9626500, 5216.9233400, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1}
};

enum enum_JAIL_DOORS
{
	jail_door_MODELID,
	Float:jail_door_X,
	Float:jail_door_Y,
	Float:jail_door_Z,
	Float:jail_door_RZ,
	jail_door_INTERIOR,
	jail_door_WORLD,
	bool:jail_door_CLOSED,
	jail_door_OBJECT_ID,
	jail_door_TIMER
};
new JAIL_DOORS[][enum_JAIL_DOORS] =
{
	{19303, 1896.3712200, -1756.8221400, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1760.0351600, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1763.2403600, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1766.4504400, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1769.6499000, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1772.8501000, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1776.0500500, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1779.2530500, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1782.4561800, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1741.0606700, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1737.8496100, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1734.6408700, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1731.4304200, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1728.2275400, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1725.0201400, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1721.8118900, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1718.6042500, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1896.3712200, -1715.3877000, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1757.0009800, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1760.1987300, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1763.4057600, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1766.6284200, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1769.8177500, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8177500, -1773.0269800, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1776.2351100, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1779.4392100, 5219.2373000, 90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1740.8912400, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1737.6812700, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1734.4605700, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1731.2605000, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1728.0505400, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1724.8404500, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1721.6368400, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1},
	{19303, 1901.8182400, -1718.4254200, 5219.2373000, -90.0000000, 6, 0, true, INVALID_STREAMER_ID, -1}
};

enum enum_MAFIA_DOORS
{
	mafia_door_MODELID,
	Float:mafia_door_X,
	Float:mafia_door_Y,
	Float:mafia_door_Z,
	Float:mafia_door_RZ,
	mafia_door_INTERIOR,
	mafia_door_WORLD,
	bool:mafia_door_CLOSED,
	mafia_door_OBJECT_ID,
	mafia_door_TIMER
};
new MAFIA_DOORS[][enum_MAFIA_DOORS] =
{
	{19912, 659.0961, -1311.3387, 15.4062, -179.8999, 0, 0, true, INVALID_STREAMER_ID, -1},
	{19912, 655.2785, -1231.4831, 17.8062, -117.6996, 0, 0, true, INVALID_STREAMER_ID, -1},
	{19912, 787.4024, -1158.2618, 25.5062, -90.1996, 0, 0, true, INVALID_STREAMER_ID, -1},
	{19912, 2801.428222, -1603.694580, 12.685187, -18.600008, 0, 0, true, INVALID_STREAMER_ID, -1}
};

/* SYSTEM - PROPERTIES */
#define MAX_PROPERTIES 3333
enum Property_Info_Enum
{
	property_VALID,
	property_ID,
	Float:property_EXT_X,
	Float:property_EXT_Y,
	Float:property_EXT_Z,
	Float:property_EXT_ANGLE,
	property_EXT_INTERIOR,
	property_EXT_FREEZE,
	property_ID_INTERIOR,

	bool:property_SOLD,
	bool:property_CREW,
	property_OWNER_ID,
	property_CREW_ID,
	property_NAME[24],
	property_PRICE,
	property_LEVEL,
	property_EXTRA,
	property_VIP_LEVEL,

	Text3D:property_EXT_LABEL_ID,
	property_EXT_PICKUP_ID,
	property_INT_PICKUP_ID,

	property_PRICE_BASE
};
new PROPERTY_INFO[MAX_PROPERTIES][Property_Info_Enum];


/* PROPERTY CONSTRUCTOR */
new TOTAL_PROPERTIES_LOADED;
enum PROPERTY_INTERIOR_ENUM
{
	property_creator_LEVEL,
	property_creator_PRICE,
	Float:property_INT_X,
	Float:property_INT_Y,
	Float:property_INT_Z,
	Float:property_INT_ANGLE,
	property_INT_INTERIOR,
	bool:property_INT_FREEZE
};

// Interiores de casas
new PROPERTY_INTERIORS[][PROPERTY_INTERIOR_ENUM] =
{
	{6, 180000, 140.249008, 1366.197509, 1083.859375, 0.0, 5, false},
	{6, 160000, 2324.530029, -1149.540039, 1050.710083, 0.0, 12, false},
	{6, 270000, 225.679992, 1021.450012, 1084.017700, 0.0, 7, false},
	{6, 190000, 234.190002, 1063.729980, 1084.212280, 0.0, 6, false},
	{6, 120000, 226.300003, 1114.239990, 1080.992919, 270.0, 5, false},
	{6, 180000, 2317.889892, -1026.760009, 1050.217773, 0.0, 9, false},
	{6, 120000, 2495.979980, -1692.079956, 1014.742187, 180.0, 3, false},
	{6, 90000,  2196.626464, -1204.321411, 1049.023437, 90.0, 6, false},
	{6, 105000, 2270.143554, -1210.490600, 1047.562500, 90.0, 10, false},
	{4, 90000,  2365.199951, -1135.595825, 1050.882568, 0.0, 8, false},
	{3, 75000,  2237.590087, -1081.640014, 1049.023437, 0.0, 2, false},
	{4, 65000,  2468.840087, -1698.239990, 1013.507812, 90.0, 2, false},
	{3, 45000,  2282.928955, -1140.004516, 1050.898437, 0.0, 11, false},
	{4, 50000,  2308.775878, -1212.731689, 1049.023437, 0.0, 6, false},
	{6, 135000, 2233.681396, -1114.973510, 1050.882812, 0.0, 5, false},
	{6, 230000, 2218.162597, -1076.148315, 1050.484375, 90.0, 1, false},
	{6, 220000, 266.654327, 304.961791, 999.148437, 270.0, 2, false},
	{6, 30000,  243.720001, 304.910003, 999.148437, 270.0, 1, false},
	{6, 65000,  2259.440673, -1135.905883, 1050.640258, 270.0, 10, false},
	{12, 3000000, 1260.910034, -785.320068, 1091.906250, 280.0, 5, false}
};

enum PLAYER_PROPERTY_CONSTRUCTOR_ENU
{
	bool:player_property_creator_ENABLED,
	player_property_creator_INTERIO,
	Float:player_property_creator_EXT_X,
	Float:player_property_creator_EXT_Y,
	Float:player_property_creator_EXT_Z,
	Float:player_property_creator_EXT_ANG,
	player_property_creator_EXT_INT
};
new PLAYER_PROPERTY_CONSTRUCTOR[MAX_PLAYERS][PLAYER_PROPERTY_CONSTRUCTOR_ENU];

// Grua
new Float:CRANE_POINTS[][] =
{
	{1658.864013, -1038.086303, 23.625518, 92.747535}, 
	{1654.135131, -1037.792968, 23.625541, 92.747535}, 
	{1649.980468, -1037.617187, 23.625516, 92.747535}, 
	{1644.892456, -1037.193969, 23.625497, 92.747535}, 
	{1640.745361, -1037.967407, 23.625522, 92.747535}, 
	{1623.962646, -1009.688537, 23.625467, 92.747535}, 
	{1589.339843, -1054.775756, 23.633340, 92.747535}, 
	{1628.770507, -1094.266113, 23.637195, 92.747535}, 
	{1658.056762, -1093.479858, 23.633333, 92.747535}, 
	{1692.347412, -1086.318115, 23.633335, 92.747535}, 
	{1691.461669, -1060.534545, 23.641109, 92.747535}, 
	{1705.033203, -1069.053100, 23.633340, 92.747535}, 
	{1681.086914, -1042.888916, 23.631181, 92.747535}, 
	{1645.038940, -1046.957397, 23.625473, 92.747535}
};

// Barredor
/*new Float:CleanerRoutes[][] =
{
	{1457.757202, -1317.514892, 12.954147},
	{1781.341674, -1286.330810, 13.039505},
	{2023.429809, -1263.945068, 23.387474},
	{2073.475097, -1112.507812, 23.891704},
	{2096.326171, -1388.665771, 23.398132},
	{2002.480834, -1459.313720, 12.966531},
	{1592.126586, -1444.566162, 12.954238},
	{1273.405883, -1408.938354, 12.599562},
	{1191.637939, -1303.108642, 12.958889}
};*/

//Camioneros
new Float:LoadTrucksPoints[][] =
{
	{2430.781250, -2656.628662, 13.664062, 0.0},
	{2453.145751, -2568.576171, 13.656103, 0.0},
	{2453.460205, -2599.491943, 13.656026, 0.0},
	{2452.829101, -2627.258300, 13.663995 ,0.0}
};

enum TRUCK_VEHICLE_Info
{
	bool:truck_vehicle_LOADED,
	bool:truck_vehicle_LOADING,
	bool:truck_vehicle_UNLOADING,
	bool:truck_vehicle_DELIVERED,
	truck_vehicle_DRIVER_USER_ID,
	truck_vehicle_POINT,
};
new TRUCK_VEHICLE[MAX_VEHICLES][TRUCK_VEHICLE_Info];

enum Truck_Content_Info
{
	truck_content_EXP,
	truck_content_NAME[24],
	truck_content_MONEY,
	Float:truck_content_X,
	Float:truck_content_Y,
	Float:truck_content_Z
};
new Truck_Contents[][Truck_Content_Info] = //recos camionero
{
	{0, T_REC_0, 900, -105.355461,-1206.940185, 2.811225},
	{25, T_REC_1, 1000, -185.473693, -280.008880, 1.603357},
	{50, T_REC_2, 1250, 667.775512, -458.185913, 16.335937},
	{70, T_REC_3, 1450, 645.397155, -522.815002, 16.335937},
	{100, T_REC_4, 1600, 1355.020385, 243.499816, 19.566932},
	{150, T_REC_5, 1800, 2337.287109, -53.487117, 26.484375},
	{200, T_REC_6, 2000, 2327.318115, -21.905473, 26.484375},
	{300, T_REC_7, 2800, 2338.490966, 60.734577, 26.484375}
};

/* Basurero */

#define MAX_ROUTES  5
#define MAX_OBJECTS_PER_ROUTE 20

enum Trash_Object_Info
{
	bool:trash_route_VALID,
	trash_route_OBJECTS,
	Float:trash_route_DISTANCE,
	trash_route_MONEY,
	trash_object_MODELID[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_X[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Y[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Z[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RX[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RY[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RZ[MAX_OBJECTS_PER_ROUTE]
};
new TRASH_OBJECTS[MAX_ROUTES][Trash_Object_Info];
new TRASH_PLAYER_OBJECTS[MAX_PLAYERS][MAX_OBJECTS_PER_ROUTE];

enum TRASH_VEHICLES_INFO
{
	bool:trash_vehicle_JOB_STARTED,
	trash_vehicle_ROUTE,
	trash_vehicle_CP,
	trash_vehicle_DRIVER_ID,
	trash_vehicle_PASSENGER_ID
};
new TRASH_VEHICLES[MAX_VEHICLES][TRASH_VEHICLES_INFO];

/* SYSTEM - PLAYERTEMP */
enum
{
	PED_STOPPED,
	PED_WALKING,
	PED_RUNNING,
	PED_SPRINTING,
	PED_BYCICLING
};

new INVALID_WORDS[][100] =
{
	"zoor",
	"zo0r",
	"samphub",
	"chanpu",
	"champu",
	"fenixzone",
	"pene",
	"vagina",
	"mierda",
	"culo",
	"goldenstate",
	"unplayer",
	"spell",
	"ecuazone",
	"pelotudo",
	"boludo",
	"omegazone",
	"starrp",
	"fabiking",
	"kreisel",
	"sampfive",
	"pingote",
	"kanox",
	"lexerzone"
};

new INVALID_NAMES[][100] =
{
	"Capija",
	"Mierda",
	"Caverga",
	"Melano",
	"Apellido",
	"Nombre",
	"Pija",
	"Conazo",
	"Misco_Jonnes",
	"Portuano",
	"Chorizo",
	"Turbado",
	"Nanero",
	"Pene",
	"Vagina"
};

#define MAX_ADS_PER_PLAYER 4
enum
{
	PLAYER_SHOP_STATE_ALL,
	PLAYER_SHOP_STATE_AD,
	PLAYER_SHOP_STATE_MY_ADS
};

enum
{
	SHOP_ARTICLE_TYPE_PROPERTY,
	SHOP_ARTICLE_TYPE_VEHICLE,
	SHOP_ARTICLE_TYPE_OTHER
};

enum
{
	MECHANIC_OPTION_REPAIR,
	MECHANIC_OPTION_COLOR_1,
	MECHANIC_OPTION_COLOR_2,
	MECHANIC_OPTION_TUNING,
	MECHANIC_OPTION_PAINTJOB
};

//EnterExits
enum
{
	INTERIOR_NO_INFO,
	INTERIOR_BINCO,
	INTERIOR_SUBURBAN,
	INTERIOR_PROLAPS,
	INTERIOR_DIDIER_SACHS,
	INTERIOR_VICTIM,
	INTERIOR_ZIP,
	INTERIOR_247,
	INTERIOR_PIZZA,
	INTERIOR_CLUCKIN_BELL,
	INTERIOR_BURGER_SHOT,
	INTERIOR_BANK_LS,
	INTERIOR_BANK_SF,
	INTERIOR_BANK_LV,
	INTERIOR_CITY_HALL_LS,
	INTERIOR_UNITY_STATION,
	INTERIOR_TRUCK,
	INTERIOR_POLICE_LS,
	INTERIOR_POLICE_SF,
	INTERIOR_POLICE_LV,
	INTERIOR_ALHAMBRA,
	INTERIOR_POLICE_GARAGE,
	INTERIOR_HOSPITAL,
	INTERIOR_CLUB
};
enum Enter_Exits
{
	ee_ID,
	ee_NAME[32],
	
	ee_INTERIOR_TYPE,
	
	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,
	
	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,
	
	ee_TIME_OPEN,
	ee_TIME_CLOSE,
	
	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,
	
	
	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID	/* Son pickups para identificar el id */
};

new ENTER_EXIT[][Enter_Exits] = // EE = EnterExits
{
	// Tiendas de ropa
	{-1, "Binco", INTERIOR_BINCO, -1, false, 0, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2244.484863, -1665.223510, 15.476562, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 0, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2112.835205, -1211.456665, 23.962865, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 0, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 453.858032, -1478.098632, 30.813968, 111.110641, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 0, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 461.541320, -1500.892333, 31.049194, 98.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 0, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 1456.611816, -1137.818969, 23.961400, 215.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// 24/7
	{-1, "24/7", INTERIOR_247, -1, false, 0, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1352.314941, -1758.961425, 13.507812, 0.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 1, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1833.540771, -1842.542724, 13.578125, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 2, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1315.453247, -897.967102, 39.578125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 3, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1000.317199, -919.933349, 42.328125, 105.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// WSP
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 0, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2105.234619, -1806.479614, 13.554687, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 1, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 1366.856079, 248.451507, 19.566932, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 2, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2333.892333, 74.830787, 26.620975, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// CB
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 0, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2419.926025, -1509.024780, 24.000000, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 1, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2397.772949, -1898.847778, 13.546875, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 2, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 928.553466, -1352.848876, 13.343750, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// BS
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 0, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 810.715270, -1616.163330, 13.546875, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 1, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1199.272216, -918.372253, 43.121376, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// OTHER
	{-1, P_BANK, INTERIOR_CITY_HALL_LS, -1, true, 20, 20, 1807.021240, -1393.364135, 2770.660156, 177.306365, 37, false, 0, 0, 1571.468627, -1336.893188, 16.484375, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Sanitary Andreas", INTERIOR_UNITY_STATION, -1, false, 0, 3, 1494.416015, 1303.681884, 1093.289062, 0.0, -1, false, 0, 0, 1664.634033, -2185.537353, 13.546875, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_TRUCKS, INTERIOR_TRUCK, -1, true, 25, 18, 1297.457031, -61.437820, 1002.498046, 180.0, -1, false, 0, 0, 2509.533935, -2637.530761, 13.645265, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_SAPD, INTERIOR_POLICE_LS, -1, true, 0, 6, 1881.801635, -1688.519531, 5216.709960, 130.0, 30, false, 0, 0, 1555.400390, -1675.611694, 16.195312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_GARAGE, INTERIOR_POLICE_GARAGE, -1, true, 0, 6, 1881.341674, -1727.080688, 5216.709960, 270.594818, -1, false, 0, 0, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Alhambra Club", INTERIOR_ALHAMBRA, -1, false, 0, 17, 493.487731, -24.662528, 1000.679687, 0.0, 48, false, 0, 0, 1836.876586, -1682.407104, 13.329626, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tecno", INTERIOR_NO_INFO, -1, true, 1, 17, 1715.986572, -1254.442993, 471.174316, 269.257873, 42, false, 0, 0, 1738.542846, -1269.991577, 13.543532, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_CHURCH, INTERIOR_NO_INFO, -1, true, 2, 17, 387.479644, 2324.503906, 1889.583374, 88.438690, 38, false, 0, 0, 2233.164306, -1333.295043, 23.981561, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_D_BM, INTERIOR_NO_INFO, -1, true, 11, 17, 2319.062011, -1786.475708, 1600.751953, 90.0, 23, false, 0, 0, 2071.894287, -1551.255737, 13.424154, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_W_BM, INTERIOR_NO_INFO, -1, true, 21, 20, 2140.289062, -1172.987060, -10.893062, 350.0, 23, false, 0, 0, 2355.609375, -1039.150268, 54.148437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, P_W_BM, INTERIOR_NO_INFO, -1, true, 31, 21, 2140.289062, -1172.987060, -10.893062, 350.0, 23, false, 0, 0, 2494.093261, -1464.236328, 24.025127, 360.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Mina", INTERIOR_NO_INFO, -1, true, 36, 25, 1147.865356, 1001.796081, -99.214622, 273.832519, 11, false, 0, 0, 509.152374, -723.324951, 19.869243, 340.774505, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Sección B", INTERIOR_NO_INFO, -1, true, 37, 26, 1988.257446, 1204.595825, -63.139907, 268.650756, 56, false, 36, 25, 1270.046142, 1000.668884, -99.214637, 81.757308, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Sección C", INTERIOR_NO_INFO, -1, true, 38, 27, 2546.433105, 1924.534423, -58.649192, 265.830688, 56, false, 37, 26, 2067.543212, 1201.233398, -61.074184, 85.059127, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "TCC", INTERIOR_NO_INFO, -1, true, 0, 28, 3854.231933, -1265.252319, 7547.983398, 188.315292, 44, false, 0, 0, 2770.574462, -1628.717163, 12.177460, 358.490142, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Prostíbulo", INTERIOR_CLUB, -1, false, 0, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 693.761047, 1967.498168, 5.539062, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Prostíbulo", INTERIOR_CLUB, -1, false, 1, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 1145.013916,-1131.447998,23.828125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Prostíbulo", INTERIOR_CLUB, -1, false, 2, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 2421.501953,-1219.768432,25.527839, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, true, 2, 3, -204.522659, -1735.630004, 675.768737, 181.129348, 22, false, 0, 0, 1172.832763, -1323.269531, 15.400051, 270.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}
};

enum enum_JAIL_POSITIONS
{
	jail_INT,
	Float:jail_X,
	Float:jail_Y,
	Float:jail_Z,
	Float:jail_ANGLE,
	jail_INTERIOR
};
new JAIL_POSITIONS[][enum_JAIL_POSITIONS] =
{
	{INTERIOR_POLICE_LS, 1899.122192, -1757.699584, 5218.986816, 180.0, 6}, //jaills
	{INTERIOR_POLICE_SF, 1899.122192, -1757.699584, 5218.986816, 180.0, 6}, //jailsf
	{INTERIOR_POLICE_LV, 1899.122192, -1757.699584, 5218.986816, 180.0, 6} //jaillv
};

/*enum BUY_PROPERTIES_SITES_INFO
{
	site_INTERIOR_TYPE,
	Float:site_X,
	Float:site_Y,
	Float:site_Z,
	site_WORLD,
	site_INTERIOR
};
new BUY_PROPERTIES_SITES[][BUY_PROPERTIES_SITES_INFO] =
{
	{INTERIOR_BANK_LS, 1236.417968,-1428.489990,1992.564575, 5, 5},
	{INTERIOR_BANK_SF, 1236.417968,-1428.489990,1992.564575, 10, 10},
	{INTERIOR_BANK_LV, 1236.417968,-1428.489990,1992.564575, 15, 15}
};*/

enum
{
	PRODUCT_TYPE_NONE,
	PRODUCT_TYPE_FOOD,
	PRODUCT_TYPE_PHONE,
	PRODUCT_TYPE_GPS,
	PRODUCT_TYPE_MP3,
	PRODUCT_TYPE_PHONE_RESOLVER
};
enum Supermarket_Enum
{
	product_TYPE,
	product_NAME[24],
	product_PRICE,
	Float:product_HUNGRY,
	Float:product_THIRST,
	product_DRUNK
};
new Supermarket_Product_List[][Supermarket_Enum] =
{
	{PRODUCT_TYPE_PHONE, NAME_PHONE, 350, 0.0, 0.0, 0},
	{PRODUCT_TYPE_PHONE_RESOLVER, NAME_PHONE_R, 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_GPS, "GPS", 300, 0.0, 0.0, 0},
	//{PRODUCT_TYPE_MP3, "Reproductor MP3", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Botella de agua", 80, 0.0, 25.0, 0},
	{PRODUCT_TYPE_FOOD, "Sprunk", 40, 0.0, 12.0, 0},
	//{PRODUCT_TYPE_FOOD, "Lata de refresco cola", 30, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Barrita energética", 80, 15.0, 0.0, 0},
	//{PRODUCT_TYPE_FOOD, "Porción de pizza", 60, 20.0, 0.0, 0},
	//{PRODUCT_TYPE_FOOD, "Ensalada", 50, 15.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Leche", 70, 25.0, 25.0, 0},
	//{PRODUCT_TYPE_FOOD, "Sándwich de milanesa", 45, 10.0, 2.0, 0},
	//{PRODUCT_TYPE_FOOD, "Choripan", 45, 10.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Galletas", 20, 8.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Caramelos masticables", 1, 2.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Chicle bubbaloo", 3, 2.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Cerveza", 40, 0.0, 3.0, 1000},
	//{PRODUCT_TYPE_FOOD, "Vodka", 80, 0.0, 3.0, 2500},
	{PRODUCT_TYPE_FOOD, "Vino", 80, 0.0, 3.0, 2500}
	//{PRODUCT_TYPE_FOOD, "Orina de toro", 3000, 0.0, 40.0, 9500},
	//{PRODUCT_TYPE_FOOD, "Whisky", 200, 0.0, 3.0, 3000}
};

enum Clothing_Shop_Info
{
	clothing_shop_INTERIOR_TYPE,
	clothing_shop_NAME[24],
	Float:clothing_shop_X,
	Float:clothing_shop_Y,
	Float:clothing_shop_Z,
	Float:clothing_shop_ANGLE,
	clothing_shop_INTERIOR
};

new Clothing_Shop_Positions[][Clothing_Shop_Info] =
{
	{INTERIOR_BINCO, "Binco", 207.733657, -100.633468, 1005.257812, 180.0, 15}, //Binco
	{INTERIOR_SUBURBAN, "SubUrban", 203.905395, -43.450450, 1001.804687, 180.0, 1}, //SubUrban
	{INTERIOR_PROLAPS, "ProLaps", 207.049148, -129.177581, 1003.507812, 180.0, 3}, //prolaps
	{INTERIOR_DIDIER_SACHS, "Didier Sachs", 204.348281, -159.493728, 1000.523437, 180.0, 14}, //Didier
	{INTERIOR_VICTIM, "Victim", 206.374328, -7.241514, 1001.210937, 270.0, 5}, //Victim
	{INTERIOR_ZIP, "ZIP", 161.443634, -83.589271, 1001.804687, 180.0, 18} //Zip
};

enum Fast_Food_Info
{
	fast_food_INTERIOR_TYPE,
	fast_food_NAME[24],
	Float:fast_food_X,
	Float:fast_food_Y,
	Float:fast_food_Z,
	fast_food_INTERIOR
};
new Fast_Food_Positions[][Fast_Food_Info] =
{
	{INTERIOR_BURGER_SHOT, "Burger Shot", 375.913238, -67.435272, 1001.507812, 10}, // BurgerShot
	{INTERIOR_PIZZA, "Well Stacked Pizza", 375.254730, -118.804710, 1001.499511, 5}, //Pizza
	{INTERIOR_CLUCKIN_BELL, "Cluckin Bell", 368.757904, -6.018908, 1001.851562, 9} //Cluckin Bell
};

enum atm_bank_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ,
	atm_WORLD,
	atm_INTERIOR
};
new ATM_BANK[][atm_bank_info] =
{
	{19324, 1319.238037, 340.231872, 19.152904, 0.000000, 0.000000, 64.699989},
	{19324, 2303.583740, 3.406874, 26.091539, 0.000000, 0.000000, 270.000000},
	{19324, 712.046325, -543.663879, 15.945730, 0.000000, 0.000000, 90.000000},
	{19324, 173.195358, -173.908737, 1.173805, 0.000000, 0.000000, 90.000000},
	{19324, 2021.162963, -1406.334594, 16.806646, 0.000000, 0.000000, 90.000000},
	{19324, 1186.187988, -1368.703002, 13.187811, 0.000000, 0.000000, 90.000000},
	{19324, 547.349426, -1261.883544, 16.384935, 0.000000, 0.000000, -144.400115},
	{19324, 1539.197265, -1603.699584, 13.170522, 0.000000, 0.000000, 270.000000},
	{19324, 1607.591796, -2204.406982, 13.177502, 0.000000, 0.000000, 180.000000},
	{19324, 2228.404052, -1715.259399, 13.155408, 0.000000, 0.000000, 270.000000},
	{19324, 1810.780395, -1876.730834, 13.224149, 0.000000, 0.000000, 450.000000},
	{19324, 1022.552307, -937.373962, 41.803440, 0.000000, 0.000000, -81.899993},
	{19324, 1918.745605, -1765.868041, 13.180094, 0.000000, 0.000000, 180.000000},
	{19324, -2127.926269, -2444.903320, 30.236198, 0.000000, 0.000000, 50.900016},
	{19324, -1976.735229, 309.361358, 34.794040, 0.000000, 0.000000, 0.000000},
	{19324, -1642.021728, 1207.664794, 6.816609, 0.000000, 0.000000, 133.800003},
	{19324, -2235.729736, 2370.975097, 4.633686, 0.000000, 0.000000, 135.800003},
	{19324, -2625.825927, 631.261413, 14.101068, 0.000000, 0.000000, 0.000000},
	{19324, -778.213012, 1501.443237, 23.508373, 0.000000, 0.000000, 0.000000},
	{19324, -792.469787, 2744.103515, 45.508438, 0.000000, 0.000000, 0.000000},
	{19324, -266.641815, 2686.121337, 62.293029, 0.000000, 0.000000, 90.000000},
	{19324, -1436.010009, 2617.189697, 55.444923, 0.000000, 0.000000, 90.000000},
	{19324, -75.126441, 1126.046264, 19.346963, 0.000000, 0.000000, 90.000000},
	{19324, 1627.274047, 1814.493408, 10.467087, 0.000000, 0.000000, 180.000000},
	{19324, 1704.924560, 1852.382324, 10.464756, 0.000000, 0.000000, 180.000000},
	{19324, 456.807006, -1486.700683, 30.736743, 0.000000, 0.000000, -70.699996},
	{19324, 2184.752197, -1139.379882, 24.193698, 0.000000, 0.000000, 270.000000}
};

#define MAX_BANK_TRANSACTIONS_DIALOG 20
enum
{
	BANK_TRANSACTION_WITHDRAW,
	BANK_TRANSACTION_DEPOSIT,
	BANK_TRANSACTION_TRANSFER_SENT,
	BANK_TRANSACTION_TRANSFER_RECE,
	BANK_TRANSACTION_CREATE_ACCOUNT,
	BANK_TRANSACTION_BUY_PROPERTY,
	BANK_TRANSACTION_SOLD_PROPERTY,
	BANK_TRANSACTION_BUY_VEHICLE,
	BANK_TRANSACTION_SOLD_VEHICLE
};
enum Bank_Interior_Info
{
	bank_INTERIOR_TYPE,
	Float:bank_X,
	Float:bank_Y,
	Float:bank_Z,
	bank_WORLD,
	bank_INTERIOR
};
/*new Bank_Interior_Positions[][Bank_Interior_Info] =
{
	{INTERIOR_BANK_LS, 1239.006958,-1426.057983,1992.564575, 5, 5},
	{INTERIOR_BANK_SF, 1239.006958,-1426.057983,1992.564575, 10, 10},
	{INTERIOR_BANK_LV, 1239.006958,-1426.057983,1992.564575, 15, 15}
};*/

enum Food_Info
{
	food_NAME[24],
	food_PRICE,
	Float:food_HUNGRY,
	Float:food_THIRST,
};
new PIZZA_FOOD[][Food_Info] =
{
	{"Pizza de verduras", 25, 10.0, -0.1},
	{"Pizza de jamón y queso", 60, 16.0, -0.1},
	{"Pizza barbacoa", 40, 15.0, -0.1},
	{"Pizza 4 quesos", 55, 14.0, -0.1},
	{"Ensalada", 20, 10.0, 5.0},
	{"Sprunk", 30, 0.0, 12.0},
	{"Agua", 30, 0.0, 19.0}
};
new BURGER_SHOT_FOOD[][Food_Info] =
{
	{"Hamburguesa normal", 60, 16.0, -0.1},
	{"Hamburguesa con pollo", 80, 10.0, -0.1},
	{"Hamburguesa vegana", 80, 10.0, -0.1},
	{"Hamburguesa especial", 60, 12.0, -3.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Sprunk", 30, 0.0, 12.0},
	{"Agua", 30, 0.0, 19.0}
};
new CLUCKIN_BELL_FOOD[][Food_Info] =
{
	{"Alitas de pollo", 60, 16.0, -0.1},
	{"Papas fritas", 80, 18.0, -2.0},
	{"Pato asado", 80, 18.0, -2.0},
	{"Pollo al horno", 80, 18.0, -2.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Sprunk", 30, 0.0, 12.0},
	{"Agua", 30, 0.0, 19.0}
};

new Toys_Bones[][24] =
{
	{"Espalda"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Antebrazo derecho"},
	{"Hombro izquierdo"},
	{"Hombro derecho"},
	{"Cuello"},
	{"Boca"}
};

enum Toys_Info
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
}
new Toys_Shop[][Toys_Info] =
{
	{"motorcyclehelmet2", 18976, 2000, 0},
	{"motorcyclehelmet3", 18977, 500, 0},
	{"motorcyclehelmet4", 18978, 500, 0},
	{"motorcyclehelmet5", 18979, 500, 0},
	{"sillyhelmet2", 19114, 100, 0},
	{"sillyhelmet3", 19115, 200, 0},
	{"plainhelmet1", 19116, 75, 0},
	{"plainhelmet2", 19117, 75, 0},
	{"plainhelmet3", 19118, 75, 0},
	{"plainhelmet4", 19119, 75, 0},
	{"plainhelmet5", 19120, 75, 0},
	{"glassestype1", 19006, 2000, 0},
	{"glassestype2", 19007, 2000, 0},
	{"glassestype3", 19008, 2000, 0},
	{"glassestype4", 19009, 2000, 0},
	{"glassestype5", 19010, 2000, 0},
	{"glassestype6", 19011, 2000, 0},
	{"glassestype7", 19012, 2000, 0},
	{"glassestype8", 19013, 2000, 0},
	{"glassestype9", 19014, 2000, 0},
	{"glassestype10", 19015, 2000, 0},
	{"glassestype11", 19016, 2000, 0},
	{"glassestype12", 19017, 2000, 0},
	{"glassestype13", 19018, 2000, 0},
	{"glassestype14", 19019, 2000, 0},
	{"glassestype15", 19020, 2000, 0},
	{"glassestype16", 19021, 2000, 0},
	{"glassestype17", 19022, 2000, 0},
	{"glassestype18", 19023, 2000, 0},
	{"glassestype19", 19024, 2000, 0},
	{"glassestype20", 19025, 2000, 0},
	{"glassestype21", 19026, 2000, 0},
	{"glassestype22", 19027, 2000, 0},
	{"glassestype23", 19028, 2000, 0},
	{"glassestype24", 19029, 2000, 0},
	{"glassestype25", 19030, 2000, 0},
	{"glassestype26", 19031, 2000, 0},
	{"glassestype27", 19032, 2000, 0},
	{"glassestype28", 19033, 2000, 0},
	{"glassestype29", 19034, 2000, 0},
	{"glassestype30", 19035, 2000, 0},
	{"policeglasses1", 19138, 2300, 0},
	{"policeglasses2", 19139, 2300, 0},
	{"policeglasses3", 19140, 2300, 0},
	{"crewna1", 18891, 600, 0},
	{"crewna2", 18892, 600, 0},
	{"crewna3", 18893, 600, 0},
	{"crewna4", 18894, 600, 0},
	{"crewna5", 18895, 600, 0},
	{"crewna6", 18896, 600, 0},
	{"crewna7", 18897, 600, 0},
	{"crewna8", 18898, 600, 0},
	{"crewna9", 18899, 600, 0},
	{"crewna10", 18900, 600, 0},
	{"crewna11", 18901, 600, 0},
	{"crewna12", 18902, 600, 0},
	{"crewna13", 18903, 600, 0},
	{"crewna14", 18904, 600, 0},
	{"crewna15", 18905, 600, 0},
	{"crewna16", 18906, 600, 0},
	{"crewna17", 18907, 600, 0},
	{"crewna18", 18908, 600, 0},
	{"crewna19", 18909, 600, 0},
	{"crewna20", 18910, 600, 0},
	{"mask1", 18911, 500, 0},
	{"mask2", 18912, 500, 0},
	{"mask3", 18913, 500, 0},
	{"mask4", 18914, 500, 0},
	{"mask5", 18915, 500, 0},
	{"mask6", 18916, 500, 0},
	{"mask7", 18917, 500, 0},
	{"mask8", 18918, 500, 0},
	{"mask9", 18919, 500, 0},
	{"mask10", 18920, 500, 0},
	{"watchtype1", 19039, 3000, 0},
	{"watchtype2", 19040, 3000, 0},
	{"watchtype3", 19041, 3000, 0},
	{"watchtype4", 19042, 3000, 0},
	{"watchtype5", 19043, 3000, 0},
	{"watchtype6", 19044, 3000, 0},
	{"watchtype7", 19045, 3000, 0},
	{"watchtype8", 19046, 3000, 0},
	{"watchtype9", 19047, 3000, 0},
	{"watchtype10", 19048, 3000, 0},
	{"watchtype11", 19049, 3000, 0},
	{"watchtype12", 19050, 3000, 0},
	{"watchtype13", 19051, 3000, 0},
	{"watchtype14", 19052, 3000, 0},
	{"watchtype15", 19053, 3000, 0},
	{"beret1", 18921, 1150, 0},
	{"beret2", 18922, 1150, 0},
	{"beret3", 18923, 1150, 0},
	{"beret4", 18924, 1150, 0},
	{"beret5", 18925, 1150, 0},
	{"cj_tommy_hat", 2052, 200, 0},
	{"cj_jerry_hat", 2053, 200, 0},
	{"cj_capy_hat", 2054, 2000, 0},
	{"hardhat1", 18638, 300, 0},
	{"hardhat2", 19093, 450, 0},
	{"hardhat3", 19160, 450, 0},
	{"blackhat1", 18639, 600, 0},
	{"hat1", 18926, 650, 0},
	{"hat2", 18927, 650, 0},
	{"hat3", 18928, 650, 0},
	{"hat4", 18929, 650, 0},
	{"hat5", 18930, 650, 0},
	{"hat6", 18931, 650, 0},
	{"hat7", 18932, 650, 0},
	{"hat8", 18933, 650, 0},
	{"hat9", 18934, 650, 0},
	{"hat10", 18935, 650, 0},
	{"hatboater1", 18944, 800, 0},
	{"hatboater2", 18945, 800, 0},
	{"hatboater3", 18946, 800, 0},
	{"hatbowler1", 18947, 1200, 0},
	{"hatbowler2", 18948, 1200, 0},
	{"hatbowler3", 18949, 1200, 0},
	{"hatbowler4", 18950, 1200, 0},
	{"hatbowler5", 18951, 1200, 0},
	{"hatbowler6", 19488, 1200, 0},
	{"cowboyhat1", 19095, 1150, 0},
	{"cowboyhat2", 18962, 1150, 0},
	{"cowboyhat3", 19096, 1150, 0},
	{"cowboyhat4", 19097, 1150, 0},
	{"cowboyhat5", 19098, 1150, 0},
	{"hatman1", 18967, 650, 0},
	{"hatman2", 18968, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hattiger1", 18970, 1500, 0},
	{"hatcool1", 18971, 1500, 0},
	{"hatcool2", 18972, 1500, 0},
	{"hatcool3", 18973, 1500, 0},
	{"santahat1", 19064, 100, 0},
	{"santahat2", 19065, 100, 0},
	{"santahat3", 19066, 100, 0},
	{"hoodyhat1", 19067, 500, 0},
	{"hoodyhat2", 19068, 500, 0},
	{"hoodyhat3", 19069, 500, 0},
	{"policehat1", 19161, 2500, 0},
	{"policehat2", 19162, 2500, 0},
	{"tophat01", 19352, 700, 0},
	{"tophat02", 19487, 700, 0},
	{"pilothat01", 19520, 3000, 0},
	{"policehat01", 19521, 3000, 0},
	{"witcheshat1", 19528, 150, 0},
	{"strawhat1", 19553, 450, 0},
	{"pizzahat1", 19558, 100, 0},
	{"hikerbackpack1", 19559, 600, 0},
	{"hair1", 19517, 1000, 0},
    {"hair2", 19516, 1000, 0},
    {"hair3", 19077, 1000, 0},
    {"hair4", 18975, 1000, 0},
    {"cluckinbellhat", 19137, 2500, 0},
    {"firehat01", 19330, 3000, 0},
    {"firehat02", 19331, 3000, 0},
    {"burgershothat1", 19094, 2000, 0},
    {"captruker1", 18961, 1000, 0},
    {"bassguitar01", 19317, 2100, 0},
    {"bassguitar02", 19318, 2100, 0},
    {"boxinghelmet01", 18952, 1500, 0},
    {"hockeymas1", 19036, 1700, 0},
    {"theparrot1", 19078, 7500, 0},
    {"armour", 19515, 7000, 0},
    {"bdupsmask1", 11704, 3500, 0},
    {"glimpmask1", 19163, 2500, 0},
    {"headphones02", 19422, 1500, 0},
    {"Disfraz de Arbusto", 805, 40000, 0},
    {"Disfraz de Caja", 1271, 40000, 0},
    {"Disfraz de Correo", 1291, 40000, 0},
    {"Disfraz de Basura", 1328, 40000, 0},
    {"Hamburguesita en hd", 2703, 6000, 0},
    {"parachute", 371, 2200, 0}
};

new 
Binco_Shop_Male_Skins[][] =
{
	/* BINCO - HOMBRE */
	{4, 75      , 0},
	{5, 75      , 0},
	{6, 90      , 0},
	{7, 80      , 0},
	{21, 121    , 0},
	{44, 65     , 0},
	{47, 119    , 0},
	{101, 149   , 0},
	{127, 89    , 0},
	{128, 25    , 0},
	{134, 25    , 0},
	{135, 25    , 0},
	{137, 19    , 0},
	{160, 55    , 0},
	{161, 68    , 0},
	{168, 39    , 0},
	{176, 79    , 0},
	{177, 65    , 0},
	{179, 110   , 0},
	{184, 150   , 0},
	{188, 160   , 0},
	{200, 15    , 0},
	{212, 30    , 0},
	{230, 10    , 0},
	{258, 69    , 0},
	{259, 69    , 0},
	{262, 50  , 0},
	{86, 70        , 0},
	{102, 100 , 0},
	{103, 100 , 0},
	{104, 100 , 0},
	{105, 100 , 0},
	{106, 100 , 0},
	{107, 100 , 0},
	{108, 100 , 0},
	{109, 100 , 0},
	{110, 100 , 0},
	{111, 100 , 0},
	{112, 100 , 0},
	{113, 100 , 0},
	{114, 100 , 0},
	{115, 100 , 0},
	{116, 100 , 0},
	{117, 100 , 0},
	{118, 100 , 0},
	{119, 100 , 0},
	{120, 100 , 0},
	{121, 100 , 0},
	{122, 100 , 0},
	{123, 100 , 0},
	{124, 100 , 0},
	{125, 100 , 0},
	{126, 100 , 0}
},

Binco_Shop_Female_Skins[][] =
{
	/* BINCO - MUJER */
	{13, 120   , 0},
	{41, 59    , 0},
	{56, 190   , 0},
	{65, 110   , 0},
	{69, 100   , 0},
	{75, 50    , 0},
	{89, 69    , 0},
	{151, 89   , 0},
	{152, 3000 , 0},
	{207, 500  , 0},
	{226, 120  , 0},
	{298, 900  , 0}
},

Suburban_Shop_Male_Skins[][] =
{
	/* SUBURBAN - HOMBRE */
	{2, 100   , 0},
	{3, 140   , 0},
	{20, 190  , 0},
	{43, 180  , 0},
	{48, 145  , 0},
	{60, 250  , 0},
	{100, 300 , 0},
	{112, 200 , 0},
	{119, 49  , 0},
	{143, 199 , 0},
	{180, 150 , 0},
	{183, 100 , 0},
	{184, 140 , 0},
	{241, 200 , 0},
	{242, 190 , 0},
	{247, 450 , 0},
	{248, 499 , 0},
	{249, 650 , 0},
	{264, 5   , 0}
},

Suburban_Shop_Female_Skins[][] =
{
	/* SUBURBAN - MUJER */
	{39, 109  , 0},
	{56, 100  , 0},
	{88, 140  , 0},
	{131, 200 , 0},
	{195, 199 , 0}
},

Prolaps_Shop_Male_Skins[][] =
{
	/* PROLAPS - HOMBRE */
	{29, 129  , 0},
	{36, 140  , 0},
	{37, 150  , 0},
	{51, 160  , 0},
	{293, 170  , 0},
	{52, 170  , 0},
	{96, 200  , 0},
	{99, 700  , 0},
	{206, 499 , 0},
	{154, 199 , 0}
},

Prolaps_Shop_Female_Skins[][] =
{
	/* PROLAPS - MUJER */
	{41, 199 , 0},
	{90, 250 , 0},
	{92, 860 , 0},
	{138, 150, 0},
	{139, 150, 0},
	{140, 159, 0},
	{190, 150, 0},
	{192, 180, 0},
	{193, 195, 0}
},

Didier_Shop_Male_Skins[][] =
{
	/* DIDIER - HOMBRE */
	{17, 1500  , 0},
	{46, 1900  , 0},
	{57, 1220  , 0},
	{82, 3400  , 0},
	{83, 3400  , 0},
	{84, 3400  , 0},
	{124, 3500 , 0},
	{147, 6000 , 0},
	{163, 3000 , 0},
	{166, 3000 , 0},
	{171, 4000 , 0},
	{187, 4500 , 0},
	{223, 3100 , 0},
	{240, 1500 , 0},
	{295, 3000 , 0}
},

Didier_Shop_Female_Skins[][] =
{
	/* DIDIER - MUJER */
	{11, 1500  , 0},
	{12, 3000  , 0},
	{40, 2500  , 0},
	{91, 8000  , 0},
	{141, 3500 , 0},
	{169, 4000 , 0},
	{172, 2100 , 0},
	{194, 2000 , 0},
	{214, 25000, 0},
	{215, 3200 , 0},
	{216, 10500, 0},
	{219, 9500 , 0}
},

Victim_Shop_Male_Skins[][] =
{
	/* VICTIM - HOMBRE */
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 900   , 0},
	{72, 599   , 0},
	{73, 699   , 0},
	{98, 339   , 0},
	{121, 200  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{250, 50000, 0},
	{289, 699  , 0},
	{299, 700  , 0},
	{303, 500  , 0},
	{304, 700  , 0}
},

Victim_Shop_Female_Skins[][] =
{
	/* VICTIM - MUJER */
	{12, 2900  , 0},
	{40, 3000  , 0},
	{55, 1010  , 0},
	{56, 400   , 0},
	{192, 3000 , 0},
	{211, 3500 , 0},
	{226, 600  , 0},
	{233, 900  , 0}
},

Zip_Shop_Male_Skins[][] =
{
	/* ZIP - HOMBRE */
	{121, 190  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 905   , 0},
	{72, 400   , 0},
	{73, 650   , 0},
	{98, 320   , 0},
	{250, 49999, 0},
	{289, 622  , 0},
	{299, 730  , 0},
	{303, 550  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{304, 700  , 0}
},

Zip_Shop_Female_Skins[][] =
{
	/* ZIP - MUJER */
	{56, 405    , 0},
	{192, 3010  , 0},
	{211, 3520  , 0},
	{226, 620   , 0},
	{233, 950   , 0},
	{12, 2904   , 0},
	{40, 3002   , 0},
	{55, 1011   , 0}
};

enum
{
	PICKUP_TYPE_NONE,
	PICKUP_TYPE_ENTER_EXIT,
	PICKUP_TYPE_ATM,
	PICKUP_TYPE_PROPERTY
};

enum radio_enum
{
	r_NAME[64],
	r_TYPE[64],
	r_URL[264]
};
new RADIO_STATIONS[][radio_enum] =
{
	{"Loca FM", "Reggeton", "http://audio-online.net:2300/live"},
	{"Gozadera", "Variadas", "https://sonic.globalstream.pro:10961/1"},
	{"Rock FM", "Rock", "https://flucast-m01-01.flumotion.com/cope/rockfm.mp3"},
	{"UniversalRap", "HipHop", "http://streaming5.elitecomunicacion.es:8244/stream"},
	{"Soma FM", "Techno", "http://somafm.com/tags.pls"},
	{"Dubatek", "Drum'N'Bass", "http://web.zionsound.fr:8010/stream/1/"},
	{"Country NY", "Country", "https://streaming.radiostreamlive.com/radiocountrylive_devices"},
	{"Hyaxe Radio (En construcción)", "Variadas", "http://radio.hyaxe.com/stream.pls"}
};

new Intro_Music[][] =
{
	"https://cdn.discordapp.com/attachments/579738771075891221/725410296734416966/intro0.mp3",
	"https://cdn.discordapp.com/attachments/579738771075891221/725410346239524884/intro3.mp3",
	"https://cdn.discordapp.com/attachments/579738771075891221/725410357035794512/intro1.mp3",
	"https://cdn.discordapp.com/attachments/579738771075891221/725410384646897755/intro2.mp3"
};

new Float:Fuel_Stations[][] =
{
	{1942.679443, -1771.374511, 13.390598},
	{654.678710, -570.627807, 16.335937},
	{1384.011962, 457.825012, 19.995258},
	{-1669.027221, 411.541076, 7.179687},
	{-2409.644042, 976.147644, 45.307708},
	{-1328.633666, 2675.913818, 50.062500},
	{612.890563, 1692.938720, 6.992187},
	{-1607.715820, -2717.499023, 48.539062},
	{2146.831542, 2743.855224, 10.820312},
	{2197.993408, 2475.015625, 10.820312},
	{2115.124267, 926.094909, 10.960937},
	{1595.974731, 2193.016845, 10.820312},
	{-1477.559326, 1858.962524, 32.639846}
};

new Float:Hp_Spawn_Interior_Pos[][] =
{
	{-201.967666,-1791.546630,675.785949,356.824615},
	{-201.944671,-1788.838867,675.785949,355.571289},
	{-207.176589,-1791.538818,675.785949,358.414764},
	{-207.400466,-1788.838867,675.785949,357.474700},
	{-211.549102,-1791.553588,675.785949,359.064758},
	{-211.472366,-1788.838867,675.785949,354.678070},
	{-211.854370,-1776.783935,675.786926,85.232192},
	{-209.154373,-1776.755981,675.786926,86.822257},
	{-209.161682,-1771.806030,675.786926,86.822265},
	{-211.861679,-1771.882324,675.786926,84.942245},
	{-209.161254,-1766.937133,675.785949,90.919052},
	{-211.853134,-1767.000244,675.785949,88.412361}
};

new Float:Hospital_Spawn_Positions[][] =
{
	{1172.832763, -1323.269531, 15.400051, 270.0}
};

#define MAX_PLAYER_MAP_GPS_POINTS 20

/*enum
{
	ACCOUNT_STATE_NORMAL,
	ACCOUNT_STATE_BANNED,
	ACCOUNT_STATE_TEMPBAN
};*/

#define MIN_PASS_LENGTH  6
#define MAX_PASS_LENGTH  18

enum Bank_Account_Enum
{
	bank_account_ID,
	bank_account_BALANCE
};
new BANK_ACCOUNT[MAX_PLAYERS][Bank_Account_Enum]; //BA (BankAccount)


#define MAX_PLAYER_POCKET_OBJECTS 10
enum Player_Pocket_Enum
{
	bool:player_pocket_VALID,
	player_pocket_object_ID,
	player_pocket_object_NAME[24],
	Float:player_pocket_object_HUNGRY,
	Float:player_pocket_object_THIRST,
	player_pocket_object_DRUNK
};
new PLAYER_POCKET[MAX_PLAYERS][MAX_PLAYER_POCKET_OBJECTS][Player_Pocket_Enum]; // PP (PlayerPocket)


new
	DIALOG_FOOD_PIZZA_String[800],
	DIALOG_FOOD_CLUCKIN_String[800],
	DIALOG_FOOD_BURGER_String[800],
	DIALOG_247_LIST_String[34 + 55 * sizeof Supermarket_Product_List],
	DIALOG_ANIMS_String[1000],
	DIALOG_PLAYER_GPS_SITE_0_String[90 * (sizeof(Hospital_Spawn_Positions) + 1)],
	DIALOG_PLAYER_GPS_SITE_7_String[90 * (sizeof(SELL_VEHICLES_SHOPS_SPAWN) + 1)],
	DIALOG_CREATE_CREW_COLOR_String[4200];


#define HidePlayerDialog(%1)       ShowPlayerDialog(%1, COLOR_WHITE, 0, " ", " ", " ", " ")

//armas mercado negro
enum enum_BLACK_MARKT_WEAPONS
{
	black_market_WEAPON_ID,
	black_market_WEAPON_PRICE_BASE,
	black_market_WEAPON_PRICE
};
new BLACK_MARKT_WEAPONS[][enum_BLACK_MARKT_WEAPONS] =
{
	{41, 300, 0}, // Spray
	//{5, 250, 0}, Bate
	{22, 2500, 0}, // 9MM
	{28, 3500, 0}, // Micro UZI
	{32, 3600, 0}, // Tec 9
	{26, 4500, 0}, // recortada
	{33, 5200, 0} // Rifle
};

enum
{
	TYPE_WARNING,
	TYPE_KICK,
	TYPE_BAN,
	TYPE_TEMP_BAN
};

enum
{
	CMD_USER,
	CMD_HELPER,
	CMD_MODERATOR,
	CMD_SUPER_MODERATOR,
	CMD_GAME_OPERATOR,
	CMD_ADMIN,
	CMD_EXR,
	CMD_COFUNDER,
	CMD_DEVELOPER,
};
new ADMIN_LEVELS[][] = //aca quede
{
	"Jugador",
	"Ayudante",
	"Moderador I",
	"Moderador II",
	"Moderador III",
	"Administrador I",
	"Administrador II",
	"Game Operator",
	"Administrador IIII"
};

CALLBACK: DisablePlayerPoliceSearchLevel(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][43]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
	   	if (IsPlayerConnected(i))
	    {
	    	if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
	    	{
	    		new
	    			Float:police_pos[3],
	    			Float:player_pos[3]
	    		;

	    		GetPlayerPos(i, police_pos[0], police_pos[1], police_pos[2]);
	    		GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

				new Float:distance = GetDistanceBetweenPoints3D(police_pos[0], police_pos[1], police_pos[2], player_pos[0], player_pos[1], player_pos[2]);
				if (distance >= 200.0) 
				{
					PLAYER_TEMP[playerid][py_TIMERS][43] = SetTimerEx("DisablePlayerPoliceSearchLevel", 300000 * PLAYER_MISC[playerid][MISC_SEARCH_LEVEL], false, "i", playerid);
					return 0;
				}
			}
		}
	}

	SetPlayerPoliceSearchLevel(playerid, 0);
	SetPlayerWantedLevel(playerid, 0);
	SendPoliceMark(playerid, PLAYER_COLOR);
	PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] = 0;
	SavePlayerMisc(playerid);

	new str_text[164],
		city[45],
		zone[45];

    GetPlayerZones(playerid, city, zone);
	format(str_text, sizeof(str_text), "%s se fugo (~r~%s~w~).", PLAYER_TEMP[playerid][py_NAME], zone);
	SendPoliceNotification(str_text, 4);
	return 1;
}

IRPC:VehicleDestroyed(playerid, BitStream:bs)
{
    new vehicleid;

    BS_ReadUint16(bs, vehicleid);

    if (GetVehicleModel(vehicleid) < 400)
    {
        return 0;
    }

    return OnVehicleRequestDeath(vehicleid, playerid);
}

forward OnVehicleRequestDeath(vehicleid, killerid);
public OnVehicleRequestDeath(vehicleid, killerid)
{
	printf("OnVehicleRequestDeath %d %d",vehicleid, killerid); // debug juju
    new Float:health;

    GetVehicleHealth(vehicleid, health);

    if (health >= 250.0)
    {
        return 0;
    }
    return 1;
}

IPacket:UNOCCUPIED_SYNC(playerid, BitStream:bs)
{
    new unoccupiedData[PR_UnoccupiedSync];
 
    BS_IgnoreBits(bs, 8);
    BS_ReadUnoccupiedSync(bs, unoccupiedData);
 
    if ((unoccupiedData[PR_roll][0] == unoccupiedData[PR_direction][0]) &&
        (unoccupiedData[PR_roll][1] == unoccupiedData[PR_direction][1]) &&
        (unoccupiedData[PR_roll][2] == unoccupiedData[PR_direction][2])
    )
    {
    	new str[145];
        format(str, 145, "[ANTI-CHEAT] Aviso sobre %s (%d): Vehicle enter crasher", ACCOUNT_INFO[playerid][ac_NAME], playerid);
    	SendMessageToAdminsAC(COLOR_ANTICHEAT, str);
    	SendDiscordWebhook(str, 1);
        return 0;
    }

    if ((floatabs(unoccupiedData[PR_roll][0]) > 1.0) ||
        (floatabs(unoccupiedData[PR_roll][1]) > 1.0) ||
        (floatabs(unoccupiedData[PR_roll][2]) > 1.0) ||
        (floatabs(unoccupiedData[PR_direction][0]) > 1.0) ||
        (floatabs(unoccupiedData[PR_direction][1]) > 1.0) ||
        (floatabs(unoccupiedData[PR_direction][2]) > 1.0) ||
        (floatabs(unoccupiedData[PR_position][0]) > 20000.0) ||
        (floatabs(unoccupiedData[PR_position][1]) > 20000.0) ||
        (floatabs(unoccupiedData[PR_position][2]) > 20000.0) ||
        (floatabs(unoccupiedData[PR_angularVelocity][0]) > 1.0) ||
        (floatabs(unoccupiedData[PR_angularVelocity][1]) > 1.0) ||
        (floatabs(unoccupiedData[PR_angularVelocity][2]) > 1.0) ||
        (floatabs(unoccupiedData[PR_velocity][0]) > 100.0) ||
        (floatabs(unoccupiedData[PR_velocity][1]) > 100.0) ||
        (floatabs(unoccupiedData[PR_velocity][2]) > 100.0)
    )
    {
    	new str[145];
        format(str, 145, "[ANTI-CHEAT] Aviso sobre %s (%d): Unoccupied crasher", ACCOUNT_INFO[playerid][ac_NAME], playerid);
    	SendMessageToAdminsAC(COLOR_ANTICHEAT, str);
    	SendDiscordWebhook(str, 1);
        return 0;
    }

    return 1;
}

IPacket:VEHICLE_SYNC(playerid, BitStream:bs)
{
    new inCarData[PR_InCarSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadInCarSync(bs, inCarData);

    if (PLAYER_TEMP[playerid][py_KICKED]) return 0;

   	if (IsPlayerInAnyVehicle(playerid) && PLAYER_TEMP[playerid][py_VEHICLEID] != inCarData[PR_vehicleId])
	{
		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= 2) return 1;
		
		new string[128];
		format(string, sizeof(string), "[ANTI-CHEAT] Kick sobre %s (%d): Car-Stealer", ACCOUNT_INFO[playerid][ac_NAME], playerid);
		SendMessageToAdminsAC(COLOR_ANTICHEAT, string);
		SendDiscordWebhook(string, 1);

		Kick(playerid);
		return 0;
	}
    return 1;
}

IPacket:AIM_SYNC(playerid, BitStream:bs)
{
    new aimData[PR_AimSync];
    
    BS_IgnoreBits(bs, 8);
    BS_ReadAimSync(bs, aimData);

    if (aimData[PR_aimZ] != aimData[PR_aimZ])
    {
    	new str[145];
        format(str, 145, "[ANTI-CHEAT] Aviso sobre %s (%d): AimZ invisible", ACCOUNT_INFO[playerid][ac_NAME], playerid);
    	SendMessageToAdminsAC(COLOR_ANTICHEAT, str);
    	SendDiscordWebhook(str, 1);
        return 0;
    }

    return 1;
}

public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
    if (packetid == PLAYER_SYNC)
    {
        new onFootData[PR_OnFootSync];

        BS_IgnoreBits(bs, 8);
        BS_ReadOnFootSync(bs, onFootData);

        if (onFootData[PR_surfingVehicleId] != 0 && onFootData[PR_surfingVehicleId] != INVALID_VEHICLE_ID)
        {
            if ((floatabs(onFootData[PR_surfingOffsets][0]) >= 50.0) ||
                (floatabs(onFootData[PR_surfingOffsets][1]) >= 50.0) ||
                (floatabs(onFootData[PR_surfingOffsets][2]) >= 50.0)
            )
            {
                return 0;
            } 
        }

        /*Fly*/
        switch(onFootData[PR_animationId])
        {
			case 157, 159, 161:
	        {
	            if (!IsPlayerInAnyVehicle(playerid))
	            {
					KickEx(playerid, 500);
					return 0;
	            }
	        }
	        case 958, 959:
	        {
	        	if (onFootData[PR_weaponId] != WEAPON_PARACHUTE)
				{
					KickEx(playerid, 500);
					return 0;
				}
	        }
	        /*case 1538, 1539, 1543:
	        {
	        	if (onFootData[PR_position][2] > 1.0)
				{
					KickEx(playerid, 500);
					return 0;
				}
	        }*/
	    }
    }

    return 1;
}

public OnOutcomingRPC(playerid, rpcid, BitStream:bs)
{
	if (rpcid == 155)
	{
		new 
			ping,
			BitStream:bs_two = BS_New()
		;

		if (!IsPlayerConnected(playerid)) return 0;
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    	{
	    	if (IsPlayerConnected(i))
	    	{
	    		if (B1G_PLAYER[i][FAKE_PING] == true) ping = B1G_PLAYER[i][PING];
				else
				{
					ping = GetPlayerPing(i);
				}

				BS_WriteValue(
					bs_two,
					PR_UINT16, i,
					PR_INT32, GetPlayerScore(i),
					PR_UINT32, ping
				);

	    		BS_RPC(bs_two, playerid, rpcid);
	    	}
	    }

		BS_Delete(bs_two);
		return 0;
	}
	return 1;
}

SetPlayerFakePing(playerid, ping)
{
	if (!IsPlayerConnected(playerid)) return 0;

	if (ping == -1) return B1G_PLAYER[playerid][FAKE_PING] = false;

	B1G_PLAYER[playerid][FAKE_PING] = true;
	B1G_PLAYER[playerid][PING] = ping;
	return 1;
}

ClearPlayerChatBox(playerid, ammount = 20)
{
	for(new i = 0; i != ammount; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

ReturnKeyHex(type)
{
	new key = 0x5A;
	switch(type)
	{
		case 0: key = 0x5A;
		case 1: key = 0x58;
		case 2: key = 0x42;
		case 3: key = 0x4D;
		case 4: key = 0x4C;
		case 5: key = 0x4B;
		case 6: key = 0x4A;
		case 7: key = 0x50;
		case 8: key = 0x4F;
		case 9: key = 0x49;
		case 10: key = 0x55;
	}
	return key;
}

ReturnKeyName(key)
{
	new name[4] = "Z";
	switch(key)
	{
		case 0: name = "Z";
		case 1: name = "X";
		case 2: name = "B";
		case 3: name = "M";
		case 4: name = "L";
		case 5: name = "K";
		case 6: name = "J";
		case 7: name = "P";
		case 8: name = "O";
		case 9: name = "I";
		case 10: name = "U";
	}
	return name;
}

ReturnTimelapse(start, till)
{
    new ret[32];
	new seconds = till - start;

	const
		MINUTE = 60,
		HOUR = 60 * MINUTE,
		DAY = 24 * HOUR,
		MONTH = 30 * DAY;

	if (seconds == 1)
		format(ret, sizeof(ret), "hace un segundo");
	if (seconds < (1 * MINUTE))
		format(ret, sizeof(ret), "hace %i segundos", seconds);
	else if (seconds < (2 * MINUTE))
		format(ret, sizeof(ret), "hace un minuto");
	else if (seconds < (45 * MINUTE))
		format(ret, sizeof(ret), "hace %i minutos", (seconds / MINUTE));
	else if (seconds < (90 * MINUTE))
		format(ret, sizeof(ret), "hace una hora");
	else if (seconds < (24 * HOUR))
		format(ret, sizeof(ret), "hace %i horas", (seconds / HOUR));
	else if (seconds < (48 * HOUR))
		format(ret, sizeof(ret), "hace un día");
	else if (seconds < (30 * DAY))
		format(ret, sizeof(ret), "hace %i días", (seconds / DAY));
	else if (seconds < (12 * MONTH))
    {
		new months = floatround(seconds / DAY / 30);
      	if (months <= 1)
			format(ret, sizeof(ret), "hace un mes");
      	else
			format(ret, sizeof(ret), "%i meses", months);
	}
    else
    {
      	new years = floatround(seconds / DAY / 365);
      	if (years <= 1)
			format(ret, sizeof(ret), "hace un año");
      	else
			format(ret, sizeof(ret), "%i años", years);
	}
	return ret;
}

/*CheckGraffitiTimelapse(start, till)
{
    new ret;
	new seconds = till - start;

	const
		MINUTE = 60,
		HOUR = 60 * MINUTE,
		DAY = 24 * HOUR;

	if (seconds < (30 * DAY))
	{
		new result = (seconds / DAY);
		if (result > 2) ret = 3;
	}

	return ret;
}*/

/*CheckMarketTimelapse(start, till)
{
    new ret;
	new seconds = till - start;

	const
		MINUTE = 60,
		HOUR = 60 * MINUTE,
		DAY = 24 * HOUR;

	if (seconds < (30 * DAY))
	{
		new result = (seconds / DAY);
		if (result > 6) ret = 7;
	}

	return ret;
}*/

SendPoliceMark(playerid, color)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
	    if (IsPlayerConnected(i))
	    {
	        if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
	        {
	            if (PLAYER_WORKS[i][WORK_POLICE])
	            {
	                if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
	                {
	                    SetPlayerMarkerForPlayer(i, playerid, color);
	                }
	            }
	        }
	    }
	}
	return 1;
}

CALLBACK: UpdateWantedLevelMark()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
	    if (IsPlayerConnected(i))
	    {
	    	if (PLAYER_MISC[i][MISC_SEARCH_LEVEL] > 0)
	    	{
	    		SendPoliceMark(i, 0xCB2828FF);
	    	}

	    	if (PLAYER_TEMP[i][py_CUFFED] == true)
	    	{
	    		SendPoliceMark(i, 0x2DAA24FF);
	    	}
	    }
	}
	return 1;
}

SetPlayerPoliceSearchLevel(playerid, level)
{
	if (level == 0)
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][43]);
		SendPoliceMark(playerid, PLAYER_COLOR);
		PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] = level;
		SetPlayerWantedLevel(playerid, 0);
		SavePlayerMisc(playerid);
		return 1;
	}

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][43]);
	PLAYER_TEMP[playerid][py_TIMERS][43] = SetTimerEx("DisablePlayerPoliceSearchLevel", 300000 * level, false, "i", playerid);

	PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] = level;
	SetPlayerWantedLevel(playerid, level);
	SendPoliceMark(playerid, 0xCB2828FF);

    SavePlayerMisc(playerid);
    return 1;
}

CALLBACK: UpdatePrisionTime(playerid)
{
	new 
		time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME]),
		str_text[128];

	format(str_text, sizeof(str_text), "~r~Encarcelado~w~~n~%s minutos.", TimeConvert(time));

	hy_DestroyNotification(playerid, PLAYER_TEMP[playerid][py_JAIL_NOT]);
	PLAYER_TEMP[playerid][py_JAIL_NOT] = ShowPlayerNotification(playerid, str_text, 1);
	
	if (time <= 0)
	{
		UnjailPlayer(playerid);
	}

	SetPlayerColor(playerid, PLAYER_COLOR);
	return 1;
}

CALLBACK: UploadFacha(playerid)
{
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	SetPlayerFakePing(playerid, minrand(170, 345));

	if (GetPlayerScore(playerid) == 0) SetPlayerScore(playerid, minrand(1, 7));
	return 1;
}

MakeBotFacha(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][37]);

	SetPlayerColorEx(playerid, PLAYER_COLOR);
	SetPlayerScore(playerid, minrand(1, 7));

    SetPlayerFakePing(playerid, minrand(170, 345));

	PLAYER_TEMP[playerid][py_TIMERS][37] = SetTimerEx("UploadFacha", 30000, true, "i", playerid);
	return 1;
}

GetPlayersInIP(const ip[])
{
	new 
		temp_ip[16],
		count = 0
	;

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
		    GetPlayerIp(i, temp_ip, 16);
		    if (!strcmp(temp_ip, ip)) count ++;
		}
	}
	return count;
}

public OnPlayerConnect(playerid)
{
	printf("OnPlayerConnect %d",playerid); // debug juju
	PLAYER_TEMP[playerid][py_GAME_STATE] = GAME_STATE_CONNECTED;
	PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = -1;
	PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = -1;
	PLAYER_TEMP[playerid][py_HUD_TEXTDRAWS] = false;
	PLAYER_TEMP[playerid][py_SEE_ACMD_LOG] = true;
	PLAYER_TEMP[playerid][py_SEE_AC_LOG] = true;
	PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][py_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	//PLAYER_TEMP[playerid][py_CLEANER_INDEX] = 99;
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

	GetPlayerName(playerid, PLAYER_TEMP[playerid][py_NAME], 24);
	GetPlayerIp(playerid, PLAYER_TEMP[playerid][py_IP], 16);

	if (sv_get_version(playerid) == SV_VERSION)
	{
		SendClientMessage(playerid, 0xec4134FF, "[DEBUG]{FFFFFF} Hyaxe Client detectado");

		if (!sv_has_micro(playerid))
	    {
	        SendClientMessage(playerid, 0xec4134FF, "[AVISO]{FFFFFF} No tienes un micrófono conectado");
	    }

	    PLAYER_STREAM[playerid] = sv_sgstream_create();
	    sv_stream_player_attach(PLAYER_STREAM[playerid], playerid);
	    sv_set_key(playerid, 0x5A);
	    sv_record_volume(playerid, 9000.0);
	    VALID_CLIENT[playerid] = true;

	    SendClientMessage(playerid, 0xec4134FF, "[DEBUG]{FFFFFF} Sesión creada");
	}
	else
	{
		SendClientMessage(playerid, 0xec4134FF, "[AVISO]{FFFFFF} Instale/Actualice Hyaxe Client en {ec4134}www.hyaxe.com/client");	
	}

	if (GetPlayersInIP(PLAYER_TEMP[playerid][py_IP]) > 5)
	{
		if (!strcmp(PLAYER_TEMP[playerid][py_IP], BotsMaster))
		{
			MakeBotFacha(playerid);
			return 0;
		}

		GetPlayerIp(playerid, PLAYER_TEMP[playerid][py_IP], 16);
		SendMessageToAdmins(-1 , "{ff0000}La IP %s superó el máximo de jugadores conectados.", PLAYER_TEMP[playerid][py_IP]);
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED""SERVER_NAME"", ""COL_WHITE"Has sido expulsado por exceder el máximo de conexiones desde una misma ip.", "Aceptar", "");
		KickEx(playerid, 500);
		return 0;
	}

	/* NAME CHECk */
	PLAYER_TEMP[playerid][py_USER_VALID_NAME] = true;

	if (CheckNameFilterViolation(PLAYER_TEMP[playerid][py_NAME])) PLAYER_TEMP[playerid][py_USER_VALID_NAME] = false;
	if (!IsValidRPName(PLAYER_TEMP[playerid][py_NAME])) PLAYER_TEMP[playerid][py_USER_VALID_NAME] = false;

	if (PLAYER_TEMP[playerid][py_USER_VALID_NAME] == false)
	{
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED""SERVER_NAME"", ""COL_WHITE"Tu nombre no es adecuado usa: "COL_RED"N"COL_WHITE"ombre_"COL_RED"A"COL_WHITE"pellido.\n\
			Recuerda que los nombres como Miguel_Gamer o que contentan insultos\n\
			no están permitidos, procura ponerte un nombre que parezca real.", "X", "");
		KickEx(playerid, 500);
		return 0;
	}

	new serial[41];
	gpci(playerid, serial, sizeof(serial));

	Log("gpci", serial);

	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	CancelSelectTextDrawEx(playerid);
	SetPlayerScore(playerid, 0);
	ac_ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);

	SetIntroCamera(playerid);

	//new str_text[128];
	//format(str_text, sizeof(str_text), ":inbox_tray: %s (%d) ingreso al servidor.", PLAYER_TEMP[playerid][py_NAME], playerid);
	//DCC_SendChannelMessage(DiscordLogChannel, str_text);

	new DB_Query[550], DBResult:ban_Result;
	format(DB_Query, sizeof DB_Query, "SELECT DATETIME('NOW') AS `NOW`, `BANS`.*, `BAD_HISTORY`.* FROM `BANS`, `BAD_HISTORY` WHERE (`BANS`.`NAME` = '%q' OR `BANS`.`IP` = '%q') AND `BAD_HISTORY`.`ID` = `BANS`.`ID_HISTORY`;", PLAYER_TEMP[playerid][py_NAME], PLAYER_TEMP[playerid][py_IP]);
	ban_Result = db_query(Database, DB_Query);

	if (db_num_rows(ban_Result))
	{
		new now[24], name[24], expire_date[24], type, by, text[128], date[24];

		db_get_field_assoc(ban_Result, "NOW", now, 24);
		db_get_field_assoc(ban_Result, "NAME", name, 24);
		db_get_field_assoc(ban_Result, "EXPIRE_DATE", expire_date, 24);
		type = db_get_field_assoc_int(ban_Result, "TYPE");
		by = db_get_field_assoc_int(ban_Result, "BY");
		db_get_field_assoc(ban_Result, "TEXT", text, 128);
		db_get_field_assoc(ban_Result, "DATE", date, 24);

		if (type == TYPE_BAN)
		{
			new dialog[480];
			format(dialog, sizeof dialog,

				"\
					"COL_WHITE"Esta IP o cuenta está suspendida permanentemente.\n\
					\n\
					Tu nombre: %s\n\
					\n\
					Nombre: %s\n\
					Expulsado por: %d\n\
					Fecha expulsión: %s\n\
					Razón: %s\n\
					\n\
				",

				PLAYER_TEMP[playerid][py_NAME],
				name, by, date, text
			);

			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
			KickEx(playerid, 500);
		}
		else if (type == TYPE_TEMP_BAN)
		{
			new DBResult:still_banned_Result;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q') AND DATETIME('NOW') >= `EXPIRE_DATE`;", PLAYER_TEMP[playerid][py_NAME], PLAYER_TEMP[playerid][py_IP]);
			still_banned_Result = db_query(Database, DB_Query);

			if (db_num_rows(still_banned_Result))
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q');", PLAYER_TEMP[playerid][py_NAME], PLAYER_TEMP[playerid][py_IP]);
				db_query(Database, DB_Query);
			}
			else
			{
				new dialog[600];
				format(dialog, sizeof dialog,

					"\
						"COL_WHITE"Esta IP o cuenta está suspendida temporalmente.\n\
						\n\
						Tu nombre: %s\n\
						Tu IP: %s\n\
						\n\
						Nombre: %s\n\
						Expulsado por: %d\n\
						Fecha expulsión: %s\n\
						Razón: %s\n\
						\n\
						Fecha actual: %s\n\
						Fecha readmisión: %s\n\
						\n\
					",

					PLAYER_TEMP[playerid][py_NAME], PLAYER_TEMP[playerid][py_IP],
					name, by, date, text, now, expire_date
				);

				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
				KickEx(playerid, 500);
			}
			db_free_result(still_banned_Result);
		}
	}
	db_free_result(ban_Result);

	if (PLAYER_TEMP[playerid][py_KICKED]) return 1;

	PLAYER_TEMP[playerid][py_USER_VALID_NAME] = true;
	PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT] = 9999;
	SetRolePlayNames(playerid);

	new DBResult:Result;
	format(DB_Query, sizeof(DB_Query),
	"\
		SELECT CUENTA.*, REGISTRO.DATE, PERSONAJE.INTERIOR, PERSONAJE.LOCAL_INTERIOR, PERSONAJE.POS_X, PERSONAJE.POS_Y, PERSONAJE.POS_Z, PERSONAJE.ANGLE, PERSONAJE.STATE AS PSTATE FROM `CUENTA`, `REGISTRO`, `PERSONAJE` WHERE CUENTA.`NAME` = '%q' AND REGISTRO.`ID_USER` = CUENTA.`ID` AND PERSONAJE.`ID_USER` = CUENTA.`ID`;\
		UPDATE `CUENTA` SET `CONNECTED` = '1', `PLAYERID` = '%d' WHERE `NAME` = '%q';\
	", PLAYER_TEMP[playerid][py_NAME], playerid, PLAYER_TEMP[playerid][py_NAME]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ACCOUNT_INFO[playerid][ac_IP], 16);
		db_get_field_assoc(Result, "NAME", ACCOUNT_INFO[playerid][ac_NAME], 24);
		db_get_field_assoc(Result, "EMAIL", ACCOUNT_INFO[playerid][ac_EMAIL], 32);
		db_get_field_assoc(Result, "PASS", ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
		db_get_field_assoc(Result, "SALT", ACCOUNT_INFO[playerid][ac_SALT], 16);

		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 24);
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] = db_get_field_assoc_int(Result, "TIME-PLAYING");
		ACCOUNT_INFO[playerid][ac_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		ACCOUNT_INFO[playerid][ac_REP] = db_get_field_assoc_int(Result, "REP");
		ACCOUNT_INFO[playerid][ac_STATE] = db_get_field_assoc_int(Result, "STATE");
		db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = db_get_field_assoc_int(Result, "DOUBT_CHANNEL");
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = db_get_field_assoc_int(Result, "TIME_FOR_REP");
		ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = db_get_field_assoc_int(Result, "PAYDAY_REP");
		ACCOUNT_INFO[playerid][ac_SU] = db_get_field_assoc_int(Result, "SU");
		db_get_field_assoc(Result, "SU_EXPIRE_DATE", ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
		ACCOUNT_INFO[playerid][ac_SD] = db_get_field_assoc_int(Result, "SD");


		CHARACTER_INFO[playerid][ch_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = db_get_field_assoc_int(Result, "LOCAL_INTERIOR");
		CHARACTER_INFO[playerid][ch_WORLD] = db_get_field_assoc_int(Result, "WORLD");
		CHARACTER_INFO[playerid][ch_POS][0] = db_get_field_assoc_float(Result, "POS_X");
		CHARACTER_INFO[playerid][ch_POS][1] = db_get_field_assoc_float(Result, "POS_Y");
		CHARACTER_INFO[playerid][ch_POS][2] = db_get_field_assoc_float(Result, "POS_Z");
		CHARACTER_INFO[playerid][ch_ANGLE] = db_get_field_assoc_float(Result, "ANGLE");
		CHARACTER_INFO[playerid][ch_STATE] = db_get_field_assoc_int(Result, "PSTATE");

		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if (index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = NewUserPos[0][0];
					CHARACTER_INFO[playerid][ch_POS][1] = NewUserPos[0][1];
					CHARACTER_INFO[playerid][ch_POS][2] = NewUserPos[0][2];
					CHARACTER_INFO[playerid][ch_ANGLE] = NewUserPos[0][3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
					CHARACTER_INFO[playerid][ch_WORLD] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = ENTER_EXIT[index][ee_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = ENTER_EXIT[index][ee_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = ENTER_EXIT[index][ee_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
					CHARACTER_INFO[playerid][ch_WORLD] = ENTER_EXIT[index][ee_EXT_WORLD];
				}
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if (index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = NewUserPos[0][0];
					CHARACTER_INFO[playerid][ch_POS][1] = NewUserPos[0][1];
					CHARACTER_INFO[playerid][ch_POS][2] = NewUserPos[0][2];
					CHARACTER_INFO[playerid][ch_ANGLE] = NewUserPos[0][3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
					CHARACTER_INFO[playerid][ch_WORLD] = 0;
				}
				else
				{
					if (PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if (index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = NewUserPos[0][0];
					CHARACTER_INFO[playerid][ch_POS][1] = NewUserPos[0][1];
					CHARACTER_INFO[playerid][ch_POS][2] = NewUserPos[0][2];
					CHARACTER_INFO[playerid][ch_ANGLE] = NewUserPos[0][3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
		}

		PlayAudioStreamForPlayer(playerid, Intro_Music[random(sizeof(Intro_Music))]); // Música
		PLAYER_TEMP[playerid][py_USER_EXIT] = true;
		ClearPlayerChatBox(playerid);
	}
	else
	{
		PlayAudioStreamForPlayer(playerid, Intro_Music[random(sizeof(Intro_Music))]); // Música
		ClearPlayerChatBox(playerid);
	}
	db_free_result(Result);

	CreatePlayerTextDraws(playerid);
	PreloadAnimLibs(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	printf("OnPlayerDisconnect %d %d",playerid, reason); // debug juju
	if (ACCOUNT_INFO[playerid][ac_ID] != 0)
	{
		new DB_Query[128];
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
    	CancelTracing(playerid);
	}

	if (VALID_CLIENT[playerid]) sv_stream_delete(PLAYER_STREAM[playerid]);
    VALID_CLIENT[playerid] = false;

  	if (PLAYER_TEMP[playerid][py_USER_LOGGED]) // ha pasado la pantalla de registro/login y ha estado jugando
  	{
  		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][py_TIME_PLAYING];
  		if (PLAYER_TEMP[playerid][py_USER_EXIT])
  		{
  			if (PLAYER_CREW[playerid][player_crew_VALID]) CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;

	  		if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
	  		{
	  			if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	  		}

	  		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  			new vehicleid = GetPlayerVehicleID(playerid);
	  			if (vehicleid)
	  			{
	  				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	  				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	  				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	  				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
	  			}
	  		}

	  		if (PLAYER_TEMP[playerid][py_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT]);

	  		EndPlayerJob(playerid, false);

	  		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME];

	  		GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	  		GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	  		CHARACTER_INFO[playerid][ch_WORLD] = GetPlayerVirtualWorld(playerid);
	  		CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
	  		PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP] = gettime() * 1000 - PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP];
	  		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] -= PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP];

	  		if (CHARACTER_INFO[playerid][ch_HEALTH] <= 0.0) CHARACTER_INFO[playerid][ch_HEALTH] = 1.0;
	  		if (CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
	  		if (CHARACTER_INFO[playerid][ch_ARMOUR] > 100.0) CHARACTER_INFO[playerid][ch_ARMOUR] = 100.0;

	  		SavePlayerVehicles(playerid, true);
	  		SaveUserData(playerid);
			SavePlayerSkills(playerid);
			SavePlayerWorks(playerid);
			SavePlayerMisc(playerid);

			if (PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] != 0)
			{
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			    {
				   	if (IsPlayerConnected(i))
				    {
				    	if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
				    	{
				    		new
				    			Float:police_pos[3],
				    			Float:player_pos[3]
				    		;

				    		GetPlayerPos(i, police_pos[0], police_pos[1], police_pos[2]);
				    		GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

							new Float:distance = GetDistanceBetweenPoints3D(police_pos[0], police_pos[1], police_pos[2], player_pos[0], player_pos[1], player_pos[2]);
							if (distance >= 200.0) 
							{
								JailPlayer(playerid, 600 * PLAYER_MISC[playerid][MISC_SEARCH_LEVEL]);
							}
						}
					}
				}
			}

	  		/*new disconnect_message[128];
	  		switch(reason)
	  		{
	  			case 0: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", PLAYER_TEMP[playerid][py_RP_NAME]);
	  			case 1: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", PLAYER_TEMP[playerid][py_RP_NAME]);
	  			case 2: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", PLAYER_TEMP[playerid][py_RP_NAME]);
	  		}
	  		NearbyMessage(CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);*/

	  		if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) EndPhoneCall(playerid);
  		}
  	}

	new pip[16];
	format(pip, sizeof pip, "%s", ACCOUNT_INFO[playerid][ac_IP]);

	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextDraws(playerid);

	if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
	{
		DestroyObject(PLAYER_TEMP[playerid][py_FP_OBJ]);
	}

	new str_text[128];
	switch(reason)
	{
	  	case 0: format(str_text, sizeof(str_text), ":outbox_tray: %s (%d) salio del servidor (crash).", PLAYER_TEMP[playerid][py_NAME], playerid);
	  	case 1: format(str_text, sizeof(str_text), ":outbox_tray: %s (%d) salio del servidor (leave).", PLAYER_TEMP[playerid][py_NAME], playerid);
	  	case 2: format(str_text, sizeof(str_text), ":outbox_tray: %s (%d) salio del servidor (kick/ban).", PLAYER_TEMP[playerid][py_NAME], playerid);
	}
	//DCC_SendChannelMessage(DiscordLogChannel, str_text);

 	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(PLAYER_TEMP[playerid][py_TIMERS][i]);
  	
  	ResetPlayerVariables(playerid);
  	//BlockIpAddress(pip, 6000);
  	return 1;
}

public SV_BOOL:OnPlayerVoice(SV_UINT:playerid, SV_PACKET:packet, SV_UINT:volume)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]); 

		SetPlayerChatBubble(playerid, "Hablando...", 0x67DA5BFF, 10.00, 1000);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if (playerid == i) continue;
			if (!IsPlayerConnected(i)) continue; 
			if (GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
			if (VALID_CLIENT[i] == false) continue;

			if (IsPlayerInRangeOfPoint(i, 20.00, pos[0], pos[1], pos[2]))
			{
				sv_send_packet(packet, PLAYER_STREAM[i]);
			}
		}
	}
	return SV_TRUE;
}

ResetPlayerVariables(playerid)
{
	new temp_PLAYER_TEMP[Temp_Enum]; PLAYER_TEMP[playerid] = temp_PLAYER_TEMP;
	new temp_ACCOUNT_INFO[Account_Enum]; ACCOUNT_INFO[playerid] = temp_ACCOUNT_INFO;
	new temp_CHARACTER_INFO[Character_Enum]; CHARACTER_INFO[playerid] = temp_CHARACTER_INFO;
	new temp_BANK_ACCOUNT[Bank_Account_Enum]; BANK_ACCOUNT[playerid] = temp_BANK_ACCOUNT;

	new temp_PLAYER_TOYS[Player_Toys_Info];
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;

	new temp_PLAYER_POCKET[Player_Pocket_Enum];
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;

	B1G_PLAYER[playerid][FAKE_PING] = false;

	new temp_PLAYER_PHONE[Phone_Info_Enum]; PLAYER_PHONE[playerid] = temp_PLAYER_PHONE;

	new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

	new temp_PLAYER_GPS[Player_GPS_Enum];
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

	new temp_PLAYER_OBJECT[Player_Objects_Enum]; PLAYER_OBJECT[playerid] = temp_PLAYER_OBJECT;

	for(new i = 0; i != sizeof(PLAYER_SKILLS[]); i ++) PLAYER_SKILLS[playerid][i] = 0;

	for(new i = 0; i != sizeof(PLAYER_WORKS[]); i ++) PLAYER_WORKS[playerid][i] = 0;

	for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++) PLAYER_MISC[playerid][i] = 0;

	new temp_PLAYER_PROPERTY_CONSTRUCTO[PLAYER_PROPERTY_CONSTRUCTOR_ENU]; PLAYER_PROPERTY_CONSTRUCTOR[playerid] = temp_PLAYER_PROPERTY_CONSTRUCTO;

	PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][py_ADMIN_SERVICE] = false;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	new tmp_PLAYER_AC_INFO[e_PLAYER_AC_INFO];
	for(new i = 0; i != sizeof(ac_Info); i ++) PLAYER_AC_INFO[playerid][i] = tmp_PLAYER_AC_INFO;

	new tmp_PLAYER_CREW[enum_PLAYER_CREW]; PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]);
		PLAYER_TEMP[playerid][py_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]);
		PLAYER_TEMP[playerid][py_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]);
    	CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]);
    	CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]);
    	CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if (IsValidDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if (ENTER_EXIT[i][ee_ID] == 0) continue;
		if (ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	printf("rcon %s %s",ip,password); // debug juju
    new temp_ip[16];

    for(new i = 0; i < MAX_PLAYERS; i++)
    {
	   if (IsPlayerConnected(i))
	   {
		  	GetPlayerIp(i, temp_ip, sizeof(temp_ip));
		  	if (!strcmp(ip, temp_ip))
		  	{
			 	KickEx(i, 100);
		  	}
	   	}
    }
    return 1;
}

FreezeThenAutoUnfreeze(playerid, time)
{
    TogglePlayerControllable(playerid, 0);
    SetTimerEx("UnfreezeBastard", time, false, "i", playerid);
}

CALLBACK: UnfreezeBastard(playerid)
{
	ClearAnimations(playerid);
    TogglePlayerControllableEx(playerid, true);
}

ExitSite(playerid)
{   
    if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 0;
    
    if (IsPlayerInRangeOfPoint(playerid, 2.0, 1881.801635, -1688.519531, 5216.709960))
    {
    	SetPlayerPosEx(playerid, 1555.400390, -1675.611694, 16.195312, 180.0, 0, 0, false);
        return 1;
    }

    if (IsPlayerInRangeOfPoint(playerid, 2.0, 1881.341674, -1727.080688, 5216.709960))
    {
    	SetPlayerPosEx(playerid, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, false);
        return 1;
    }

    if (PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] == 0) return 1;

    new info[3];
    Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
    if (info[0] == PICKUP_TYPE_NONE) return 0;

    new Float:pos[3]; 
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
    
    if (!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return 0;

    switch(info[0])
    {
        case PICKUP_TYPE_ENTER_EXIT:
        {
            if (info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
            {
                CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
                CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
                PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = -1;
                SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                StopAudioStreamForPlayer(playerid);
                FreezePlayer(playerid);

                if (ENTER_EXIT[ info[1] ][ee_EXT_INTERIOR] == 0) SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);

                KillTimer(PLAYER_TEMP[playerid][py_TIMERS][41]);
            	PLAYER_TEMP[playerid][py_IN_MARKET] = false;
                if (ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_ALHAMBRA) StopAudioStreamForPlayer(playerid);
            }
            else ShowPlayerMessage(playerid, "~r~No estás en sitio correcto.", 2);
        }
        case PICKUP_TYPE_PROPERTY:
        {
            if (info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
            {
            	PLAYER_TEMP[playerid][py_ACTUAL_PROPERTY] = 0;
                CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
                CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
                PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = -1;
                SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                StopAudioStreamForPlayer(playerid);
                FreezePlayer(playerid);
            }
            else ShowPlayerMessage(playerid, "~r~No estás en sitio correcto.", 2);
        }
        default: ShowPlayerMessage(playerid, "~r~No estás en sitio correcto.", 2);
    }
    return 1;
}

CALLBACK: RestorePlayerPos(playerid, Float:x, Float: y, Float: z)
{
	if (GetPlayerInterior(playerid) == 0) return 0;
	SetPlayerPosEx(playerid, x, y, z, 90.0, 0, 0);
	return 1;
}

EnterSite(playerid)
{
    if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 0;
    if (PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] == 0) return 1;
        
    new info[3];
    Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
    if (info[0] == PICKUP_TYPE_NONE) return 0;
    
    new Float:pos[3]; 
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
    
    if (!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return 0;
    
    switch(info[0])
    {
        case PICKUP_TYPE_ENTER_EXIT:
        {
            PLAYER_TEMP[playerid][py_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
            if (PLAYER_TEMP[playerid][py_HOSPITAL] == -1) PLAYER_TEMP[playerid][py_HOSPITAL] = 1;
    
            if (info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
            {
                if (ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
                {
                	if (PLAYER_TEMP[playerid][py_ROCK]) return ShowPlayerMessage(playerid, "~r~Primero debes entregar la roca.", 3);

                    if (ENTER_EXIT[ info[1] ][ee_INT_INTERIOR] == 25)
                 	{
                 		SetPlayerTime(playerid, 2, 2);
                 	}

                 	if (ENTER_EXIT[ info[1] ][ee_INT_INTERIOR] == 26)
                 	{
                 		if (PLAYER_SKILLS[playerid][WORK_MINER] < 150) return ShowPlayerMessage(playerid, "~r~Necesitas 150 de experiencia de minero para~n~picar en esta zona.", 5);
                 		SetPlayerTime(playerid, 2, 2);
                 	}

                 	if (ENTER_EXIT[ info[1] ][ee_INT_INTERIOR] == 27)
                 	{
                 		if (PLAYER_SKILLS[playerid][WORK_MINER] < 500) return ShowPlayerMessage(playerid, "~r~Necesitas 500 de experiencia de minero para~n~picar en esta zona.", 5);
                 		SetPlayerTime(playerid, 2, 2);
                 	}

                    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
                    CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
                    PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = info[1];
                    SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
                    FreezePlayer(playerid);

                    StopAudioStreamForPlayer(playerid);
                }
                else
                {
                    if (is_open(SERVER_TIME[0], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
                    {
                        CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
                        CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
                        PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = info[1];
                        SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
                        FreezePlayer(playerid);
                    }
                    else SendClientMessageEx(playerid, COLOR_WHITE, "{C4FF66}%s "COL_WHITE"está cerrado, su horario es: {C4FF66}%02d:00 - %02d:00.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
                }
            }
            else ExitSite(playerid);
        }
        case PICKUP_TYPE_PROPERTY:
        {
            PLAYER_TEMP[playerid][py_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
            if (PLAYER_TEMP[playerid][py_HOSPITAL] == -1) PLAYER_TEMP[playerid][py_HOSPITAL] = 1;
            
            if (PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] > 0) return ShowPlayerMessage(playerid, "~r~No puedes entrar a una propiedad~n~teniendo cargos.", 3);

            if (info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
            {
                if (!PROPERTY_INFO[info[1]][property_SOLD])
                {
                	new str_text[264];
                	if (PROPERTY_INFO[info[1]][property_EXTRA])
                	{
                		format(str_text, sizeof(str_text), ""COL_WHITE"Precio: %d "SERVER_COIN"\nNivel: %d\n\nVIP: %d\n\nUse /comprar para comprar la propiedad", PROPERTY_INFO[info[1]][property_EXTRA], PROPERTY_INFO[info[1]][property_LEVEL], PROPERTY_INFO[info[1]][property_VIP_LEVEL]);
                	}
                	else
                	{
                		format(str_text, sizeof(str_text), ""COL_WHITE"Precio: %s$\nNivel: %d\nVIP: %d\n\nUse /comprar para comprar la propiedad", number_format_thousand(PROPERTY_INFO[info[1]][property_PRICE]), PROPERTY_INFO[info[1]][property_LEVEL], PROPERTY_INFO[info[1]][property_VIP_LEVEL]);	
                	}

                	PLAYER_TEMP[playerid][py_ACTUAL_PROPERTY] = PROPERTY_INFO[info[1]][property_ID];
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Propiedad", str_text, "Cerrar", "");

					new Float:apos[3];
                    GetPlayerPos(playerid, apos[0], apos[1], apos[2]);
                    SetTimerEx("RestorePlayerPos", 30000, false, "ifff", playerid, apos[0], apos[1], apos[2]);

                	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
                    CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
                    PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = info[1];
                    SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
                    FreezePlayer(playerid);

                    ShowPlayerMessage(playerid, "Tienes ~r~30 segundos~w~ para ver la propiedad.", 10);
                    return 1;
                }

                if (PROPERTY_INFO[info[1]][property_CREW])
                {
                    if (!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessageEx(playerid, COLOR_WHITE, "{999999}Solo miembros de la banda pueden entrar.");
                    if (PLAYER_CREW[playerid][player_crew_ID] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessageEx(playerid, COLOR_WHITE, "{999999}Solo miembros de la banda pueden entrar.");
                    
                    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
                    CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
                    PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = info[1];
                    SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
                    FreezePlayer(playerid);
                }
                else
                {
                    if (PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
                    {
                        CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
                        CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
                        PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = info[1];
                        SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
                        FreezePlayer(playerid);
                    }
                    else
                    {
                        if (gettime() < PLAYER_TEMP[playerid][py_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessage(playerid, 0x999999AA, "Espera para volver a tocar, si no te quieren abrir, vete.");
                        
                        new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
                        if (owner_playerid == -1) return ShowPlayerMessage(playerid, "Has tocado en la puerta, pero parece que no hay nadie.", 4);
                        PLAYER_TEMP[playerid][py_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
                        PLAYER_TEMP[owner_playerid][py_KNOCK_PLAYER_ID] = playerid;
                        ShowPlayerNotification(owner_playerid, "Están tocando en la puerta, presione la tecla Y estando en la puerta para dejarlo entrar o simplemente ignórelo.", 4);
                        ShowPlayerMessage(playerid, "Has tocado en la puerta, espera a que te abran.", 7);
                    }
                }
            }
            else ExitSite(playerid);
        }
        default: ExitSite(playerid);
    }
    return 1;
}

CheckFarmerShop(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, -382.580657, -1426.404296, 26.219505)) return 0;
	if (!PLAYER_WORKS[playerid][WORK_MAFIA] || !PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA]) return ShowPlayerMessage(playerid, "~r~No eres mafioso.", 3);
	ShowDialog(playerid, DIALOG_SEED_LIST);
	return 1;
}

CheckTrashJobSite(playerid)
{
	if (!PLAYER_WORKS[playerid][WORK_TRASH]) return 0;
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRASH) return 0;

	if (GetPlayerVirtualWorld(playerid) != 0) return 0;
	if (GetPlayerInterior(playerid) != 0) return 0;
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;
	if (!IsPlayerInRangeOfPoint(playerid, 1.0, 1626.089355, -2174.786132, 13.554687)) return 0;

	if (!PLAYER_TEMP[playerid][py_WORKING_IN]) StartPlayerJob(playerid, WORK_TRASH);
	else EndPlayerJob(playerid);
	return 1;
}

CheckIsFireWeapon(weapon)
{
	switch(weapon)
	{
		case 0..18: return 0;
		case 22..38: return 1;
		case 39..46: return 0;
	}
	return 1;
}

ResyncWeapon(playerid, weapon)
{
	switch(weapon)
	{
		case 22: //9mm
		{
			GivePlayerWeaponEx(playerid, weapon, 15);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+15"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 24: //dk
		{
			GivePlayerWeaponEx(playerid, weapon, 7);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+7"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 32: //tec 9
		{
			GivePlayerWeaponEx(playerid, weapon, 20);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+20"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 28: //uzi
		{
			GivePlayerWeaponEx(playerid, weapon, 25);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+25"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 33: //rifle
		{
			GivePlayerWeaponEx(playerid, weapon, 8);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+8"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 26: //recortada
		{
			GivePlayerWeaponEx(playerid, weapon, 2);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+2"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 25: //escopeta
		{
			GivePlayerWeaponEx(playerid, weapon, 5);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+5"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 29: //mp5
		{
			GivePlayerWeaponEx(playerid, weapon, 35);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+35"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 30: //ak
		{
			GivePlayerWeaponEx(playerid, weapon, 50);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+50"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
		case 31: //m4
		{
			GivePlayerWeaponEx(playerid, weapon, 50);
			GameTextForPlayer(playerid, TextToSpanish("~n~~n~~n~~w~Munición ~r~+50"), 2000, 5);
			PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 1000);
			return 1;
		}
	}
	return 1;
}

CheckAndReload(playerid)
{
	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL)
	{
		new actual_weapon = GetPlayerWeapon(playerid);
		if (CheckIsFireWeapon(actual_weapon))
		{
			switch(actual_weapon)
			{
				case 22..24:
				{
					if (PLAYER_MISC[playerid][MISC_CARTRIDGE_1] > 0)
					{
						ResyncWeapon(playerid, actual_weapon);
						PLAYER_MISC[playerid][MISC_CARTRIDGE_1] --;
						return 1;
					}
					//pistolas
				}
				case 25..27:
				{
					if (PLAYER_MISC[playerid][MISC_CARTRIDGE_2] > 0)
					{
						ResyncWeapon(playerid, actual_weapon);
						PLAYER_MISC[playerid][MISC_CARTRIDGE_2] --;
						return 1;
					}
					//escopetas
				}
				case 33, 34:
				{
					if (PLAYER_MISC[playerid][MISC_CARTRIDGE_3] > 0)
					{
						ResyncWeapon(playerid, actual_weapon);
						PLAYER_MISC[playerid][MISC_CARTRIDGE_3] --;
						return 1;
					}
					//rifle
				}
				case 28..32:
				{
					if (PLAYER_MISC[playerid][MISC_CARTRIDGE_4] > 0)
					{
						ResyncWeapon(playerid, actual_weapon);
						PLAYER_MISC[playerid][MISC_CARTRIDGE_4] --;
						return 1;
					}
					//subfusil
				}
			}
		}
	}
	return 1;
}

ShowTuningMenu(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (vehicleid == INVALID_VEHICLE_ID) return 1;

	HidePlayerMenu(playerid);

	ShowPlayerMenu(playerid, MECHANICTUNING, "Tuning");
	AddPlayerMenuItem(playerid, TextToSpanish("Reparación"), "Precio: 350$");
	AddPlayerMenuItem(playerid, "Colores");
	AddPlayerMenuItem(playerid, "Paintjob");
	AddPlayerMenuItem(playerid, "Objetos");
	AddPlayerMenuItem(playerid, "Eliminar componentes");

	new DBResult:Result, DB_Query[250];
	format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`PART`, `COMPONENTS_INFO`.`PIECES` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID` GROUP BY `COMPONENTS_INFO`.`PART`;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result) == 0) printf("[ERROR] No hay componentes asignados en la base de datos");
	else
	{
		new line_str[80];

		for(new i; i < db_num_rows(Result); i++ )
		{
			if (i >= TOTAL_TUNING_PARTS)
			{
				printf("[debug]  Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
				break;
			}

			db_get_field_assoc(Result, "PART", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);
			format(line_str, sizeof line_str, "%s", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
			
			AddPlayerMenuItem(playerid, TextToSpanish(line_str), "Precio: 50$");

			db_next_row(Result);
		}
	}
	db_free_result(Result);
	return 1;
}

Menu:MECHANICPAINTJOB(playerid, response, listitem)
{
	if (response == MENU_RESPONSE_SELECT)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (vehicleid == INVALID_VEHICLE_ID) return 1;
		
		if (listitem == 0)
		{
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB] == 3)
			{
				ShowPlayerMessage(playerid, "~r~El vehículo no tiene ningún paintjob.", 3);
				return 1;
			}

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB] = 3;
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);

			ShowPlayerMessage(playerid, "Paintjob ~r~eliminado", 3);
			return 1;
		}

		if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if (CHARACTER_INFO[playerid][ch_CASH] <= 350) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB] = listitem - 1;
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			ShowPlayerMessage(playerid, "Paintjob ~g~aplicado", 3);
			GivePlayerCash(playerid, -100, false);
			ShowTuningMenu(playerid);
		}
	}
	return 1;
}

Menu:MECHANICTUNING(playerid, response, listitem)
{
    if (response == MENU_RESPONSE_SELECT)
    {
    	new vehicleid = GetPlayerVehicleID(playerid);
		if (vehicleid == INVALID_VEHICLE_ID) return 1;

    	if (listitem == 0)
        {
        	if (CHARACTER_INFO[playerid][ch_CASH] <= 350) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);

			RepairVehicleEx(vehicleid, playerid);
			GivePlayerCash(playerid, -350, false);
			ShowPlayerMessage(playerid, "Vehículo ~g~reparado", 2);
			ShowTuningMenu(playerid);
        }

        else if (listitem == 1)
        {
        	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Solo puedes tunear tus vehículos personales.", 3);
        	
        	ShowDialog(playerid, DIALOG_TUNING_SELECT_COL_SLOT);
        }

        else if (listitem == 2)
        {
        	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Solo puedes tunear tus vehículos personales.", 3);

			new paintjobs = VehiclePaintjob(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			if (paintjobs == 0)
			{
				ShowPlayerMessage(playerid, "~r~Este vehículo no soporta paintjobs.", 3);
				ShowTuningMenu(playerid);
				return 1;
			}

			ShowPlayerMenu(playerid, MECHANICPAINTJOB, "Paintjobs");
			AddPlayerMenuItem(playerid, "Eliminar paintjob");

			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "Paintjob %d", i + 1);
				AddPlayerMenuItem(playerid, line_str, "Precio: 100$");
			}
       	}
       	
       	else if (listitem == 3)
        {
        	ShowObjTuning(playerid);
        }

       	else if (listitem == 4)
        {
        	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Solo puedes tunear tus vehículos personales.", 3);
        	ShowDialog(playerid, DIALOG_TUNING_REMOVE);
        }

        else
		{
			new new_listitem = listitem - 5;
			if (isnull(PLAYER_TUNING_MENU[playerid][new_listitem][tuning_menu_NAME])) return 1;
			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			format(PLAYER_TEMP[playerid][py_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][new_listitem][tuning_menu_NAME]);
			ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
		}
	}
	else
	{
		PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE] = false;
	}
    return 1; 
}

ShowObjTuning(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (vehicleid == INVALID_VEHICLE_ID) return 1;
			
    if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Solo puedes tunear tus vehículos personales.", 3);
	if (!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID]) return ShowPlayerMessage(playerid, "~r~Este vehículo no se puede tunear.", 3);

	HidePlayerMenu(playerid);

	PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE] = true;
	PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] = vehicleid;

	ShowPlayerMenu(playerid, OBJTUNINGMENU, "Objetos");
	AddPlayerMenuItem(playerid, "Mis objetos");
	AddPlayerMenuItem(playerid, "Comprar objetos");
	AddPlayerMenuItem(playerid, "Texto", "Precio: 500$");
	AddPlayerMenuItem(playerid, "Bandera", "Precio: 2.000$");
	return 1;
}

Menu:OBJTUNINGMENU(playerid, response, listitem)
{
	if (response == MENU_RESPONSE_SELECT)
	{
		switch(listitem)
		{
			case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			case 1: //Comprar
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					ShowObjTuning(playerid);
					return 1;
				}

				if (slot == -1)
				{
					ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					ShowObjTuning(playerid);
					return 1;
				}

				ShowDialog(playerid, DIALOG_BUY_VOBJECT);
			}

			case 2:
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					ShowObjTuning(playerid);
					return 1;
				}

				if (slot == -1)
				{
					ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					ShowObjTuning(playerid);
					return 1;
				}

				if (500 > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					ShowObjTuning(playerid);
					return 1;
				}

				GivePlayerCash(playerid, -500);

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19327;
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Texto");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_TEXT], 32, "Texto");
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT], 24, "Arial");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_SIZE] = 24;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_BOLD] = false;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;

				RegisterNewVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot, true);

				ShowPlayerMessage(playerid, "El objeto de texto fue añadido.", 2);
				PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] = slot;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}

			case 3:
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					ShowObjTuning(playerid);
					return 1;
				}

				if (slot == -1)
				{
					ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					ShowObjTuning(playerid);
					return 1;
				}

				if (2000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowObjTuning(playerid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_COUNTRY_TYPE] = 0;
				ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
			}

			case 4:
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					ShowObjTuning(playerid);
					return 1;
				}
				if (slot == -1)
				{
					ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					ShowObjTuning(playerid);
					return 1;
				}

				if (2000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					ShowObjTuning(playerid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_COUNTRY_TYPE] = 1;
				ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
			}
		}
	}
	return 1;
}

CheckHeliPort(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 5.2, 1876.87915, -2286.58911, 1.16550 + 10))
	{
		ShowDialog(playerid, DIALOG_HELI_OPTIONS);
		return 1;
	}
	return 1;
}

CheckMechanicMenu(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 1.2, -64.154220, -1162.446533, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -70.391883, -1175.106201, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -75.486938, -1185.539672, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -94.757438, -1170.204589, 2.504477))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (vehicleid == INVALID_VEHICLE_ID) return 1;

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return ShowPlayerMessage(playerid, "~r~El motor debe estar apagado.", 3);

		ShowTuningMenu(playerid);
	}
	return 1;
}

Menu:TRUCKRECOS(playerid, response, listitem)
{
    if (response == MENU_RESPONSE_SELECT)
    {
    	new vehicleid = GetPlayerVehicleID(playerid);
		TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] = listitem;
				
		PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] = 5;
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][7]);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
		PLAYER_TEMP[playerid][py_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
	}
    return 1; 
}

CheckTruckPointAndLoad(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	if (!PLAYER_WORKS[playerid][WORK_TRUCK]) return 0;
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRUCK) return 0;

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return 0;
	if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 0;

	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
		{
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return ShowPlayerMessage(playerid, "~r~El camión ya está cargado.", 3);
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return ShowPlayerMessage(playerid, "~r~El camión ya se está cargando.", 3);

			TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
			TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = ACCOUNT_INFO[playerid][ac_ID];

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			ShowPlayerMessage(playerid, "Usa ~r~ESPACIO~w~ para seleccionar y ~r~ENTER~w~ para salir~n~y ~r~ARRIBA~w~ o ~r~ABAJO~w~ para mover.", 10);

			ShowPlayerMenu(playerid, TRUCKRECOS, "Cargamentos");
			for(new x = 0; x != sizeof Truck_Contents; x ++)
			{
				new line_str[105], paga_str[105];
				format(line_str, sizeof line_str, "%s", TextToSpanish(Truck_Contents[x][truck_content_NAME]));
				format(paga_str, sizeof paga_str, "Paga: %s$ - Distancia: %.2f Km", number_format_thousand(Truck_Contents[x][truck_content_MONEY]), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[x][truck_content_X], Truck_Contents[x][truck_content_Y], Truck_Contents[x][truck_content_Z]) * 0.01));
				AddPlayerMenuItem(playerid, line_str, paga_str);
			}
			return 1;
		}
	}
	return 1;
}

GrabPlant(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if (!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if (IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
		{
			if (PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Esta planta no es tuya", 3);

			KillTimer(PLANTS[i][plant_TIMER]);
			switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE:
				{
					PLAYER_MISC[playerid][MISC_MEDICINE] += 10;
					ShowPlayerNotification(playerid, "~g~+10~w~ medicamentos", 4);
					SavePlayerMisc(playerid);
				}
				case PLANT_TYPE_CANNABIS:
				{
					PLAYER_MISC[playerid][MISC_CANNABIS] += 10;
					ShowPlayerNotification(playerid, "~g~+10~w~ marihuana", 4);
					SavePlayerMisc(playerid);
				}
				case PLANT_TYPE_CRACK:
				{
					PLAYER_MISC[playerid][MISC_CRACK] += 10;
					ShowPlayerNotification(playerid, "~g~+10~w~ crack", 4);
				    SavePlayerMisc(playerid);
				}
			}

			DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
			return 1;
		}
	}

	return 1;
}

ExitCrack(playerid)
{
	if (CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return 0;
	if (PLAYER_TEMP[playerid][py_CUFFED]) return 0;
	if (PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] > 0) return 0;

	SetPlayerHealthEx(playerid, 0.0);
	SetPlayerChatBubble(playerid, "\n\n\n\n* Ha muerto.\n\n\n", 0xffcb90FF, 20.0, 5000);
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

CheckPlayerHouseDoor(playerid)
{
	if (CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return 0;
	if (PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] == 0) return 0;

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if (info[0] != PICKUP_TYPE_PROPERTY) return 0;

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return 0;

	if (info[2] == 1) // Está en el Pickup Interior
	{
		if (PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if (PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~Nadie tocó la puerta", 3);
			if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID])) return ShowPlayerMessage(playerid, "~r~Nadie tocó la puerta o ya se fue.", 3);
			if (!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return ShowPlayerMessage(playerid, "~r~Nadie tocó la puerta o ya se fue.", 3);
			if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~Este jugador no puede entrar ahora.", 3);

			PLAYER_TEMP[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][py_HOSPITAL] = GetNearestHospitalForPlayer(PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]);
			if (PLAYER_TEMP[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][py_HOSPITAL] == -1) PLAYER_TEMP[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][py_HOSPITAL] = 1;

			CHARACTER_INFO[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			CHARACTER_INFO[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
			PLAYER_TEMP[PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]][py_PROPERTY_INDEX] = info[1];
			SetPlayerPosEx(PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
			FreezePlayer(PLAYER_TEMP[playerid][py_KNOCK_PLAYER_ID]);
		}
		else return 0;
	}
	else return 0;
	return 1;
}

CALLBACK: RestartBalloon(balloon_id)
{
	BackBalloonToStart(balloon_id, 10.0);
	return 1;
}

CALLBACK: UpBalloon(balloon_id)
{
	SetBalloonAction(balloon_id, float(minrand(200, 300)), -float(minrand(1700, 1950)), 90.0, 10.0);
	return 1;
}

CheckBallonAction(playerid)
{
	// Buy
	if (IsPlayerInRangeOfPoint(playerid, 1.0, -370.339721, -1634.205932, 25.057666))
	{
		if (PLAYER_MISC[playerid][MISC_BALLOON]) return ShowPlayerMessage(playerid, "~r~Ya tienes un boleto", 2);
		if (CHARACTER_INFO[playerid][ch_CASH] <= 200) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);
     	GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
     	PLAYER_MISC[playerid][MISC_BALLOON] = true;
     	ShowPlayerNotification(playerid, "Sube a un globo y presiona la tecla Y para comenzar el viaje.", 4);
     	GivePlayerCash(playerid, -200);
		return 1;
	}

	// Start
	if (PLAYER_MISC[playerid][MISC_BALLOON])
	{
		for(new i = 0; i != sizeof HOTAIR_BALLOONS; i ++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.5, HOTAIR_BALLOONS[i][balloon_X], HOTAIR_BALLOONS[i][balloon_Y], HOTAIR_BALLOONS[i][balloon_Z]))
			{
				if (HOTAIR_BALLOONS[i][balloon_ACTIVE] == false)
				{
					PLAYER_MISC[playerid][MISC_BALLOON] = false;
					SetBalloonAction(i, HOTAIR_BALLOONS[i][balloon_X], HOTAIR_BALLOONS[i][balloon_Y], 60.0, 10.0);
					SetTimerEx("UpBalloon", 4000, false, "i", i);
					SetTimerEx("RestartBalloon", 60000, false, "i", i);
					ShowPlayerNotification(playerid, "¡Trata de no saltar o moverte demasiado porque te puedes caer!", 3);
					return 1;
				}
			}
		}
	}
	return 1;
}

SetVehicleLightsAction(playerid)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
			UpdateVehicleParams(vehicleid);

			ShowPlayerMessage(playerid, "Luces ~r~apagadas", 2);

			if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) SetPlayerChatBubble(playerid, "\n\n\n\n* Ha apagado las luces de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
			else SetPlayerChatBubble(playerid, "\n\n\n\n* Ha apagado las luces de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
			UpdateVehicleParams(vehicleid);

			ShowPlayerMessage(playerid, "Luces ~g~encendidas", 2);

			if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) SetPlayerChatBubble(playerid, "\n\n\n\n* Ha encendido las luces de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
			else SetPlayerChatBubble(playerid, "\n\n\n\n* Ha ecendido las luces de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
		}
	}
	return 1;
}

BuyProperty(playerid, id)
{
	if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~No puedes comprar una propiedad sin cuenta bancaria.", 3);

	new DBResult:Result, DB_Query[120], player_properties;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if (db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
	db_free_result(Result);

	if (ACCOUNT_INFO[playerid][ac_SU])
	{
		if (player_properties >= MAX_SU_PROPERTIES) return ShowPlayerMessage(playerid, "~r~No puedes comprar más propiedades.", 3);
	}
	else if (player_properties >= MAX_NU_PROPERTIES) return ShowPlayerMessage(playerid, "~r~No puedes comprar más propiedades.", 3);

	new index = GetPropertyIndexByID(id);
	if (index == -1) return ShowPlayerMessage(playerid, "~r~Error al intentar comprar la propiedad, intenta luego.", 3);

	if (PROPERTY_INFO[index][property_SOLD]) return 1;
	if (PROPERTY_INFO[index][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return ShowPlayerMessage(playerid, "~r~No tienes el nivel suficiente.", 3);
	if (PROPERTY_INFO[index][property_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return ShowPlayerMessage(playerid, "~r~No tienes VIP.", 3);
	if (PROPERTY_INFO[index][property_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return ShowPlayerMessage(playerid, "~r~No tienes las hycoins suficientes.", 3);
	if (BANK_ACCOUNT[playerid][bank_account_BALANCE] >= PROPERTY_INFO[index][property_PRICE])
	{
		PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else ShowPlayerMessage(playerid, "~r~No tienes el dinero suficiente.", 3);
	return 1;
}

CheckAndBuyProperty(playerid)
{
	if (PLAYER_TEMP[playerid][py_ACTUAL_PROPERTY] > 0) BuyProperty(playerid, PLAYER_TEMP[playerid][py_ACTUAL_PROPERTY]);
}

Menu:PROPERTY_MENU(playerid, response, listitem)
{
    if (response == MENU_RESPONSE_SELECT)
    {
    	switch(listitem)
    	{
    		case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
			case 1:
			{
				new total;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if ( CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID])
						{
							CHARACTER_INFO[i][ch_STATE] = ROLEPLAY_STATE_NORMAL;
							CHARACTER_INFO[i][ch_INTERIOR_EXTRA] = 0;
							PLAYER_TEMP[i][py_PROPERTY_INDEX] = -1;
							SetPlayerPosEx(i, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
							StopAudioStreamForPlayer(i);
							ShowPlayerMessage(i, "~r~Te hecharon de la propiedad.", 4);
							total ++;
						}
					}
				}

				if (total == 0) ShowPlayerMessage(playerid, "~r~No hay nadie en tu propiedad", 2);
				else
				{
					new str_text[128];
					format(str_text, sizeof(str_text), "Has echado %d personas de tu propiedad.", total);
					ShowPlayerNotification(playerid, str_text, 4);
				}
			}
			case 2:
			{
				//ShowFurnitureMenu(playerid);
				ShowPlayerMessage(playerid, "~r~Esta opción no esta disponible por el momento", 4);
			}
    	}
    }
    return 1; 
}

ShowPropertyMenu(playerid)
{
	new caption[40];
	format(caption, sizeof caption, "%s", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

	ShowPlayerMenu(playerid, PROPERTY_MENU, TextToSpanish(caption));

	AddPlayerMenuItem(playerid, "Cambiar nombre");
	AddPlayerMenuItem(playerid, "Echar a todos");
	AddPlayerMenuItem(playerid, "Personalizar");

	PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	return 1;
}

Menu:PROPERTY_FURNITURE(playerid, response, listitem)
{
    if (response == MENU_RESPONSE_SELECT)
    {
    	print("test etst asd");
    }
    return 1; 
}

/*ShowFurnitureMenu(playerid)
{
	ShowPlayerMenu(playerid, PROPERTY_FURNITURE, "Personalizar");

	AddPlayerMenuItem(playerid, "Mis muebles");
	AddPlayerMenuItem(playerid, "Camas");
	AddPlayerMenuItem(playerid, "Cuadros");
	AddPlayerMenuItem(playerid, TextToSpanish("Decoración"));
	AddPlayerMenuItem(playerid, TextToSpanish("Electrodomésticos"));
	AddPlayerMenuItem(playerid, TextToSpanish("Iluminación"));
	AddPlayerMenuItem(playerid, "Mesas");
	AddPlayerMenuItem(playerid, "Sillas");

	PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	return 1;
}*/

ShowPropertyOptions(playerid)
{
    if (PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] == 0) return 0;

    new info[3];
    Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
    if (info[0] != PICKUP_TYPE_PROPERTY) return 0;

    new Float:pos[3];
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

    if (!IsPlayerInRangeOfPoint(playerid, 80.0, pos[0], pos[1], pos[2])) return 0;

    if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
    {
        if (info[2] == 1) // Está en el Pickup Interior
        {
            if (PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
            {
                PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] = info[1];
                ShowPropertyMenu(playerid);
            }
            else return 0;
        }
        else return 0;
    }
    else if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
    {
        if (info[2] == 1) // Está en el Pickup Interior
        {
            if (PROPERTY_INFO[info[1]][property_CREW])
            {
                if (PROPERTY_INFO[info[1]][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return ShowPlayerMessage(playerid, "~r~Esta no es una propiedad de tu crew.", 3);
                if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);
                if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No puedes liberar esta propiedad mientras tu crew está en combate.", 3);

                PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] = info[1];
                ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
            }
            else return 0;
        }
        else return 0;
    }
    else return 0;
    return 1;
}

CheckBlackMarket(playerid)
{
    if (!IsPlayerInRangeOfPoint(playerid, 1.5, 2164.021484, -1164.398925, -16.871662)) return 1;
    if (PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "No puedes comprar aquí siendo policía.", 3);
    if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Tienes que ser nivel 2.", 3);
    //ShowDialog(playerid, DIALOG_BLACK_MARKET);
    ShowDialog(playerid, DIALOG_BLACK_MARKET_WEAPONS);
    return 1;
}

CheckRodShop(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 1.5, 2125.901123, -65.776679, 1.585963)) return 1;
	ShowDialog(playerid, DIALOG_BUY_ROD);
	return 1;
}

CheckMinerShop(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 1.5, 509.910125, -708.205383, 19.242210)) return 1;
	ShowDialog(playerid, DIALOG_MINER_STORE);
	return 1;
}

CheckFishSell(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 1.5, 2157.049560, -92.550987, 2.798943))
	{
		if (PLAYER_MISC[playerid][MISC_FISH])
		{
			ShowDialog(playerid, DIALOG_SELL_FISH);
		}
		else ShowPlayerMessage(playerid, "~r~No tienes peces que vender.", 3);
	}
	return 1;
}

CheckDrugBlackMarket(playerid)
{
    if (!IsPlayerInRangeOfPoint(playerid, 1.5, 2310.057128, -1789.786865, 1600.751953)) return 1;
    ShowDialog(playerid, DIALOG_DRUG_MARKET);
    return 1;
}

CheckBlackMarketAmmo(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 1.5, 2162.462158, -1169.053222, -16.871662)) return 1;
    ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
    return 1;
}

ShowRangeUser(playerid)
{
	new 
		target_player = GetPlayerCameraTargetPlayer(playerid),
		Float:pos[4];
	
	PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] = target_player;
	GetPlayerPos(target_player, pos[0], pos[1], pos[2]);

	if (IsPlayerInRangeOfPoint(playerid, 1.2, pos[0], pos[1], pos[2]))
	{
		ShowDialog(playerid, DIALOG_RANGE_USER);
	}
	return 1;
}

CALLBACK: RespawnMinerRock(rock_id)
{
	new color_type = GetRockColorType(ROCKS_OBJ[rock_id][r_TYPE]);
	ROCKS_OBJ[rock_id][r_OBJECT_ID] = CreateDynamicObject(ROCKS_OBJ[rock_id][r_MODELID], ROCKS_OBJ[rock_id][r_X], ROCKS_OBJ[rock_id][r_Y], ROCKS_OBJ[rock_id][r_Z], ROCKS_OBJ[rock_id][r_RX], ROCKS_OBJ[rock_id][r_RY], ROCKS_OBJ[rock_id][r_RZ], ROCKS_OBJ[rock_id][r_WORLD], ROCKS_OBJ[rock_id][r_INTERIOR]);
	SetDynamicObjectMaterial(ROCKS_OBJ[rock_id][r_OBJECT_ID], 0, -1, "none", "none", color_type);
	ROCKS_OBJ[rock_id][r_ACTIVATED] = true;
	return 1;
}

CALLBACK: PutPlayerRock(playerid, rock_type)
{
	ResetItemBody(playerid);

	PLAYER_TEMP[playerid][py_ROCK] = true;
	PLAYER_TEMP[playerid][py_ACTUAL_ROCK] = rock_type;

	SetPlayerAttachedObject(playerid, 9, 3930, 1, 0.1760, 0.4369, 0.0000, 0.0000, 0.0000, 30.5999, 0.5240, 0.5149, 0.6189, GetRockColorType(ROCKS_OBJ[rock_type][r_TYPE]), GetRockColorType(ROCKS_OBJ[rock_type][r_TYPE]));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

CALLBACK: UpdateMining(playerid, rock_id)
{
	if (GetPlayerInterior(playerid) == 0)
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][35]);
		return 0;
	}

	new str_text[64];
	PLAYER_TEMP[playerid][py_MINING_PROGRESS] += minrand(1, 5);

	format(str_text, sizeof(str_text), "Picando %s...~n~~r~%d %", GetRockNameType(ROCKS_OBJ[rock_id][r_TYPE]), PLAYER_TEMP[playerid][py_MINING_PROGRESS]);
	ShowPlayerMessage(playerid, str_text, 2);
	ApplyAnimation(playerid, "SWORD", "SWORD_4", 4.1, true, false, false, false, 0, true);

	if (PLAYER_TEMP[playerid][py_MINING_PROGRESS] > 98)
	{
		ShowPlayerMessage(playerid, "Ve a una ~r~procesadora~w~ para entregar el material.", 4);

		ClearAnimations(playerid);
		TogglePlayerControllableEx(playerid, true);

		PLAYER_TEMP[playerid][py_MINING_PROGRESS] = 0;
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][35]);

		SetTimerEx("PutPlayerRock", 800, false, "id", playerid, ROCKS_OBJ[rock_id][r_TYPE]);
		ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.1, false, false, false, false, 0, false);

		DestroyDynamicObject(ROCKS_OBJ[rock_id][r_OBJECT_ID]);
		SetTimerEx("RespawnMinerRock", 30000, false, "i", rock_id);
	}
	return 1;
}

StartMining(playerid, rock_id)
{
	new p_interior = GetPlayerInterior(playerid);
	if (p_interior < 25 || p_interior > 27) return 0;

	new str_text[64];
	ApplyAnimation(playerid, "SWORD", "SWORD_4", 4.1, true, false, false, false, 0, true);
	
	format(str_text, sizeof(str_text), "Picando %s...~n~~r~0 %", GetRockNameType(ROCKS_OBJ[rock_id][r_TYPE]));
	ShowPlayerMessage(playerid, str_text, 2);

	TogglePlayerControllableEx(playerid, false);
	
	ROCKS_OBJ[rock_id][r_ACTIVATED] = false;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][35]);
	PLAYER_TEMP[playerid][py_TIMERS][35] = SetTimerEx("UpdateMining", GetRockMiningTime(ROCKS_OBJ[rock_id][r_TYPE]), true, "ii", playerid, rock_id);
	ApplyAnimation(playerid, "SWORD", "SWORD_4", 4.1, true, false, false, false, 0, true);
	return 1;
}

CheckCraneSiteRequest(playerid)
{
    if (IsPlayerInRangeOfPoint(playerid, 1.0, 1795.293823, -1407.773681, 2770.660156)) 
    {
        ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
    }
    return 1;
}

ShellingThings(playerid)
{
    if (IsPlayerInRangeOfPoint(playerid, 1.0, 1796.071655, -1414.565307, 2770.660156)) 
    {
        if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~Necesitas tener una cuenta bancaria para poder realizar estas operaciones.", 3);
        {
            ShowDialog(playerid, DIALOG_NOTARY);
        }
    }
    return 1;
}

CheckFoodShop(playerid)
{
	if (PLAYER_TEMP[playerid][py_INTERIOR_INDEX] == -1) return 0;
	if (ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return 0;


	new index = GetFastFoodLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if (index == -1) return 0;

	if (!IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[index][fast_food_X], Fast_Food_Positions[index][fast_food_Y], Fast_Food_Positions[index][fast_food_Z])) return 0;

	switch(Fast_Food_Positions[index][fast_food_INTERIOR_TYPE])
	{
		case INTERIOR_BURGER_SHOT: ShowDialog(playerid, DIALOG_FOOD_BURGER);
		case INTERIOR_PIZZA: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
		case INTERIOR_CLUCKIN_BELL: ShowDialog(playerid, DIALOG_FOOD_CLUCKIN);
	}
	return 1;
}

CheckClothShop(playerid)
{
	if (PLAYER_TEMP[playerid][py_INTERIOR_INDEX] == -1) return 0;
	if (ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return 0;

	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if (shop == -1) return 0;

	if (!IsPlayerInRangeOfPoint(playerid, 2.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return 0;

	ShowDialog(playerid, DIALOG_CLOTH_STORE);
	return 1;
}

CheckAndExecuteHospitalShop(playerid)
{
	if (GetPlayerInterior(playerid) > 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, -198.002197, -1762.759643, 675.768737))
		{
			ShowDialog(playerid, DIALOG_HOSPITAL_SHOP);
		}
	}
	return 1;
}

CheckShopAndExecute(playerid)
{
	if (GetPlayerInterior(playerid) > 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875))
		{
			ShowDialog(playerid, DIALOG_247_LIST);
		}
	}
	return 0;
}

CALLBACK: StopDrugEffect(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    new p_int = GetPlayerInterior(playerid);
	if (p_int != 25 || p_int != 26 || p_int != 27)
	{
    	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
    }

    SetPlayerWeather(playerid, SERVER_WEATHER);
    return 1;
}

CheckClubBar(playerid)
{
	if (PLAYER_TEMP[playerid][py_INTERIOR_INDEX] != -1)
	{
		if (ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 496.589172,-76.033905,998.757812))
			{
				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE)
				{
					if (CHARACTER_INFO[playerid][ch_CASH] <= 50) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente, necesitas 50$.", 2);

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
					GivePlayerCash(playerid, -50, false);
				}
				return 1;
			}
		}
	}
	return 1;
}

CheckPoliceEquipeSite(playerid)
{
	if (PLAYER_WORKS[playerid][WORK_POLICE])
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, 1867.665283, -1712.853515, 5216.709960))
		{
			ShowDialog(playerid, DIALOG_POLICE_SHOP);
		}
	}
	return 1;
}

CheckMafiaEquipeSite(playerid)
{
	if (PLAYER_WORKS[playerid][WORK_MAFIA])
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.3, 726.2478, -1276.3830, 13.5662))
		{
			ShowDialog(playerid, DIALOG_POLICE_SHOP);
		}
	}

	if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.3, 3855.066162, -1290.975585, 7547.983398))
		{
			ShowDialog(playerid, DIALOG_POLICE_SHOP);
		}
	}
	return 1;
}

CheckPlayerDoors(playerid)
{
	new vehicleid = INVALID_VEHICLE_ID;
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		vehicleid = GetPlayerVehicleID(playerid);
	}
	else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		vehicleid = GetPlayerCameraTargetVehicle(playerid);
	}

	if (vehicleid == INVALID_VEHICLE_ID) return 0;
	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return 0;
	if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 0;

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] == 0)
	{
	    CloseVehicle(playerid, vehicleid);
	    return 0;
    }
    else
    {
	    OpenVehicle(playerid, vehicleid);
	}
	return 1;
}

OpenVehicle(playerid, vehicleid)
{
	if (!ACCOUNT_INFO[playerid][ac_SU] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
	{
		ShowPlayerMessage(playerid, "Este vehículo está bloqueado, desbloquéalo siendo ~p~VIP", 3);
		return 1;
	}

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	UpdateVehicleParams(vehicleid);
	SetPlayerChatBubble(playerid, "\n\n\n\n* Ha abierto las puertas de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);

	new str_text[64];
	format(str_text, sizeof(str_text), "~n~~n~%s ~g~destrabado", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
	ShowPlayerMessage(playerid, str_text, 1);

	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	return 1;
}

CloseVehicle(playerid, vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	SetPlayerChatBubble(playerid, "\n\n\n\n* Ha cerrado las puertas de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);

	new str_text[64];
	format(str_text, sizeof(str_text), "~n~~n~%s ~r~trabado", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
	ShowPlayerMessage(playerid, str_text, 1);

	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	return 1;
}

SetEngineAction(playerid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 481 || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 509 || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 510)
		{
			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
        	{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(vehicleid);
			}
			return 1;
		}

        if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
        {
            if (TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return ShowPlayerMessage(playerid, "~r~Debes esperar a que se termine de cargar el camión.", 3);
            if (TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return ShowPlayerMessage(playerid, "~r~Debes esperar a que se termine de descargar el camión.", 3);
        }
        
        if (PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE]) return ShowPlayerMessage(playerid, "~r~Primero debes terminar de hacer lo que estés haciendo.", 2);
        
        KillTimer(PLAYER_TEMP[playerid][py_TIMERS][7]);
        if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
        {
            PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
            GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
            UpdateVehicleParams(vehicleid);
            
            if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) ShowPlayerMessage(playerid, "Vehículo ~r~detenido", 2);
            else ShowPlayerMessage(playerid, "Vehículo ~r~detenido", 2);
        }
        else
        {
        	ShowPlayerMessage(playerid, "Encendiendo...", 2);
            PLAYER_TEMP[playerid][py_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
        }
    }

    if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z);
	    ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
	}
    return 1;
}

public OnPlayerSpawn(playerid)
{
	printf("OnPlayerSpawn",playerid); // debug juju
	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_OCCUPIED) // Primer spawn
	{
		PLAYER_TEMP[playerid][py_TIME_PLAYING] = gettime();
		PLAYER_TEMP[playerid][py_USER_LOGGED] = true;

		if (PLAYER_CREW[playerid][player_crew_VALID]) SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);

		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				if (!PLAYER_TEMP[playerid][py_NEW_USER])
				{
					KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
					PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
				}
				else SetPlayerVirtualWorld(playerid, playerid);
			}
			case ROLEPLAY_STATE_JAIL:
			{
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if (CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
				PLAYER_TEMP[playerid][py_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME]);
				//SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te quedan {62d743}%s"COL_WHITE" minutos de condena.", TimeConvert(time));
				
				new str_text[128];
				format(str_text, sizeof(str_text), "~r~Encarcelado~w~~n~%s minutos.", TimeConvert(time));
				PLAYER_TEMP[playerid][py_JAIL_NOT] = ShowPlayerNotification(playerid, str_text, 1);

				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][39]);
				PLAYER_TEMP[playerid][py_TIMERS][39] = SetTimerEx("UpdatePrisionTime", 1000, true, "i", playerid);

    			ac_ResetPlayerWeapons(playerid);
    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    			TogglePlayerControllableEx(playerid, false);
    			DeleteIlegalInv(playerid);
    			TogglePlayerControllable(playerid, 1);
    			SetPlayerColorEx(playerid, PLAYER_COLOR);

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
				PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{
				CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300;

				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if (CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
				PLAYER_TEMP[playerid][py_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME]);
				//SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te quedan {62d743}%s"COL_WHITE" minutos de condena.", TimeConvert(time));

				new str_text[128];
				format(str_text, sizeof(str_text), "~r~Encarcelado~w~~n~%s minutos.", TimeConvert(time));
				PLAYER_TEMP[playerid][py_JAIL_NOT] = ShowPlayerNotification(playerid, str_text, 1);

				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][39]);
				PLAYER_TEMP[playerid][py_TIMERS][39] = SetTimerEx("UpdatePrisionTime", 900, true, "i", playerid);

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
				PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if (index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = NewUserPos[0][0];
					CHARACTER_INFO[playerid][ch_POS][1] = NewUserPos[0][1];
					CHARACTER_INFO[playerid][ch_POS][2] = NewUserPos[0][2];
					CHARACTER_INFO[playerid][ch_ANGLE] = NewUserPos[0][3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;

					SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
				}
				else
				{
					if (PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];

						SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
					}
				}

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
				PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				PLAYER_TEMP[playerid][py_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = false;
				PLAYER_TEMP[playerid][py_GAME_STATE] = GAME_STATE_DEAD;

				TogglePlayerControllableEx(playerid, true);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 2);
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] = 35;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][4]);
				PLAYER_TEMP[playerid][py_TIMERS][4] = SetTimerEx("HealthUp", 3000, false, "i", playerid);

				DeleteIlegalInv(playerid);

				new random_pos = minrand(0, 12); 
				PLAYER_TEMP[playerid][py_HP_POS_DATA][0] = Hp_Spawn_Interior_Pos[random_pos][0];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][1] = Hp_Spawn_Interior_Pos[random_pos][1];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][2] = Hp_Spawn_Interior_Pos[random_pos][2];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][3] = Hp_Spawn_Interior_Pos[random_pos][3];

				SetPlayerPosEx(playerid, Hp_Spawn_Interior_Pos[random_pos][0], Hp_Spawn_Interior_Pos[random_pos][1], Hp_Spawn_Interior_Pos[random_pos][2], Hp_Spawn_Interior_Pos[random_pos][3], 3, 2);
				TogglePlayerControllableEx(playerid, false);
				ApplyAnimation(playerid,"INT_HOUSE","BED_In_R", 4.1, 0, 0, 0, 1, 0);
				ShowPlayerNotification(playerid, "Fuiste ingresado en el centro médico más cercano.", 3);
			}
			case ROLEPLAY_STATE_CRACK:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
				PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][16]);
				PLAYER_TEMP[playerid][py_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);

				PLAYER_TEMP[playerid][py_INJURED_POS][0] = CHARACTER_INFO[playerid][ch_POS][0];
				PLAYER_TEMP[playerid][py_INJURED_POS][1] = CHARACTER_INFO[playerid][ch_POS][1];
				PLAYER_TEMP[playerid][py_INJURED_POS][2] = CHARACTER_INFO[playerid][ch_POS][2];
				PLAYER_TEMP[playerid][py_INJURED_POS][3] = CHARACTER_INFO[playerid][ch_ANGLE];

				TogglePlayerControllableEx(playerid, false);
				SetPlayerColorEx(playerid, PLAYER_COLOR);
			}
		}

		new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
		if (ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
		{
			if (ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			if (ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;

			PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP] = gettime() * 1000;
			PLAYER_TEMP[playerid][py_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		}
		else NextLevel(playerid);

		if (PLAYER_PHONE[playerid][player_phone_VALID])
		{
			new DBResult:Result, DB_Query[220];
			format(DB_Query, sizeof(DB_Query),
				"\
					SELECT COUNT() FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `OFFLINE` = '1' ORDER BY `DATE` DESC LIMIT 10;\
					UPDATE `PHONE_MESSAGES` SET `OFFLINE` = '0' WHERE `TO` = '%d';\
				",
			PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER]);

			Result = db_query(Database, DB_Query);
			if (db_num_rows(Result))
			{
				new new_messages = db_get_field_int(Result, 0);
				if (new_messages > 0)
				{
					new str_text[128];
					format(str_text, sizeof(str_text), "Tienes %d SMS sin leer", new_messages);
					ShowPlayerNotification(playerid, str_text, 4);
				}
			}
			db_free_result(Result);
		}
	}
	else if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if (!PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL])
			{
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 2);
				PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = false;
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] = 35;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][4]);
				PLAYER_TEMP[playerid][py_TIMERS][4] = SetTimerEx("HealthUp", 3000, false, "i", playerid);

				DeleteIlegalInv(playerid);

				ClearPlayerChatBox(playerid);
				if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					ShowPlayerNotification(playerid, "Estas en el centro médico más cercano, cuando te recuperes te llevaran a la cárcel.", 3);
					SetPlayerPoliceSearchLevel(playerid, 0);
				}
				else
				{
				    ShowPlayerNotification(playerid, "Fuiste ingresado en el centro médico más cercano.", 3);
				}

				ResetItemBody(playerid);

				new random_pos = minrand(0, 12);
				PLAYER_TEMP[playerid][py_HP_POS_DATA][0] = Hp_Spawn_Interior_Pos[random_pos][0];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][1] = Hp_Spawn_Interior_Pos[random_pos][1];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][2] = Hp_Spawn_Interior_Pos[random_pos][2];
				PLAYER_TEMP[playerid][py_HP_POS_DATA][3] = Hp_Spawn_Interior_Pos[random_pos][3];

				SetPlayerPosEx(playerid, Hp_Spawn_Interior_Pos[random_pos][0], Hp_Spawn_Interior_Pos[random_pos][1], Hp_Spawn_Interior_Pos[random_pos][2], Hp_Spawn_Interior_Pos[random_pos][3], 3, 2);
				TogglePlayerControllableEx(playerid, false);
				ApplyAnimation(playerid,"INT_HOUSE","BED_In_R", 4.1, 0, 0, 0, 1, 0);
			}
		}
		else if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			SetPlayerHud(playerid);
			SetPlayerHealthEx(playerid, 60.0);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
			PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][16]);
			PLAYER_TEMP[playerid][py_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);

			SetPlayerColorEx(playerid, PLAYER_COLOR);
		}

		SetPlayerSkin(playerid, PLAYER_TEMP[playerid][py_SKIN]);
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL])
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
			PLAYER_TEMP[playerid][py_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}

		SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerHud(playerid);
		TogglePlayerControllableEx(playerid, false);
		PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
		SetCameraBehindPlayer(playerid);
		PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}

	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
	SetPlayerWeather(playerid, SERVER_WEATHER);

	PLAYER_TEMP[playerid][py_GAME_STATE] = GAME_STATE_NORMAL;
	SetPlayerSkin(playerid, PLAYER_TEMP[playerid][py_SKIN]);
	SetPlayerToys(playerid);
	ac_SetPlayerArmedWeapon(playerid, 0);
	SetPlayerNormalColor(playerid);
	SetTracingColor(playerid, COLOR_RED);
	
	if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
	{
		SetFirstPerson(playerid, true);
	}

	if (PLAYER_TEMP[playerid][py_WORKING_IN] == WORK_POLICE) SetPlayerColorEx(playerid, 0x6060FF00);

	PLAYER_TEMP[playerid][py_CONTROL] = false;

	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;

	SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
	return 1;
}

Log(const nombre[], const texto[])
{
    new dir[32], File:arc, txt[256];
    new log_D, log_M, log_A;
    new log_Seg, log_Min, log_Hor;

    getdate(log_A, log_M, log_D);
    gettime(log_Hor, log_Min, log_Seg);

    format(dir, sizeof(dir), "/LOGS_FILES/%s.log", nombre);
    format(txt, sizeof(txt), "[%02d/%02d/%d|%02d:%02d:%02d] %s\r\n", log_D, log_M, log_A,
    log_Hor, log_Min, log_Seg, texto);

    if (!fexist(dir))
    arc = fopen(dir, io_write);
    else
    arc = fopen(dir, io_append);
    fwrite(arc, txt);
    fclose(arc);
    return 1;
}

CMD:editmodetestxd(playerid, params[])//xddd
{
	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	PLAYER_TEMP[playerid][py_EDITING_OBJ] = CreateDynamicObject(2738, pos[0] + 0.6, pos[1] + 0.6, pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	EditingMode(playerid, PLAYER_TEMP[playerid][py_EDITING_OBJ]);
	return 1;
}

CMD:stopall(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		StopAudioStreamForPlayer(i);
	}
	return 1;
}

CALLBACK: PurgeAnnounce()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		ShowPlayerNotification(i, "La purga ha comenzado, todo crimen es permitido.", 4);
		SavePlayerNotification(i, "¡Felicidades! Estas participando de la purga anual.");
		SendClientMessage(i, COLOR_RED, "[PURGA]"COL_WHITE" La purga ha iniciado.");
		SendClientMessage(i, COLOR_WHITE, "La purga solo tiene dos reglas: la primera es que durante esta, los funcionarios del gobierno de rango 10 o superior poseen");
		SendClientMessage(i, COLOR_WHITE, "total inmunidad. La segunda, es que el uso de las armas por encima de Clase 4 (por ejemplo, armas de destrucción masiva)");
		SendClientMessage(i, COLOR_WHITE, "están prohibidas, lo que significa que los dispositivos destructivos y materiales explosivos están excluidos de La Purga. Cualquier");
		SendClientMessage(i, COLOR_WHITE, "persona que no siga las reglas de la purga será ejecutado.");
	}	
	return 1;
}

CMD:finpurga(playerid, params[])
{
	SendRconCommand("hostname "SERVER_HOSTNAME"");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		StopAudioStreamForPlayer(i);
		ClearPlayerChatBox(i);
		SendClientMessage(i, COLOR_RED, "[PURGA]"COL_WHITE" La purga ha finalizado.");
	}
	return 1;
}

CMD:purga(playerid, params[])
{
	SendRconCommand("hostname Hyaxe Roleplay | PURGA ACTIVADA");
	SetTimer("PurgeAnnounce", 8000, false);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, "https://cdn.discordapp.com/attachments/648718129077157892/704405119755747368/purga_roleplay.mp3");
		ClearPlayerChatBox(i);
	}
	return 1;
}

CMD:ellokitodela20(playerid, params[])
{
	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '8' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = 8;
	SendClientMessageEx(playerid, COLOR_RED, "Aviso: "COL_WHITE"Ahora tu nivel administrativo es: %d", ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]);
	return 1;
}

CMD:marselobotikin(playerid, params[])
{
	PLAYER_MISC[playerid][MISC_BOTIKIN] = 0;
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	printf("OnPlayerDeat %d %d %d",playerid,killerid,reason); // debug juju
	if (PLAYER_TEMP[playerid][py_KICKED]) return 1;
	if (!PLAYER_TEMP[playerid][py_USER_LOGGED]) return 0;

	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][16]);

	if (!ACCOUNT_INFO[playerid][ac_SU]) SetPlayerArmourEx(playerid, 0.0);

	if (ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_DEATH]);
			if (interval < 50)
			{
				if (!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if (PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			PLAYER_TEMP[playerid][py_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}

	HidePlayerMessage(playerid);

	if (PLAYER_TEMP[playerid][py_NEW_USER])
	{
		PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
		PLAYER_MISC[playerid][MISC_CONFIG_LOWPC] = false;
		PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = true;

		SavePlayerMisc(playerid);
		ApplyAnimation(playerid, "PED", "KO_SPIN_R", 4.1, 1, false, false, false, 0, false);
		PLAYER_TEMP[playerid][py_NEW_USER] = false;
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
	}

	if (PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW])
	{
		if (PLAYER_TEMP[playerid][py_SHOP]) HidePlayerShop(playerid);
		if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM]) HideBankMenu(playerid);
		if (PLAYER_TEMP[playerid][py_PLAYER_IN_INV]) HideInventory(playerid);
		if (PLAYER_TEMP[playerid][py_PLAYER_IN_PHONE]) HidePhone(playerid);
	}

	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
	CHARACTER_INFO[playerid][ch_WORLD] = GetPlayerVirtualWorld(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) EndPlayerJob(playerid, false);
	PLAYER_TEMP[playerid][py_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][py_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][py_PLAYER_IN_INV] = false;
	PLAYER_TEMP[playerid][py_CUFFED] = false;
	PLAYER_TEMP[playerid][py_CUFFING] = false;
	PLAYER_TEMP[playerid][py_PLAYER_WAITING_MP3_HTTP] = false;

	if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if (PLAYER_TEMP[playerid][py_GPS_MAP]) HidePlayerGpsMap(playerid);
	if (PLAYER_TEMP[playerid][py_TUNING_GARAGE_SHOP]) CancelPlayerTuningShop(playerid);

	if (PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE])
	{
		PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], 1591.011352, -2144.425048, 13.554687);
		SetVehicleZAngle(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], 0.0);
	}

	if (PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if (PLAYER_TEMP[playerid][py_TRASH_DRIVER])
			{
				ShowPlayerMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "~r~El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.", 3);
				CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
			}

			if (PLAYER_TEMP[playerid][py_TRASH_PASSENGER])
			{
				ShowPlayerMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "~r~El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.", 3);
				CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
			}
		}
	}

	if (IsPlayerConnected(killerid) && CHARACTER_INFO[killerid][ch_STATE] == ROLEPLAY_STATE_NORMAL && CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		new 
			str_victim[164],
			str_killer[64],
			gunname[32],
			Float:pos[4];

		format(str_killer, sizeof str_killer, "Heriste a ~y~%s", ACCOUNT_INFO[playerid][ac_NAME]);
		ShowPlayerMessage(killerid, str_killer, 3);

		GetWeaponName(reason, gunname, sizeof(gunname));

		GetPlayerPos(killerid, pos[0], pos[1], pos[2]);

		format(str_victim, sizeof(str_victim), "%s te hirió con %s desde %.1f metros.", ACCOUNT_INFO[killerid][ac_NAME], gunname, GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]));
		ShowPlayerNotification(playerid, str_victim, 4);
		SavePlayerNotification(playerid, str_victim);

		format(str_victim, sizeof(str_victim), "[KILL] %s hirió a %s con %s desde %.1f metros.", ACCOUNT_INFO[killerid][ac_NAME], ACCOUNT_INFO[playerid][ac_NAME], gunname, GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]));
		SendMessageToAdmins(COLOR_ANTICHEAT, str_victim);

		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerPosEx(playerid, pos[0], pos[1], pos[2] + 1, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		new p_interior = GetPlayerInterior(playerid);

		if (p_interior == 25 || p_interior == 26 || p_interior == 27)
		{
			SendClientMessage(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuieste expulsado por matar a alguien dentro de minero.");
			KickEx(playerid, 500);
		}
	}

	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
		PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = true;
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME];
		if (CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
		PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, PLAYER_TEMP[playerid][py_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];
	}
	else
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		{
			if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) PLAYER_TEMP[playerid][py_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			if (PLAYER_TEMP[playerid][py_HOSPITAL] == -1) PLAYER_TEMP[playerid][py_HOSPITAL] = 1;
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
			PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = false;
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][16]);
			SetSpawnInfo(playerid, NO_TEAM, PLAYER_TEMP[playerid][py_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_CRACK;

			GetPlayerPos(playerid, PLAYER_TEMP[playerid][py_INJURED_POS][0], PLAYER_TEMP[playerid][py_INJURED_POS][1], PLAYER_TEMP[playerid][py_INJURED_POS][2]);
			GetPlayerFacingAngle(playerid, PLAYER_TEMP[playerid][py_INJURED_POS][3]);

			SetSpawnInfo(playerid, NO_TEAM, PLAYER_TEMP[playerid][py_SKIN], PLAYER_TEMP[playerid][py_INJURED_POS][0], PLAYER_TEMP[playerid][py_INJURED_POS][1], PLAYER_TEMP[playerid][py_INJURED_POS][2], PLAYER_TEMP[playerid][py_INJURED_POS][3], 0, 0, 0, 0, 0, 0);
			SetPlayerPos(playerid,PLAYER_TEMP[playerid][py_INJURED_POS][0], PLAYER_TEMP[playerid][py_INJURED_POS][1], PLAYER_TEMP[playerid][py_INJURED_POS][2]+1);
		}
	}

	PLAYER_TEMP[playerid][py_IN_MARKET] = false;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][41]);

	PLAYER_TEMP[playerid][py_GAME_STATE] = GAME_STATE_DEAD;
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	printf("OnPlayerRequestClass %d %d",playerid, classid); // debug juju
	SetPlayerColor(playerid, PLAYER_COLOR);

	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		if (!PLAYER_TEMP[playerid][py_USER_VALID_NAME] || PLAYER_TEMP[playerid][py_KICKED]) return 0;

		TogglePlayerSpectatingEx(playerid, true);

		if (PLAYER_TEMP[playerid][py_USER_EXIT])
		{
			// Usuario registrado
			if (ACCOUNT_INFO[playerid][ac_ID] == 0 || strcmp(PLAYER_TEMP[playerid][py_NAME], ACCOUNT_INFO[playerid][ac_NAME], false)) // No coincide
			{
				KickEx(playerid, 100);
				return 1;
			}

			if (strcmp(PLAYER_TEMP[playerid][py_IP], ACCOUNT_INFO[playerid][ac_IP], false)) // La IP actual no es la misma IP de la última conexión
			{
				new ip_change[264];
				format(ip_change, sizeof(ip_change), "%s: %s > %s", PLAYER_TEMP[playerid][py_NAME], ACCOUNT_INFO[playerid][ac_IP], PLAYER_TEMP[playerid][py_IP]);
				Log("address", ip_change);

				ShowPlayerMessage(playerid, "~r~Tu dirección IP ha cambiado desde tu última conexión.", 5);
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][py_IP]);
			}

			ShowDialog(playerid, DIALOG_LOGIN);
            SetIntroCamera(playerid);
		}
		else
		{
			SetIntroCamera(playerid);
			ShowDialog(playerid, DIALOG_REGISTER);
		}
	}
	else if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_DEAD) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, PLAYER_TEMP[playerid][py_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}

	PLAYER_TEMP[playerid][py_GAME_STATE] = GAME_STATE_OCCUPIED;
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	printf("OnPlayerrequestSpawn %d",playerid); // debug juju
	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);
    return 0;
}

CreateGraffitis()
{
	for(new i = 0; i < sizeof GRAFFITIS_OBJ; i ++)
	{
		GRAFFITIS_OBJ[i][g_ID] = CreateDynamicObject(GRAFFITIS_OBJ[i][g_MODELID], GRAFFITIS_OBJ[i][g_X], GRAFFITIS_OBJ[i][g_Y], GRAFFITIS_OBJ[i][g_Z], GRAFFITIS_OBJ[i][g_RX], GRAFFITIS_OBJ[i][g_RY], GRAFFITIS_OBJ[i][g_RZ], 0, 0);
		SetDynamicObjectMaterialText(GRAFFITIS_OBJ[i][g_ID], 0, GRAFFITIS_OBJ[i][g_ZONE_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[i][g_FONT], 60, 0, 0xFFdc3939, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	
		new DBResult:Result, DB_Query[140];
		format(DB_Query, sizeof DB_Query, "SELECT * FROM `GRAFFITIS` WHERE `GRAFF_ID` = '%d'", i);
		Result = db_query(Database, DB_Query);

		if (db_num_rows(Result) == 0) printf("[ERROR] No hay registro para el graffiti %d", i);
		else
		{
			for(new x; x < db_num_rows(Result); x++ )
			{
				new 
					crew_id,
					graff;

				crew_id = getCrewIndexWithId(db_get_field_assoc_int(Result, "ID_CREW"));
				graff = db_get_field_assoc_int(Result, "GRAFF_ID");

				if (crew_id > 0)
				{
					if (CREW_INFO[crew_id][crew_VALID])
					{
						new CrewColorGraffiti_ARGB = hy_RGBAToARGB(CREW_INFO[crew_id][crew_COLOR]);
						SetDynamicObjectMaterialText(GRAFFITIS_OBJ[graff][g_ID], 0, CREW_INFO[crew_id][crew_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[graff][g_FONT], 60, 0, CrewColorGraffiti_ARGB, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
					}
				}
				db_next_row(Result);
			}
			db_free_result(Result);
		}
	}
	return 1;
}

GetRockColorType(rock_type)
{
	new rock_color = 0xFFFFFFFF;

	switch(rock_type)
	{
		case 0: rock_color = 0xFF000000; // Carbon
		case 1: rock_color = 0xFFffff00; // Azufre
		case 2: rock_color = 0xFFcfcfcf; // Hierro
		case 3: rock_color = 0xFFffae00; // Jaspe
		case 4: rock_color = 0xFFff0000; // Ruby
		case 5: rock_color = 0xFF59ff00; // Esmeralda
		case 6: rock_color = 0xFFf5d80b; // Oro
		case 7: rock_color = 0xFFe30bf5; // Cuarzo
		case 8: rock_color = 0xFF0bf5ea; // Diamante
		case 9: rock_color = 0xFF0bf5ea; // Bismuto
		case 10: rock_color = 0xFF0042ff; // Lapislázuli
		case 11: rock_color = 0xFFeceff8; // Platino
	}
	return rock_color;
}

PayPlayerMiner(playerid)
{
	new 
		pay = 50,
		str_text[64]
	;

	switch(PLAYER_TEMP[playerid][py_ACTUAL_ROCK])
	{
		case 0: pay = 80;
		case 1: pay = 76;
		case 2: pay = 95;
		case 3: pay = 100;
		case 4: pay = 200;
		case 5: pay = 800;
		case 6: pay = 450;
		case 7: pay = 600;
		case 8: pay = 950;
		case 9: pay = 350;
		case 10: pay = 480;
		case 11: pay = 860;	
	}

	if (ACCOUNT_INFO[playerid][ac_SU]) pay += minrand(200, 500);

	GivePlayerCash(playerid, pay);
	format(str_text, sizeof(str_text), "~g~+%d$", pay);
	
	PLAYER_SKILLS[playerid][WORK_MINER] ++;
	SavePlayerSkills(playerid);

	GameTextForPlayer(playerid, str_text, 5000, 1);
	return 1;
}

DropPlayerRock(playerid, place_id)
{
	for(new i = 0; i != sizeof ROCK_PROCESSOR; i ++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, ROCK_PROCESSOR[i][rp_X], ROCK_PROCESSOR[i][rp_Y], ROCK_PROCESSOR[i][rp_Z]))
		{
			new obj_id = CreateDynamicObject(
												3930,
												(DROP_ROCK_POS[ place_id ][mp_X] + 0.1760),
												(DROP_ROCK_POS[ place_id ][mp_Y] + 0.4369),
												(DROP_ROCK_POS[ place_id ][mp_Z] - 0.3),
												0.0000,
												0.0000,
												30.5999,
												GetPlayerVirtualWorld(playerid),
												GetPlayerInterior(playerid)
											);

			SetDynamicObjectMaterial(obj_id, 0, -1, "none", "none", GetRockColorType(PLAYER_TEMP[playerid][py_ACTUAL_ROCK]));

			MoveDynamicObject(
								obj_id,
								ROCK_PROCESSOR[i][rp_X],
								ROCK_PROCESSOR[i][rp_Y],
								ROCK_PROCESSOR[i][rp_Z] - 1.0,
								1.8,
								0.0000,
								0.0000,
								30.5999 + 190.0
							);

			SetTimerEx("DeleteDroppedRock", 3000, false, "i", obj_id);
			break;
		}
	}
	return 1;
}

CALLBACK: DeleteDroppedRock(obj_id)
{
	DestroyDynamicObject(obj_id);
	return 1;
}

GetRockMiningTime(rock_type)
{
	switch(rock_type)
	{
		case 0: return 990;
		case 1: return 900;
		case 2: return 1050;
		case 3: return 1000;
		case 4: return 800;
		case 5: return 1500;
		case 6: return 850;
		case 7: return 1000;
		case 8: return 1500;
		case 9: return 1300;
		case 10: return 500;
		case 11: return 800;
	}
	return 1000;
}

GetRockNameType(rock_type)
{
	new rock_name[32];

	switch(rock_type)
	{
		case 0: rock_name = "Carbón";
		case 1: rock_name = "Azufre";
		case 2: rock_name = "Hierro";
		case 3: rock_name = "Jaspe";
		case 4: rock_name = "Ruby";
		case 5: rock_name = "Esmeralda";
		case 6: rock_name = "Oro";
		case 7: rock_name = "Cuarzo";
		case 8: rock_name = "Diamante";
		case 9: rock_name = "Bismuto";
		case 10: rock_name = "Lapislázuli";
		case 11: rock_name = "Platino";
	}
	return rock_name;
}

CreateMinerRocks()
{
	for(new i = 0; i < sizeof ROCKS_OBJ; i ++)
	{
		ROCKS_OBJ[i][r_OBJECT_ID] = CreateDynamicObject(ROCKS_OBJ[i][r_MODELID], ROCKS_OBJ[i][r_X], ROCKS_OBJ[i][r_Y], ROCKS_OBJ[i][r_Z], ROCKS_OBJ[i][r_RX], ROCKS_OBJ[i][r_RY], ROCKS_OBJ[i][r_RZ], ROCKS_OBJ[i][r_WORLD], ROCKS_OBJ[i][r_INTERIOR]);
		new color_type = GetRockColorType(ROCKS_OBJ[i][r_TYPE]);

		// Test
		//new str_text[32];
		//format(str_text, sizeof(str_text), "{ffffff}%s", GetRockNameType(ROCKS_OBJ[i][r_TYPE]));

		//CreateDynamic3DTextLabel(str_text, 0xF7F7F700, ROCKS_OBJ[i][r_X], ROCKS_OBJ[i][r_Y], ROCKS_OBJ[i][r_Z] + 1.0, 10.0, .testlos = true, .worldid = ROCKS_OBJ[i][r_WORLD], .interiorid = ROCKS_OBJ[i][r_INTERIOR]);

		SetDynamicObjectMaterial(ROCKS_OBJ[i][r_OBJECT_ID], 0, -1, "none", "none", color_type);
		ROCKS_OBJ[i][r_ACTIVATED] = true;
	}
	return 1;
}

CALLBACK: FirstGraffitiAnnounce()
{
	SendGraffitiNotification("En 15 minutos se iniciara una disputa.");
	SendDiscordWebhook("En 15 minutos se iniciara una disputa.", 2);
	SetTimer("TwoGraffitiAnnounce", 900000, false);
	return 1;
}

CALLBACK: TwoGraffitiAnnounce()
{
	SendGraffitiNotification("En 5 minutos se iniciara una disputa.");
	SendDiscordWebhook("En 5 minutos se iniciara una disputa.", 2);
	SetTimer("InitRandomGraffiti", 300000, false);
	SetTimer("FinalGraffitiAnnounce", 240000, false);
	return 1;
}

CALLBACK: FinalGraffitiAnnounce()
{
	SendGraffitiNotification("En 60 segundos se iniciara una disputa.");
	SendDiscordWebhook("En 60 segundos se iniciara una disputa.", 2);
	return 1;
}

CALLBACK: CancelGraffiti()
{
	KillTimer(GraffitiCancelTimer);

	for(new i = 0; i < sizeof GRAFFITIS_OBJ; i ++)
	{
		if (GRAFFITIS_OBJ[i][g_ACTIVATED] == true)
		{
			new str_text[145];

			GRAFFITIS_OBJ[i][g_ACTIVATED] = false;
			SetTimer("FirstGraffitiAnnounce", 1500000, false);

			format(str_text, sizeof(str_text), "Nadie ha ganado el graffiti en %s.", GRAFFITIS_OBJ[i][g_ZONE_NAME]);
			SendGraffitiNotification(str_text);
			SendDiscordWebhook(str_text, 2);

			format(str_text, sizeof(str_text), "[GRAFFITI] Nadie ha ganado el graffiti en %s.", GRAFFITIS_OBJ[i][g_ZONE_NAME]);
			SendMessageToAdmins(COLOR_ANTICHEAT, str_text);
		}
	}

	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if (IsPlayerConnected(x))
		{
			if (PLAYER_CREW[x][player_crew_VALID])
			{
				CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] = 0;
				CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_IN_GRAFFITI] = false;
			}
		}
	}
	return 1;
}

InitBlackMarket(market_id)
{
	SetMarketTextdraw();

	for(new i = 0; i < sizeof BLACK_MARKET_OBJ; i ++)
	{
		if (BLACK_MARKET_OBJ[i][bm_ACTIVATED] == true)
		{
			BLACK_MARKET_OBJ[i][bm_ACTIVATED] = false;
		}
	}

	new str_text[128];

	MarketGetTime = gettime();
	BLACK_MARKET_OBJ[market_id][bm_ACTIVATED] = true;

	format(str_text, sizeof(str_text), "   ~w~Mercado de %s", BLACK_MARKET_OBJ[market_id][bm_ZONE_NAME]);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], -1);
	TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], TextToSpanish("¡La disputa comenzó! Nadie ha llegado todavía."));
	TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][0], TextToSpanish(str_text));
	TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][2], "hud:radar_locosyndicate");

	format(str_text, sizeof(str_text), "[MERCADO] Mercado en %s.", BLACK_MARKET_OBJ[market_id][bm_ZONE_NAME]);
    SendMessageToAdmins(COLOR_ANTICHEAT, str_text);

    format(str_text, 145, "Mercado en %s.", BLACK_MARKET_OBJ[market_id][bm_ZONE_NAME]);
    SendDiscordWebhook(str_text, 3);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				CREW_INFO[ PLAYER_CREW[i][player_crew_INDEX] ][crew_IN_GRAFFITI] = false;

                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][0]);
                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][1]);
                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][2]);
				SetPlayerMapIcon(i, 0, BLACK_MARKET_OBJ[market_id][bm_EXTERIOR_X], BLACK_MARKET_OBJ[market_id][bm_EXTERIOR_Y], BLACK_MARKET_OBJ[market_id][bm_EXTERIOR_Z], 23, 0, MAPICON_GLOBAL);
			}
		}
	}
	return 1;
}

CALLBACK: InitRandomGraffiti()
{
	new graff_id = minrand(0, sizeof(GRAFFITIS_OBJ));
		//bm_id = minrand(0, sizeof(BLACK_MARKET_OBJ));

	ResetGraffitiTextdraw();

	for(new i = 0; i < sizeof GRAFFITIS_OBJ; i ++)
	{
		if (GRAFFITIS_OBJ[i][g_ACTIVATED] == true)
		{
			GRAFFITIS_OBJ[i][g_ACTIVATED] = false;
		}
	}

	GraffitiGetTime = gettime();

	new str_text[128];

	GRAFFITIS_OBJ[graff_id][g_ACTIVATED] = true;
	GraffitiCancelTimer = SetTimer("CancelGraffiti", 1200000, false);

	format(str_text, sizeof(str_text), "   ~w~Graffiti en %s", GRAFFITIS_OBJ[graff_id][g_ZONE_NAME]);

	new str[145];
	format(str, 145, "[GRAFFITI] Graffiti en %s.", GRAFFITIS_OBJ[graff_id][g_ZONE_NAME]);
    SendMessageToAdmins(COLOR_ANTICHEAT, str);

    format(str, 145, "Graffiti en %s.", GRAFFITIS_OBJ[graff_id][g_ZONE_NAME]);
    SendDiscordWebhook(str, 2);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				CREW_INFO[ PLAYER_CREW[i][player_crew_INDEX] ][crew_IN_GRAFFITI] = false;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], -1);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], TextToSpanish("¡La disputa comenzó! Nadie ha pintado todavía."));
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][0], TextToSpanish(str_text));
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][2], "hud:radar_spray");
                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][0]);
                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][1]);
                TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][2]);
				SetPlayerMapIcon(i, 0, GRAFFITIS_OBJ[graff_id][g_X], GRAFFITIS_OBJ[graff_id][g_Y], GRAFFITIS_OBJ[graff_id][g_Z], 63, 0, MAPICON_GLOBAL);
			}
		}
	}
	return 1;
}

CMD:randomgraffiti(playerid, params[])
{
	SetTimer("InitRandomGraffiti", 100, 0);
	return 1;
}

CMD:initmarket(playerid, params[])
{
	new id;
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /initmarket <id>");

	InitBlackMarket(id);
	return 1;
}

CMD:gmx(playerid, params[])
{
	SendRconCommand("gmx");
	return 1;
}

CMD:closeserver(playerid, params[])
{
	SendRconCommand("exit");
	return 1;
}

CALLBACK: GiveAutoGift()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				GivePlayerCash(i, 20000, false);
				ShowPlayerMessage(i, "~r~[REGALO]~w~ Te han dado 20.000$", 4);
			}
		}
	}
	return 1;
}

public OnGameModeInit()
{
	printf("ongamemodeini"); // debug juju
	sv_init(6000, SV_FREQUENCY_HIGH, SV_VOICE_RATE_60MS, 40.0, 2.0, 2.0);

    SetWeaponDamage(WEAPON_SNIPER, DAMAGE_TYPE_RANGE, 7.0, 10.0, 25.0, 40.0, 30.0); //sniper
    SetWeaponDamage(WEAPON_VEHICLE, DAMAGE_TYPE_RANGE, 50.0, 10.0, 50.0, 40.0, 50.0); //vehiculo
    SetWeaponDamage(WEAPON_RIFLE, DAMAGE_TYPE_RANGE, 35.0, 30.0, 25.0, 320.0, 15.0); //rifle
    SetWeaponDamage(WEAPON_COLT45, DAMAGE_TYPE_RANGE, 6.0, 20.0, 3.0, 40.0, 2.0); //colt
    SetWeaponDamage(WEAPON_SILENCED, DAMAGE_TYPE_RANGE, 0.1, 20.0, 0.1, 40.0, 0.1); //silenciada
    SetWeaponDamage(WEAPON_DEAGLE, DAMAGE_TYPE_RANGE, 20.0, 15.0, 10.0, 40.0, 8.0); //dk
    SetWeaponDamage(WEAPON_SHOTGUN, DAMAGE_TYPE_RANGE, 2.0, 5.0, 4.0, 60.0, 2.0); //escopeta
    SetWeaponDamage(WEAPON_SHOTGSPA, DAMAGE_TYPE_RANGE, 0.0, 5.0, 0.0, 40.0, 0.0); //edc
    SetWeaponDamage(WEAPON_M4, DAMAGE_TYPE_RANGE, 15.0, 20.0, 15.0, 80.0, 15.0); //m4
    SetWeaponDamage(WEAPON_SAWEDOFF, DAMAGE_TYPE_RANGE, 2.5, 10.0, 1.5, 40.0, 1.0);//escopeta recortada
    SetWeaponDamage(WEAPON_AK47, DAMAGE_TYPE_RANGE, 9.0, 20.0, 1.5, 80.0, 1.0); //ak 47
    SetWeaponDamage(WEAPON_SPRAYCAN, DAMAGE_TYPE_RANGE, 0.2, 20.0, 0.2, 40.0, 0.2); //spray
    SetWeaponDamage(WEAPON_FIREEXTINGUISHER, DAMAGE_TYPE_RANGE, 0.2, 20.0, 0.2, 40.0, 0.2); //extiguidor
    SetWeaponDamage(WEAPON_CHAINSAW, DAMAGE_TYPE_RANGE, 2.0, 20.0, 2.0, 40.0, 2.0); //motosierra
    SetWeaponDamage(WEAPON_UZI, DAMAGE_TYPE_RANGE, 9.0, 20.0, 9.0, 60.0, 7.0); //uzi
    SetWeaponDamage(WEAPON_TEC9, DAMAGE_TYPE_RANGE, 10.0, 20.0, 10.0, 60.0, 7.0); //tec9
    SetWeaponDamage(WEAPON_MP5, DAMAGE_TYPE_RANGE, 12.0, 20.0, 10.0, 40.0, 7.0); //mp5
    SetWeaponDamage(WEAPON_KATANA, DAMAGE_TYPE_RANGE, 40.0, 20.0, 40.0, 20.0, 40.0); //katana

	ConnectDatabase();

	UsePlayerPedAnims();
	DisableInteriorEnterExits();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	SetNameTagDrawDistance(25.0);
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	FormatDialogStrings();

	SanAndreas();

	LoadServerInfo();
	UpdateEconomy();
	CreateGraffitis();
	CreateMinerRocks();

	SetTimer("UpdateWantedLevelMark", 30000, true);
	SetTimer("GiveAutoGift", 300000, false);
	SetTimer("FirstGraffitiAnnounce", 1500000, false);
	

	GraffitiGetTime = gettime();
	MarketGetTime = gettime();
	
    Log("status", "Servidor iniciado.");
    SendDiscordWebhook(":fire: Servidor iniciado.", 1);
    ServerInitTime = gettime();
    return 1;
}

FormatDialogStrings()
{
	new Dialog_Lines_String[256];

		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, ""COL_WHITE"Producto\tPrecio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, ""COL_WHITE"%d. %s\t"COL_RED""COL_GREEN"%d$\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}

		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, ""COL_WHITE"Producto\t"COL_WHITE"Precio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, ""COL_WHITE"%d. %s\t"COL_RED""COL_GREEN"%d$\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}

		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, ""COL_WHITE"Producto\t"COL_WHITE"Precio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, ""COL_WHITE"%d. %s\t"COL_RED""COL_GREEN"%d$\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}

		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, ""COL_WHITE"Producto\t"COL_WHITE"Precio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), ""COL_WHITE"%d. %s\t"COL_RED""COL_GREEN"%d$\n", i + 1, Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}

	//GPS
	new city[45], zone[45];

	//GPS Hospitales
	format(DIALOG_PLAYER_GPS_SITE_0_String, sizeof DIALOG_PLAYER_GPS_SITE_0_String, ""COL_WHITE"Lugar\t"COL_RED"Zona\n");
	for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
	{
		GetPointZone(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, ""COL_WHITE"Hospital %d\t"COL_RED"%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_0_String, Dialog_Lines_String);
	}

	//GPS CONCES
	format(DIALOG_PLAYER_GPS_SITE_7_String, sizeof DIALOG_PLAYER_GPS_SITE_7_String, ""COL_WHITE"Lugar\t"COL_RED"Zona\n");
	for(new i = 0; i != sizeof(SELL_VEHICLES_SHOPS_SPAWN); i++ )
	{
		GetPointZone(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, ""COL_WHITE"Concesionario %d\t"COL_RED"%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_7_String, Dialog_Lines_String);
	}

	//Colores CREWS
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(CrewColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}%s\n", CrewColors[i] >>> 8, CrewNameColors[i]);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}

	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/rendirse\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/blowjob\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/rodar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/borracho\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/bomba\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/apuntar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/reir\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/amenazar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/paja\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/herido\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/recostarse\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/cubrirse\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/vomitar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/comer\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/despedir\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/nalgada\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/agonizar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/besar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/crack\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/mear\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/sentarse\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/fucku\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/llamar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/taichi\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/beber\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/boxear\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/saludar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/llorar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/dormir\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/rapear\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/astrip\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/bailar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/alentar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/hablar\n");
	strcat(DIALOG_ANIMS_String, ""COL_WHITE"/asiento\n");

	return 1;
}

new Club_Strippers_Actor[6];
new  Club_Bar_Actor[4];
new Club_Actors[21];

new RandomStripAnimations[][] =
{
	"STR_A2B",
	"strip_G",
	"STR_B2C",
	"STR_C1",
	"STR_C2"
};

new RandomPayStripAnimations[][] =
{
	"PLY_CASH",
	"PUN_CASH",
	"PUN_HOLLER",
	"PUN_LOOP"
};

SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();
	LoadProperties();
	LoadCrews();
	LoadGangZones();
	LoadBlackMarkets();

	gettime(SERVER_TIME[0], SERVER_TIME[1]);
	SetTimer("UpdateWorldTime", 60000, true);

	//ptas
	Club_Strippers_Actor[0] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 0, .interiorid = 3);
    Club_Strippers_Actor[1] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 0, .interiorid = 3);
	//ptas2
	Club_Strippers_Actor[2] = CreateDynamicActor(64, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 1, .interiorid = 3);
    Club_Strippers_Actor[3] = CreateDynamicActor(63, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 1, .interiorid = 3);
	//ptas3
	Club_Strippers_Actor[4] = CreateDynamicActor(75, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 2, .interiorid = 3);
    Club_Strippers_Actor[5] = CreateDynamicActor(238, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 2, .interiorid = 3);

	//cantina
    Club_Bar_Actor[0] = CreateDynamicActor(194, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 0, .interiorid = 3);
	//cantina2
    Club_Bar_Actor[1] = CreateDynamicActor(171, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 1, .interiorid = 3);
	//cantina3
    Club_Bar_Actor[2] = CreateDynamicActor(172, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 2, .interiorid = 3);
	//cantina3
    Club_Bar_Actor[3] = CreateDynamicActor(172, 496.554840,-77.601684,998.765075,0.000000, .worldid = 2, .interiorid = 11);

    //carneros
	Club_Actors[0] = CreateDynamicActor(2, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 0, .interiorid = 3);
	Club_Actors[1] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 0, .interiorid = 3);
	Club_Actors[2] = CreateDynamicActor(3, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 0, .interiorid = 3);
	Club_Actors[3] = CreateDynamicActor(19, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 0, .interiorid = 3);
	Club_Actors[4] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 0, .interiorid = 3);
	Club_Actors[5] = CreateDynamicActor(20, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 0, .interiorid = 3);
	Club_Actors[6] = CreateDynamicActor(40, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 0, .interiorid = 3);
	//carneros
	Club_Actors[7] = CreateDynamicActor(45, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 1, .interiorid = 3);
	Club_Actors[8] = CreateDynamicActor(37, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 1, .interiorid = 3);
	Club_Actors[9] = CreateDynamicActor(28, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 1, .interiorid = 3);
	Club_Actors[10] = CreateDynamicActor(66, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 1, .interiorid = 3);
	Club_Actors[11] = CreateDynamicActor(67, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 1, .interiorid = 3);
	Club_Actors[12] = CreateDynamicActor(68, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 1, .interiorid = 3);
	Club_Actors[13] = CreateDynamicActor(69, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 1, .interiorid = 3);
	//carneros
	Club_Actors[14] = CreateDynamicActor(100, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 2, .interiorid = 3);
	Club_Actors[15] = CreateDynamicActor(101, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 2, .interiorid = 3);
	Club_Actors[16] = CreateDynamicActor(120, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 2, .interiorid = 3);
	Club_Actors[17] = CreateDynamicActor(112, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 2, .interiorid = 3);
	Club_Actors[18] = CreateDynamicActor(140, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 2, .interiorid = 3);
	Club_Actors[19] = CreateDynamicActor(142, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 2, .interiorid = 3);
	Club_Actors[20] = CreateDynamicActor(139, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 2, .interiorid = 3);

	UpdateThePutis();
	SetTimer("UpdateThePutis", 3000, true);

	// Map Icons Hospitales
	//for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) CreateDynamicMapIcon(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2], 22, COLOR_WHITE, 0, 0);

	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, ""COL_WHITE"%s", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xF7F7F700, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}

	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, ""COL_RED"%s\n"COL_WHITE"7 productos disponibles", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xF7F7F7FF, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}

	// 3D Texts Bank
	//for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("Presione {5DE141}H "COL_WHITE"para realizar una operación", 0xF7F7F700, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
	//for(new i = 0; i < sizeof BUY_PROPERTIES_SITES; i++) CreateDynamic3DTextLabel("Escribe {5DE141}/comprarcasa [ID] "COL_WHITE"para comprar una propiedad", 0xF7F7F700, BUY_PROPERTIES_SITES[i][site_X], BUY_PROPERTIES_SITES[i][site_Y], BUY_PROPERTIES_SITES[i][site_Z] + 0.25, 10.0, .testlos = true, .worldid = BUY_PROPERTIES_SITES[i][site_WORLD], .interiorid = BUY_PROPERTIES_SITES[i][site_INTERIOR]);

	//Cajerosfo
	for(new i = 0; i < sizeof ATM_BANK; i ++)//ATM_BANK[i][atm_modelid], //cajeros
	{
		CreateDynamicObject(19324, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ], ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]);

		ATM_BANK[i][atm_X] += (-0.5 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		CreateDynamicMapIcon(ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], 52, COLOR_WHITE, ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]);

		new atm_pickup_id = CreateDynamicPickup(0, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]), info[3];
		info[0] = PICKUP_TYPE_ATM;
		info[1] = i; // Index
		info[2] = 0; // Nada
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, atm_pickup_id, E_STREAMER_EXTRA_ID, info);
	}

	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++) CreateDynamic3DTextLabel(""COL_RED"Gasolinera\n"COL_WHITE"3 productos disponibles", 0xF7F7F7FF, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Mercado negro
	CreateDynamic3DTextLabel(""COL_RED"Mercado negro (Armas)\n"COL_WHITE"7 productos disponibles", 0xF7F7F7FF, 2164.021484, -1164.398925, -16.871662, 10.0, .testlos = true, .interiorid = 20, .worldid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Mercado negro (Balas)\n"COL_WHITE"4 productos disponibles", 0xF7F7F7FF, 2162.462158, -1169.053222, -16.871662, 10.0, .testlos = true, .interiorid = 20, .worldid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Mercado negro (Armas)\n"COL_WHITE"7 productos disponibles", 0xF7F7F7FF, 2164.021484, -1164.398925, -16.871662, 10.0, .testlos = true, .interiorid = 21, .worldid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Mercado negro (Balas)\n"COL_WHITE"4 productos disponibles", 0xF7F7F7FF, 2162.462158, -1169.053222, -16.871662, 10.0, .testlos = true, .interiorid = 21, .worldid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Mercado negro (Drogas)\n"COL_WHITE"2 productos disponibles", 0xF7F7F7FF, 2310.057128, -1789.786865, 1600.751953, 10.0, .testlos = true, .interiorid = 17, .worldid = 0);

	//24/7
	CreateDynamic3DTextLabel(""COL_RED"Tienda 24/7\n"COL_WHITE"12 productos disponibles", 0xF7F7F7FF, -27.964675, -89.948631, 1003.546875, 10.0, .testlos = true, .interiorid = 18);

	// Farmacia
	CreateDynamic3DTextLabel(""COL_RED"Farmacia\n"COL_WHITE"3 productos disponibles", 0xF7F7F7FF, -198.002197, -1762.759643, 675.768737, 10.0, .testlos = true, .interiorid = 3);

	//Vehs venta
	for(new i = 0; i != sizeof SELL_INFO_VEHICLES; i ++)
	{
		if (SELL_INFO_VEHICLES[i][sell_info_COLOR_1] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if (SELL_INFO_VEHICLES[i][sell_info_COLOR_2] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle(SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID], SELL_INFO_VEHICLES[i][sell_info_SPAWN_X], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z], SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE], SELL_INFO_VEHICLES[i][sell_info_COLOR_1], SELL_INFO_VEHICLES[i][sell_info_COLOR_2], COLOR_WHITE, false);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_SELL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "EN VENTA");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = SELL_INFO_VEHICLES[i][sell_info_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = SELL_INFO_VEHICLES[i][sell_info_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		SELL_VEHICLES[vehicle_id][sell_vehicle_VALID] = true;
		SELL_VEHICLES[vehicle_id][sell_vehicle_SHOP] = SELL_INFO_VEHICLES[i][sell_info_SHOP];
		SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_PRICE];
		SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1; /*VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_LEVEL];*/
		SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_COINS];
		SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_VIP_LEVEL];

		if (SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1;
		if (SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA]) SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = 0;

		SetVehicleToRespawnEx(vehicle_id);


		new label_str[256];

		if (SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL])
		{
			if (SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{F4DC42}Se requiere VIP (%d)\n\
							\n\
							"COL_RED"%s\n\n\
							"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
							"COL_WHITE"Nivel: "COL_RED"%d\
						", SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{F4DC42}Se requiere VIP (%d)\n\
							\n\
							"COL_RED"%s\n\n\
							"COL_WHITE"Precio: "COL_RED"%s$\n\
							"COL_WHITE"Nivel: "COL_RED"%d\
						", SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		else
		{
			if (SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							"COL_RED"%s\n\n\
							"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
							"COL_WHITE"Nivel: "COL_RED"%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							"COL_RED"%s\n\n\
							"COL_WHITE"Precio: "COL_RED"%s$\n\
							"COL_WHITE"Nivel: "COL_RED"%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}


		SELL_VEHICLES[vehicle_id][sell_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xF7F7F700, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//Concesionarios
	for(new i = 0; i < sizeof SELL_VEHICLES_SHOPS_SPAWN; i++)
	{
		CreateDynamicMapIcon(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 55, COLOR_WHITE, 0, 0);
	}

	//Notario
	CreateDynamic3DTextLabel(""COL_WHITE"Vender una propiedad o vehículo", 0xF7F7F700, 1796.071655,-1414.565307,2770.660156, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	//Grua
	CreateDynamic3DTextLabel(""COL_WHITE"Servicio de grúa", 0xF7F7F700,  1795.293823,-1407.773681,2770.660156, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	
	//San Andreas Vehicles
	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{

		if (San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if (San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;

		if (San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if (work_info[ San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN] ][work_info_TYPE] == WORK_TYPE_FAMILY)
			{
				respawn_time = 900;
			}
		}

		vehicle_id = CreateVehicle(San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2], respawn_time, false);
		if (vehicle_id == INVALID_VEHICLE_ID) continue;

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gp_vehicle_vip] = San_Andreas_Vehicles[i][san_andreas_vehicle_vip];

		if (GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
			WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
			WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
			WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
		}

		SetVehicleToRespawnEx(vehicle_id);
	}

	//polcias
	for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
	{
		POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID] = CreateDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_MODELID], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RZ], 0, 0);
	}

	for(new i = 0; i != sizeof POLICE_DOORS; i ++)
	{
		POLICE_DOORS[i][police_door_OBJECT_ID] = CreateDynamicObject(POLICE_DOORS[i][police_door_MODELID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0, 0.0, POLICE_DOORS[i][police_door_RZ], POLICE_DOORS[i][police_door_WORLD], POLICE_DOORS[i][police_door_INTERIOR]);
	}

	for(new i = 0; i != sizeof JAIL_DOORS; i ++)
	{
		JAIL_DOORS[i][jail_door_OBJECT_ID] = CreateDynamicObject(JAIL_DOORS[i][jail_door_MODELID], JAIL_DOORS[i][jail_door_X], JAIL_DOORS[i][jail_door_Y], JAIL_DOORS[i][jail_door_Z], 0.0, 0.0, JAIL_DOORS[i][jail_door_RZ], JAIL_DOORS[i][jail_door_WORLD], JAIL_DOORS[i][jail_door_INTERIOR]);
	}

	for(new i = 0; i != sizeof MAFIA_DOORS; i ++)
	{
		MAFIA_DOORS[i][mafia_door_OBJECT_ID] = CreateDynamicObject(MAFIA_DOORS[i][mafia_door_MODELID], MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z], 0.0, 0.0, MAFIA_DOORS[i][mafia_door_RZ], MAFIA_DOORS[i][mafia_door_WORLD], MAFIA_DOORS[i][mafia_door_INTERIOR]);
	}

	for(new i = 0; i != sizeof TELE_MIRRORS; i ++)
	{
		TELE_MIRRORS[i][teleview_OBJECT_ID] = CreateDynamicObject(TELE_MIRRORS[i][teleview_MODELID], TELE_MIRRORS[i][teleview_X], TELE_MIRRORS[i][teleview_Y], TELE_MIRRORS[i][teleview_Z], 0.0, 0.0, TELE_MIRRORS[i][teleview_RZ], TELE_MIRRORS[i][teleview_WORLD], TELE_MIRRORS[i][teleview_INTERIOR]);
	}

	for(new i = 0; i != sizeof HOTAIR_BALLOONS; i ++)
	{
		HOTAIR_BALLOONS[i][balloon_OBJECT_ID] = CreateDynamicObject(HOTAIR_BALLOONS[i][balloon_MODELID], HOTAIR_BALLOONS[i][balloon_X], HOTAIR_BALLOONS[i][balloon_Y], HOTAIR_BALLOONS[i][balloon_Z], 0.0, 0.0, HOTAIR_BALLOONS[i][balloon_RZ], HOTAIR_BALLOONS[i][balloon_WORLD], HOTAIR_BALLOONS[i][balloon_INTERIOR]);
	}

	CreateDynamic3DTextLabel(""COL_RED"Balloon Express\n"COL_WHITE"Viaje en globo aerostático (200$)", 0xF7F7F7FF, -370.339721, -1634.205932, 25.057666, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	CreateDynamic3DTextLabel(""COL_WHITE"Armamento para policías", 0xF7F7F700, 1867.665283, -1712.853515, 5216.709960, 5.0, .testlos = true, .worldid = 0, .interiorid = 6);

	//Safe Zones
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		SAFE_ZONES[i][safe_zone_AREA_ID] = CreateDynamicRectangle(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y], SAFE_ZONES[i][safe_zone_WORLD], SAFE_ZONES[i][safe_zone_INTERIOR]);
	}

	//Trabajos
	for(new i = 1; i != sizeof obtain_work_coords; i ++)
	{
		new label_str[256];

		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				format(label_str, sizeof label_str, ""COL_WHITE"Trabajo %s", work_info[i][work_info_NAME]);
				CreateDynamic3DTextLabel(label_str, 0xF7F7F700, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
				CreateDynamicPickup(1314, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], COLOR_WHITE, obtain_work_coords[i][obtain_work_INTERIOR]);
				if (obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], COLOR_WHITE, 0, 0);
			}
		}
	}

	//Carga camioneros
	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		CreateDynamic3DTextLabel(""COL_WHITE"Punto de carga", 0xF7F7F700, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 15.0, .testlos = true, .worldid = 0, .interiorid = 0);
		CreateDynamicPickup(19607, 1, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 0, 0);
	}

	//Mecánico
	//Mechanic_Area = CreateDynamicRectangle(-915.255050, -1911.812377, -500.539089, -1979.635253, 0, 0);
	Mechanic_Area = CreateDynamicCircle(-89.0, -1170.0, 50,0);

	//Trash
	CreateDynamicPickup(1239, 1, 1626.089355, -2174.786132, 13.554687, 0, 0);
	CreateDynamic3DTextLabel(""COL_WHITE"Punto de control", 0xF7F7F700, 1626.089355, -2174.786132, 13.554687, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//base mafia
	CreateDynamic3DTextLabel("{ca3535}La cosa nostra\n"COL_WHITE"Equipamiento", 0xF7F7F700, 726.2478, -1276.3830, 13.5662, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{ff9b00}The Crew Criminals\n"COL_WHITE"Equipamiento", 0xF7F7F700, 3855.066162, -1290.975585, 7547.983398, 20.0, .testlos = true, .worldid = 0, .interiorid = 28);

	//meca
	/*CreateDynamicPickup(1558, 1, -82.038078, -1208.153564, 2.704517, 0, 0);
	CreateDynamic3DTextLabel(""COL_WHITE"Comprar piezas\n/piezas [cantidad]", 0xF7F7F700, -82.038078, -1208.153564, 2.704517, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	*/
	CreateDynamic3DTextLabel(""COL_RED"Levantador nº 1\n"COL_WHITE"Acércate para usar", 0xF7F7F700, -64.154220, -1162.446533, 2.148341 + 1.8, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Levantador nº 2\n"COL_WHITE"Acércate para usar", 0xF7F7F700, -70.391883, -1175.106201, 2.148341 + 1.8, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Levantador nº 3\n"COL_WHITE"Acércate para usar", 0xF7F7F700, -75.486938, -1185.539672, 2.148341 + 1.8, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Levantador nº 4\n"COL_WHITE"Acércate para usar", 0xF7F7F700, -94.757438, -1170.204589, 2.504477 + 1.8, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//pescador
	CreateDynamic3DTextLabel(""COL_RED"Boya\n"COL_WHITE"nº 1", 0xF7F7F7FF, 1955.022094, -189.402023, -2.332746 + 1.3, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Boya\n"COL_WHITE"nº 2", 0xF7F7F7FF, 2209.482421, -231.312026, -2.332746 + 1.3, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Boya\n"COL_WHITE"nº 3", 0xF7F7F7FF, 2209.482421, -231.312026, -2.332746 + 1.3, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Boya\n"COL_WHITE"nº 4", 0xF7F7F7FF, 1858.291503, -69.229499, -2.332746 + 1.3, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Comprar caña de pescar\n"COL_WHITE"1 producto disponible", 0xF7F7F7FF, 2125.901123, -65.776679, 1.585963, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel(""COL_RED"Vender pescados\n"COL_WHITE"Venga aquí para vender sus peces", 0xF7F7F7FF, 2157.049560, -92.550987, 2.798943, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);

	// Minero
	CreateDynamic3DTextLabel(""COL_RED"Puesto para mineros\n"COL_WHITE"1 producto disponible", 0xF7F7F7FF, 509.910125, -708.205383, 19.242210, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	for(new i = 0; i != sizeof ROCK_PROCESSOR; i ++)
	{
		CreateDynamic3DTextLabel(""COL_RED"Procesadora\n"COL_WHITE"Suelta los materiales aquí", 0xF7F7F7FF, ROCK_PROCESSOR[i][rp_X], ROCK_PROCESSOR[i][rp_Y], ROCK_PROCESSOR[i][rp_Z] + 3, 25.0, .testlos = true, .worldid = -1, .interiorid = -1);
	}
	
	//heliport
	CreateDynamic3DTextLabel(""COL_RED"Helipuerto nº 1\n"COL_WHITE"Acércate para usar", 0xF7F7F700, 1876.87915, -2286.58911, 1.16550 + 15, 30.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Ruta 0
	CreateTrashCheckpoint(0, 1440, 1576.18823, -1881.10181, 13.07472, 0.00000, 0.00000, 34.68000);
	CreateTrashCheckpoint(0, 1440, 1917.53015, -1759.69678, 13.03518, 0.00000, 0.00000, 55.38003);
	CreateTrashCheckpoint(0, 1440, 2257.18701, -1757.93884, 13.05839, 0.00000, 0.00000, -32.57999);
	CreateTrashCheckpoint(0, 1440, 2321.62183, -1652.59631, 13.58731, 0.00000, 1.50000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 2136.64185, -1614.34924, 13.07250, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 1812.95654, -1583.28308, 13.05158, 0.00000, 0.00000, 108.30004);
	CreateTrashCheckpoint(0, 1440, 1835.05884, -1405.09631, 12.84951, 0.00000, 0.00000, -169.31958);
	CreateTrashCheckpoint(0, 1440, 2111.39307, -1374.47253, 23.48777, 0.00000, 0.00000, 43.80002);
	CreateTrashCheckpoint(0, 1440, 2340.17896, -1375.07373, 23.49526, 0.00000, 0.00000, -45.78000);
	CreateTrashCheckpoint(0, 1440, 2423.18457, -1247.28931, 23.32495, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 2408.37939, -1435.10327, 23.49789, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 2404.54272, -1883.71716, 13.07741, 0.00000, 0.00000, 49.98003);
	CreateTrashCheckpoint(0, 1440, 2303.04858, -1905.20337, 13.10007, 0.00000, 0.00000, -224.27972);
	CreateTrashCheckpoint(0, 1440, 1947.93640, -1981.96899, 13.04134, 0.00000, 0.00000, -182.69981);
	CreateTrashCheckpoint(0, 1440, 1760.00012, -1704.64282, 13.02292, 0.00000, 0.00000, -89.88001);

	//Ruta 1
	CreateTrashCheckpoint(1, 1440, 266.72211, -1433.95056, 13.22365, 0.00000, 0.00000, -131.94023);
	CreateTrashCheckpoint(1, 1440, 481.41916, -1316.46606, 15.24868, 0.00000, 0.00000, -233.09927);
	CreateTrashCheckpoint(1, 1440, 609.48804, -1414.38892, 13.16528, 0.00000, 0.00000, -177.59927);
	CreateTrashCheckpoint(1, 1440, 673.05725, -1312.57593, 13.06484, 0.00000, 0.00000, -0.12000);
	CreateTrashCheckpoint(1, 1440, 876.93158, -1337.84985, 13.03618, 0.00000, 0.00000, -94.02001);
	CreateTrashCheckpoint(1, 1440, 1014.79724, -1307.83337, 13.04088, 0.00000, 0.00000, -91.02003);
	CreateTrashCheckpoint(1, 1440, 928.27362, -1231.07397, 16.43071, 0.00000, 0.00000, -2.76000);
	CreateTrashCheckpoint(1, 1440, 974.32703, -1098.90576, 23.33282, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1011.96045, -1029.09534, 31.61896, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1130.96423, -1026.88684, 31.37872, 0.00000, 0.00000, 88.50000);
	CreateTrashCheckpoint(1, 1440, 1227.52466, -923.29681, 42.38168, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1149.20667, -1292.30310, 13.14513, 0.00000, 0.00000, -90.83996);
	CreateTrashCheckpoint(1, 1440, 1324.76135, -913.80219, 36.60719, 0.00000, 5.00000, -12.18000);
	CreateTrashCheckpoint(1, 1440, 1438.44971, -1046.58569, 23.30455, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1426.72534, -1150.02637, 23.32583, 0.00000, 0.00000, -57.60005);

	//Ruta 2
	CreateTrashCheckpoint(2, 1440, 177.89861, -1411.52124, 44.86136, 0.00000, 5.50000, -123.00010);
	CreateTrashCheckpoint(2, 1440, 347.04025, -1281.00696, 53.47940, 0.00000, 0.00000, -153.95987);
	CreateTrashCheckpoint(2, 1440, 504.53271, -1217.64954, 44.80725, 0.00000, -4.00000, -117.00010);
	CreateTrashCheckpoint(2, 1440, 626.74414, -1097.86841, 46.27120, 0.00000, -0.66000, 34.20001);
	CreateTrashCheckpoint(2, 1440, 690.64514, -1019.74518, 50.91731, 0.00000, 0.00000, 65.88000);
	CreateTrashCheckpoint(2, 1440, 876.47632, -865.94324, 76.99551, 0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(2, 1440, 1029.65454, -791.63422, 102.38500, 0.00000, 3.50000, -128.39977);
	CreateTrashCheckpoint(2, 1440, 996.50922, -642.60034, 120.79243, 0.00000, 1.50000, -175.01944);
	CreateTrashCheckpoint(2, 1440, 1402.91345, -585.05438, 77.69649, 0.00000, -4.50000, -66.54000);
	CreateTrashCheckpoint(2, 1440, 1234.19727, -626.23657, 103.50398, 0.00000, 0.00000, -170.57962);
	CreateTrashCheckpoint(2, 1440, 1065.22083, -623.77979, 115.07451, 0.00000, 11.00000, 0.00000);
	CreateTrashCheckpoint(2, 1440, 898.74420, -708.74591, 109.96632, 0.00000, -12.50000, 67.08000);
	CreateTrashCheckpoint(2, 1440, 832.35669, -797.90161, 72.50480, 0.00000, -13.50000, 7.86000);
	CreateTrashCheckpoint(2, 1440, 677.09070, -878.62482, 67.03890, 0.00000, 11.50000, -121.20003);
	CreateTrashCheckpoint(2, 1440, 125.15490, -1289.90332, 46.98190, 0.00000, 1.50000, 86.94010);

	//Granjero
	Farmer_Area = CreateDynamicCircle(1461.8894, -83.2621, 65.0, 0, 0);
	CreateDynamicMapIcon(1461.8894, -83.2621, 65.0, 53, COLOR_WHITE, 0, 0);
	CreateDynamic3DTextLabel(""COL_WHITE"Tienda de semillas", 0xF7F7F700, -382.580657, -1426.404296, 26.219505, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Cosechador
	Harvest_Area = CreateDynamicRectangle(-428.336059, -1667.658569, -116.565414, -1220.122070, 0, 0);
	return 1;
}

CALLBACK: InjuredAnimationCut(playerid)
{
	ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
	PLAYER_TEMP[playerid][py_IN_INJURED_ANIMATION] = false;
	return 1;
}

CALLBACK: UpdateThePutis()
{
	ApplyDynamicActorAnimation(Club_Bar_Actor[0], "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);
    ApplyDynamicActorAnimation(Club_Bar_Actor[1], "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);
    ApplyDynamicActorAnimation(Club_Bar_Actor[2], "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);

	new
		strip_anim = random(sizeof(RandomStripAnimations)),
		stripper = random(sizeof(Club_Strippers_Actor));

	ApplyDynamicActorAnimation(Club_Strippers_Actor[stripper], "STRIP", RandomStripAnimations[strip_anim], 4.1, 1, 0, 0, 0, 0);


	for(new i = 0; i != sizeof(Club_Actors); i ++)
	{
		ApplyDynamicActorAnimation(Club_Actors[i], "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (route >= MAX_ROUTES) return printf("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if (!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if (TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return printf("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if (TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}

	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);

	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);

	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}

Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1 - x2, y1 - y2, z1 - z2);
}

UpdatePlayerZoneMessages(playerid)
{
	for(new i = 0; i < sizeof ATM_BANK; i ++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.0, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]))
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
	{
		if (IsPlayerInRangeOfPoint(playerid, 0.8, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]))
		{
			if (GetPlayerVirtualWorld(playerid) == ENTER_EXIT[i][ee_EXT_WORLD])
			{
				if (GetPlayerInterior(playerid) == ENTER_EXIT[i][ee_EXT_INTERIOR])
				{
					ShowPlayerKeyMessage(playerid, "ENTER");
					return 1;
				}
			}
		}

		if (IsPlayerInRangeOfPoint(playerid, 0.8, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z]))
		{
			if (GetPlayerVirtualWorld(playerid) == ENTER_EXIT[i][ee_INT_WORLD])
			{
				if (GetPlayerInterior(playerid) == ENTER_EXIT[i][ee_INT_INTERIOR])
				{
					ShowPlayerKeyMessage(playerid, "ENTER");
					return 1;
				}
			}
		}
	}

	for(new i = 0; i != sizeof TELE_MIRRORS; i ++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, TELE_MIRRORS[i][teleview_X], TELE_MIRRORS[i][teleview_Y], TELE_MIRRORS[i][teleview_Z]))
		{
			if (GetPlayerVirtualWorld(playerid) == TELE_MIRRORS[i][teleview_WORLD])
			{
				if (GetPlayerInterior(playerid) == TELE_MIRRORS[i][teleview_INTERIOR])
				{
					ShowPlayerKeyMessage(playerid, "Y");
					return 1;
				}
			}
		}
	}

	if (PLAYER_MISC[playerid][MISC_BALLOON])
	{
		for(new i = 0; i != sizeof HOTAIR_BALLOONS; i ++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.5, HOTAIR_BALLOONS[i][balloon_X], HOTAIR_BALLOONS[i][balloon_Y], HOTAIR_BALLOONS[i][balloon_Z]))
			{
				if (HOTAIR_BALLOONS[i][balloon_ACTIVE] == false)
				{
					ShowPlayerKeyMessage(playerid, "Y");
					return 1;
				}
			}
		}
	}

	for(new i = 0; i < sizeof(Clothing_Shop_Positions); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z]))
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	for(new i = 0; i < sizeof(Fast_Food_Positions); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z]))
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	for(new i = 1; i != sizeof(obtain_work_coords); i ++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if (IsPlayerInAnyVehicle(playerid))
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.3, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2] + 0.25))
			{
				ShowPlayerKeyMessage(playerid, "Y");
				return 1;
			}
		}
	}

	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		if (PLAYER_WORKS[playerid][WORK_TRUCK])
		{
			if (IsPlayerInAnyVehicle(playerid))
			{
				if (IsPlayerInRangeOfPoint(playerid, 3.5, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
				{
					ShowPlayerKeyMessage(playerid, "H");
					return 1;
				}
			}
		}
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 2125.901123, -65.776679, 1.585963))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 509.910125, -708.205383, 19.242210))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 2157.049560, -92.550987, 2.798943))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, -198.002197, -1762.759643, 675.768737))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 2164.021484, -1164.398925, -16.871662))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 2162.462158, -1169.053222, -16.871662))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 2310.057128, -1789.786865, 1600.751953))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250) || IsPlayerInRangeOfPoint(playerid, 2.0, 407.302886,2531.673095,16.635936))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 219.244018, 69.982215, 1005.039062))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, -382.580657, -1426.404296, 26.219505))
	{
		ShowPlayerKeyMessage(playerid, "Y");
		return 1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 1796.071655, -1414.565307, 2770.660156)) 
    {
    	ShowPlayerKeyMessage(playerid, "H");
    	return 1;
    }

    if (IsPlayerInRangeOfPoint(playerid, 1.0, 1795.293823, -1407.773681, 2770.660156)) 
    {
    	ShowPlayerKeyMessage(playerid, "H");
        return 1;
    }

    if (IsPlayerInRangeOfPoint(playerid, 1.0, -370.339721, -1634.205932, 25.057666)) 
    {
    	ShowPlayerKeyMessage(playerid, "Y");
        return 1;
    }

    if (IsPlayerInRangeOfPoint(playerid, 1.2, -64.154220, -1162.446533, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -70.391883, -1175.106201, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -75.486938, -1185.539672, 2.148341) || IsPlayerInRangeOfPoint(playerid, 1.2, -94.757438, -1170.204589, 2.504477))
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			ShowPlayerKeyMessage(playerid, "H");
        	return 1;
		}
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.5, 726.2478, -1276.3830, 13.5662))
	{
		if (PLAYER_WORKS[playerid][WORK_MAFIA])
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.5, 3855.066162, -1290.975585, 7547.983398))
	{
		if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
		{
			ShowPlayerKeyMessage(playerid, "Y");
			return 1;
		}
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0, 1626.089355, -2174.786132, 13.554687))
	{
		if (PLAYER_WORKS[playerid][WORK_TRASH])
		{
			ShowPlayerKeyMessage(playerid, "H");
			return 1;
		}
	}
	return 1;
}

public OnGameModeExit()
{
	SendDiscordWebhook(":grey_exclamation: Servidor detenido.", 1);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		GameTextForPlayer(i, "~w~Reiniciando...", 8000, 1);
	}

	printf("OnGameModeExit()"); // debug juju
	printf("Deteniendo servidor...");
	db_close(Database);
	Log("status", "Servidor detenido.");
	return 1;
}

CheckAndExecuteGasoline(playerid)
{
	if (GetPlayerInterior(playerid) == 0)
	{
		new fuel_station = -1;
		for(new i = 0; i < sizeof Fuel_Stations; i++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]))
			{
				fuel_station = i;
				break;
			}
		}
		if (fuel_station != -1)
		{
			ShowDialog(playerid, DIALOG_GASOLINE);
		}
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /a <texto>");

	new string[145];
    format(string, sizeof(string), "[C-A]"COL_WHITE" %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, params);
	SendMessageToAdmins(0x80E266FF, string);
	return 1;
}

#define MIN_SECONDS_BETWEEN_TALKS 150 // Deben pasar al menos 1 segundos para volver a hablar.
public OnPlayerText(playerid, text[])
{
	printf("OnPlayerText %d %s",playerid,text); // debug juju
	if (PLAYER_TEMP[playerid][py_KICKED]) return 0;

	if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL || PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW] || PLAYER_TEMP[playerid][py_NEW_USER]) { ShowPlayerMessage(playerid, "~r~Ahora no puedes hablar.", 2); return 0; }
	if (text[0] == '#' && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] != 0 && PLAYER_TEMP[playerid][py_ADMIN_SERVICE])
	{
		new string[145];
	    format(string, sizeof(string), "[C-A]"COL_WHITE" %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, text[1]);
		SendMessageToAdmins(0x80E266FF, string);
		return 0;
	}

	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_TALK]);
	if (interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if (ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if (interval < 50)
				{
					if (!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if (PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}

		if (!PLAYER_WORKS[playerid][WORK_POLICE])
		{
			SendClientMessage(playerid, COLOR_RED, "Aviso:"COL_WHITE" Estás enviando mensajes demasiado rápido.");
			return 0;
		}
	}
	PLAYER_TEMP[playerid][py_ANTIFLOOD_TALK] = GetTickCount();

	if (PLAYER_TEMP[playerid][py_POLICE_CALL_NAME])
	{
		format(PLAYER_TEMP[playerid][py_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendClientMessage(playerid, COLOR_YELLOW, "Operadora:"COL_WHITE" De acuerdo, describe brevemente lo que sucede para enviar una patrulla.");
		PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}

	if (PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = false;


		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "{4286f4}[Central policía] "COL_WHITE"Reporte "COL_WHITE"[%s (%d), gps: %s, %s]: "COL_WHITE"%s", PLAYER_TEMP[playerid][py_POLICE_CALL_NAME_STR], playerid, city, zone, text);
		SendPoliceRadioMessage(-1, COLOR_WHITE, message);

		SendClientMessage(playerid, COLOR_YELLOW, "Operadora:"COL_WHITE" Su petición fue enviada, en breve una patrulla acudirá.");
		ShowPlayerMessage(playerid, "Llamada finalizada.", 2);
		return 0;
	}

	new str_text[190];
	new CrewColorChat = getPlayerCrewColor(playerid);
	if (text[0] == '!')
	{
		if (PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][py_WORKING_IN] == WORK_POLICE)
		{
			if (text[1] == '!') format(str_text, sizeof str_text, "[Depto. De Policía] "COL_WHITE"(( %s: %s ))", PLAYER_TEMP[playerid][py_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[Depto. De Policía] "COL_WHITE"%s %s: %s", PLAYER_TEMP[playerid][py_RP_NAME], POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], text[1]);

			SendPoliceRadioMessage(PLAYER_TEMP[playerid][py_POLICE_RADIO], COLOR_LIGHT_BLUE, str_text);
			return 0;
		}

		if (PLAYER_WORKS[playerid][WORK_MAFIA])
		{
			if (text[1] == '!') format(str_text, sizeof str_text, "[LCN] "COL_WHITE"(( %s: %s ))", PLAYER_TEMP[playerid][py_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[LCN] "COL_WHITE"%s %s: %s", PLAYER_TEMP[playerid][py_RP_NAME], MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_MAFIA] ], text[1]);

			SendMafiaMessage(0xca3535FF, str_text);
			return 0;
		}

		if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
		{
			if (text[1] == '!') format(str_text, sizeof str_text, "[TCC] "COL_WHITE"(( %s: %s ))", PLAYER_TEMP[playerid][py_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[TCC] "COL_WHITE"%s %s: %s", PLAYER_TEMP[playerid][py_RP_NAME], ENEMY_MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA] ], text[1]);

			SendEnemyMafiaMessage(0xff9b00FF, str_text);
			return 0;
		}

		if (PLAYER_CREW[playerid][player_crew_VALID])
		{
			if (text[1] == '!') format(str_text, sizeof str_text, "[%s] "COL_WHITE"%s - %s: (( %s ))", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][py_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[%s] "COL_WHITE"%s - %s: %s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][py_RP_NAME], text[1]);

			SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], CrewColorChat, str_text);
			return 0;
		}
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s "COL_RED"(teléfono){E6E6E6}: %s", PLAYER_TEMP[playerid][py_RP_NAME], text);
		SendClientMessageEx(PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID], COLOR_WHITE, ""COL_RED"Teléfono (%s):"COL_WHITE" %s", convertPhoneNumber(PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID], PLAYER_PHONE[playerid][player_phone_NUMBER]), text);
	}
	else
	{
		if (GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s (ebrio): %s", PLAYER_TEMP[playerid][py_RP_NAME], text);
		else format(str_text, 145, "%s: %s", PLAYER_TEMP[playerid][py_RP_NAME], text);
	}

	//Do code
	strreplace(str_text, "[", "{dbc766}[");
	strreplace(str_text, "]", "]{E6E6E6}");

	//Negrita code
	strreplace(str_text, "<", "{A8A8A8}");
	strreplace(str_text, ">", "{E6E6E6}");

	// Send message
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	SetPlayerChatBubble(playerid, text, 0xea3d3dFF, 15.0, 15000);
	return 0;
}

#define MIN_TIME_BETWEEN_DOUBT 30
CMD:duda(playerid, params[])
{
	if (!ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, COLOR_WHITE, "Para enviar una duda primero debes activar el canal de dudas con "COL_RED"/dudas");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /duda "COL_WHITE"[DUDA]");
	
	/*if ( PLAYER_MISC[playerid][MISC_MUTE] >= 999)
	{
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Estás silenciado en el canal de dudas y anuncios de forma permanente.");
		return 1;
	}*/

	if (PLAYER_MISC[playerid][MISC_MUTE] > gettime())
	{
		new seconds = PLAYER_MISC[playerid][MISC_MUTE] - gettime();
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Estás silenciado en el canal de dudas y anuncios por %s minutos", TimeConvert(seconds));
		return 1;
	}


	if (!ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
	{
		if (gettime() < PLAYER_TEMP[playerid][py_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT)
		{
			new time = (MIN_TIME_BETWEEN_DOUBT-(gettime()-PLAYER_TEMP[playerid][py_DOUBT_CHANNEL_TIME]));
			SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tienes que esperar %s segundos para volver a enviar una duda.", TimeConvert(time));
			return 1;
		}
	}

	if (CheckFilterViolation(params)) return SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tu duda tiene palabras inapropiadas.");

	if (StringContainsIP(params))
	{
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tu duda tiene direcciones IP.");
			
		new str[145];
		format(str, 145, "[ANTI-CHEAT] Aviso sobre %s (%d): Spam (%s)", ACCOUNT_INFO[playerid][ac_NAME], playerid, params);
    	SendMessageToAdmins(COLOR_ANTICHEAT, str);
		return 1;
	}

	SendMessageToDoubtChannel(playerid, params);
	return 1;
}
alias:duda("n");

CMD:dudas(playerid, params[])
{
	if (ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL])
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = false;
		ShowPlayerMessage(playerid, "Canal de dudas ~r~desactivado", 1);
	}
	else
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
		ShowPlayerMessage(playerid, "Canal de dudas ~g~activado", 1);
	}
	return 1;
}

#define MIN_TIME_BETWEEN_ANN 300
CMD:anuncio(playerid, params[])
{
	if (!ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, COLOR_WHITE, "Para enviar un anuncio primero debes activar el canal de dudas con "COL_RED"/dudas");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /anuncio "COL_WHITE"[TEXTO]");
	
	/*if ( PLAYER_MISC[playerid][MISC_MUTE] >= 999)
	{
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Estás silenciado en el canal de dudas y anuncios de forma permanente.");
		return 1;
	}*/

	if (PLAYER_MISC[playerid][MISC_MUTE] > gettime())
	{
		new seconds = PLAYER_MISC[playerid][MISC_MUTE] - gettime();
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Estás silenciado en el canal de dudas y anuncios por %s minutos", TimeConvert(seconds));
		return 1;
	}

	if (gettime() < PLAYER_TEMP[playerid][py_ANN_CHANNEL_TIME] + MIN_TIME_BETWEEN_ANN)
	{
		new time = (MIN_TIME_BETWEEN_ANN-(gettime()-PLAYER_TEMP[playerid][py_ANN_CHANNEL_TIME]));
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tienes que esperar %s segundos para volver a enviar un anuncio.", TimeConvert(time));
		return 1;
	}

	if (CheckFilterViolation(params)) return SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tu anuncio tiene palabras inapropiadas.");

	if (StringContainsIP(params))
	{
		SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" Tu anuncio tiene direcciones IP.");
			
		new str[145];
		format(str, 145, "[ANTI-CHEAT] Aviso sobre %s (%d): Spam (%s)", ACCOUNT_INFO[playerid][ac_NAME], playerid, params);
    	SendMessageToAdmins(COLOR_ANTICHEAT, str);
		return 1;
	}

	new str_text[264];
	format(str_text, sizeof(str_text), "Anuncio: "COL_WHITE"%s [Teléfono: %d]", params, PLAYER_PHONE[playerid][player_phone_NUMBER]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD) && ACCOUNT_INFO[i][ac_DOUBT_CHANNEL] && !PLAYER_TEMP[playerid][py_NEW_USER])
			{
				SendResponsiveMessage(i, COLOR_LIGHT_ORANGE, str_text, 125);
			}
		}
	}

	format(str_text, sizeof(str_text), "[ANUNCIO] %s (%d) [Teléfono: %d]", PLAYER_TEMP[playerid][py_NAME], playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]);
	SendMessageToAdmins(COLOR_ANTICHEAT, str_text);

	PLAYER_TEMP[playerid][py_ANN_CHANNEL_TIME] = gettime();
	return 1;
}

CMD:g(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /g"COL_WHITE"ritar [TEXTO]");

	new str_text[190];
	format(str_text, 190, "%s grita: ¡%s!", PLAYER_TEMP[playerid][py_RP_NAME], params);

	//Do code
	strreplace(str_text, "[", "{dbc766}[");
	strreplace(str_text, "]", "]{E6E6E6}");

	//Negrita code
	strreplace(str_text, "<", "{A8A8A8}");
	strreplace(str_text, ">", "{E6E6E6}");

	ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:g("gritar");

CMD:s(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /s"COL_WHITE"usurrar [TEXTO]");

	new str_text[190];
	format(str_text, sizeof(str_text), "%s susurra: %s", PLAYER_TEMP[playerid][py_RP_NAME], params);

	//Do code
	strreplace(str_text, "[", "{dbc766}[");
	strreplace(str_text, "]", "]{E6E6E6}");

	//Negrita code
	strreplace(str_text, "<", "{A8A8A8}");
	strreplace(str_text, ">", "{E6E6E6}");

	ProxDetector(playerid, 5.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:s("susurrar");

CMD:desbug(playerid, params[])
{
	if (PLAYER_TEMP[playerid][py_CUFFED]) return ShowPlayerMessage(playerid, "~r~No puedes hacer eso estando esposado.", 3);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y , z + 0.5);
	new p_interior = GetPlayerInterior(playerid);

	if (IsPlayerInRangeOfPoint(playerid, 50.0, -198.002197, -1762.759643, 675.768737))
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL ||CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		SetPlayerPosEx(playerid, 1172.832763, -1323.269531, 15.400051, 270.0, 0, 0);
	}

	if (p_interior == 25 || p_interior == 26 || p_interior == 27)
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL ||CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		SetPlayerPosEx(playerid, 509.152374, -723.324951, 19.869243, 340.0, 0, 0);
		SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
	}
	return 1;
}

CMD:pos(playerid, params[])
{
	new Float:pos[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);
	SendClientMessageEx(playerid, COLOR_WHITE, "X: %f Y: %f Z: %f ANGLE: %f "COL_RED"|"COL_WHITE" Virtual World: %d "COL_RED"|"COL_WHITE" Interior: %d", pos[0], pos[1], pos[2], pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	return 1;
}

CMD:masflot(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x, y,z);
	SetPlayerPos(playerid,x,y,z+3);
	GameTextForPlayer(playerid, "Coordernadas subidas un 3", 3000, 5);
	return 1;
}

CMD:masflot2(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x, y,z);
	SetPlayerPos(playerid,x,y,z+10);
	GameTextForPlayer(playerid, "Coordernadas subidas un 10", 3000, 5);
	return 1;
}

CMD:masflot3(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x, y,z);
	SetPlayerPos(playerid,x,y,z+50);
	GameTextForPlayer(playerid, "Coordernadas subidas un 50", 3000, 5);
	return 1;
}

CMD:b(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /b "COL_WHITE"[TEXTO]");

    new str_text[190];
    format(str_text, sizeof(str_text), "[ID: %d] %s: (( %s ))", playerid, PLAYER_TEMP[playerid][py_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /do "COL_WHITE"[TEXTO]");

    new str_text[190];
    format(str_text, sizeof(str_text), "* %s (( %s ))", params, PLAYER_TEMP[playerid][py_RP_NAME]);
	ProxDetector(playerid, 15.0, str_text, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 85);
	return 1;
}

CMD:me(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /me "COL_WHITE"[TEXTO]");

	SendPlayerAction(playerid, params);
	return 1;
}
alias:me("y");

CMD:oldinventario(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ShowPlayerInventory(playerid, playerid);
	return 1;
}
alias:oldinventario("oldinv");

CMD:habilidades(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ShowPlayerSkills(playerid, playerid);
	return 1;
}
alias:habilidades("hab", "exp", "skills");

CMD:cuenta(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}
alias:cuenta("est");

CMD:web(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "Web: "COL_RED""SERVER_WEBSITE"");
	return 1;
}

CMD:discord(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "Discord: "COL_RED""SERVER_DISCORD"");
	return 1;
}

CMD:resetsans(playerid, params[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		PLAYER_MISC[i][MISC_MUTES] = 0;
		PLAYER_MISC[i][MISC_SANS] = 0;
		PLAYER_MISC[i][MISC_KIKEOS] = 0;
		PLAYER_MISC[i][MISC_BANEOS] = 0;
		PLAYER_MISC[i][MISC_JAILS] = 0;
	}
	return 1;
}

CMD:runtime(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "El servidor se ha iniciado: %s", ReturnTimelapse(ServerInitTime, gettime()));
	return 1;
}

CMD:accsaveall(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "Datos de usuarios guardados.");
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		SaveUserData(i);
		SavePlayerToysData(i);
		SavePlayerVehicles(i, false);
		SavePlayerSkills(i);
		SavePlayerWorks(i);
		SavePlayerMisc(i);
	}

	return 1;
}

CALLBACK: SavePlayerData(playerid)
{
	SaveUserData(playerid);
	SavePlayerToysData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerSkills(playerid);
	SavePlayerWorks(playerid);
	SavePlayerMisc(playerid);
	SavePlayerWeaponsData(playerid);
	return 1;
}

CMD:accsave(playerid, params[])
{
	if (gettime() < PLAYER_TEMP[playerid][py_SAVE_ACCOUNT_TIME] + 30)
	{
		new time = (30-(gettime()-PLAYER_TEMP[playerid][py_SAVE_ACCOUNT_TIME]));
		SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que esperar {62d743}%s "COL_WHITE"minutos para volver a guardar tus datos.", TimeConvert(time));
		return 1;
	}

	SaveUserData(playerid);
	SavePlayerToysData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerSkills(playerid);
	SavePlayerWorks(playerid);
	SavePlayerMisc(playerid);
	SavePlayerWeaponsData(playerid);

	PLAYER_TEMP[playerid][py_SAVE_ACCOUNT_TIME] = gettime();

	ShowPlayerNotification(playerid, "Datos guardados.", 3);
	return 1;
}

CMD:ayuda(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "Presiona N y haz click en Ayuda.");
	return 1;
}

CMD:armas(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	new
		dialog[500],
		line_str[128]
	;

	for(new i; i != 13; i ++)
	{
		if (!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

		format(line_str, sizeof line_str, ""COL_WHITE"%s | Slot "COL_RED"%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], i);
		strcat(dialog, line_str);
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Armas", dialog, "Cerrar", "");
	return 1;
}

CMD:gps(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	if (!PLAYER_OBJECT[playerid][po_GPS])
	{
		ShowPlayerMessage(playerid, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}

	SetPlayerChatBubble(playerid, "\n\n\n\n* Mira su GPS", 0xffcb90FF, 20.0, 2000);
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:stop(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:dineroall(playerid, params[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			GivePlayerCash(i, 10000);
		}
	}

	SendClientMessageToAll(0x40BE5EFF, "10K PARA TODOS.");
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}

CMD:borrarcp(playerid, params[])
{
	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]);
    	CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = INVALID_STREAMER_ID;

		ShowPlayerMessage(playerid, "Has cancelado la ruta antigua de tu GPS.", 3);
	}
	else ShowPlayerMessage(playerid, "~r~No tienes ningún punto marcado en tu GPS.", 3);
	return 1;
}

CMD:guia(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	if (!PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
	{
		ShowPlayerMessage(playerid, "No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.", 3, 1085);
		return 1;
	}

	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /guia "COL_WHITE"[ID o nombre]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador Desconectado.", 2);

	if (!PLAYER_PHONE[params[0]][player_phone_VALID]) return ShowPlayerMessage(playerid, "~r~Este jugador no tiene teléfono.", 2);
	if (!PLAYER_PHONE[params[0]][player_phone_VISIBLE_NUMBER]) return ShowPlayerMessage(playerid, "~r~Este jugador ha decidido no mostrar su número en la guía.", 3);

	SendClientMessageEx(playerid, COLOR_WHITE, "Teléfono de %s: "COL_RED"%d", PLAYER_TEMP[params[0]][py_RP_NAME], PLAYER_PHONE[params[0]][player_phone_NUMBER]);
	return 1;
}

CMD:responder(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	if (!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, para encenderlo usa /movil.", 3);

	if (!PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~No hay llamadas entrantes.", 2);
	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~No hay llamadas entrantes.", 2);
	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return ShowPlayerMessage(playerid, "~r~No hay llamadas entrantes.", 2);

	new to_playerid = PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID];

	PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	KillTimer(PLAYER_TEMP[to_playerid][py_TIMERS][6]);
	PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);

	ShowPlayerMessage(playerid, "Llamada establecida, usa ~g~/colgar ~w~para terminarla.", 3);
	ShowPlayerMessage(to_playerid, "Llamada establecida, usa ~g~/colgar ~w~para terminarla.", 3);
	return 1;
}

CMD:colgar(playerid, params[])
{
	if (!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, para encenderlo usa /movil.", 3);

	if (!PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~No hay llamadas entrantes.", 2);

	if (PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = false;
		ShowPlayerMessage(playerid, "Llamada finalizada.", 2);
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "No hay llamadas entrantes.", 3);

	switch(PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "Colgaste.", 2);
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "No has respondido la llamada.", 2);
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "Llamada finalizada.", 2);
		}
		default: ShowPlayerMessage(playerid, "~r~No estás en ninguna llamada.", 2);
	}
	return 1;
}

CMD:configuracion(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
	return 1;
}
alias:configuracion("config", "ajustes", "panel");

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if (!PROPERTY_INFO[i][property_VALID]) continue;
		if (PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

HideBankMenu(playerid)
{
    CancelSelectTextDrawEx(playerid);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][0]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][1]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][2]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][3]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][4]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][5]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][6]);
    PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
    return 1;
}

ShowBankMenu(playerid)
{
    SelectTextDrawEx(playerid, 0x618448FF);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][0]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][1]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][2]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][3]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][4]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][5]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_BANK_MENU][6]);
    PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = true;
    return 1;
}

CheckAtmPlayerAndExecute(playerid)
{
    if (PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] == 0) return 0;
        
    new info[3];
    Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
    if (info[0] != PICKUP_TYPE_ATM) return 0;
    
    new Float:pos[3]; 
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][py_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
    
    if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 0;

    if (BANK_ACCOUNT[playerid][bank_account_ID] == 0)
    {
        ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
        return 1;
    }
    ShowBankMenu(playerid);
    return 1;
}

CMD:vender(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2", 2);

	new option[24], to_playerid, extra, price;
	if (sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /vender hycoins <id> <cantidad> <precio>");

	if (price <= 0 || price > 10000000) return ShowPlayerMessage(playerid, "~r~El precio no es válido.", 3);
	if (!IsPlayerConnected(to_playerid)) return ShowPlayerMessage(playerid, "~r~El jugador no está conectado", 3);
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~Este jugador no está cerca tuya.", 3);
	if (PLAYER_TEMP[to_playerid][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No le puedes vender nada a este jugador por ahora.", 3);
	if (ACCOUNT_INFO[to_playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~El jugador no es nivel 2.", 3);

	if (price > CHARACTER_INFO[to_playerid][ch_CASH])
	{
		ShowPlayerMessage(playerid, "~r~El jugador no tiene el dinero que pides.", 3);
		return 1;
	}

	PLAYER_TEMP[to_playerid][py_TRICK_SELLER_PID] = playerid;
	PLAYER_TEMP[to_playerid][py_TRICK_SELLER_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_playerid][py_TRICK_PRICE] = price;
	PLAYER_TEMP[to_playerid][py_TRICK_SELLER_EXTRA] = extra;
	PLAYER_TEMP[to_playerid][py_TRICK_TIME] = gettime();

	if (!strcmp(option, "hycoins", true))
	{
		if (PLAYER_TEMP[to_playerid][py_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][py_TRICK_SELLER_EXTRA] > 10000000) return ShowPlayerMessage(playerid, "~r~Cantidad incorrecta", 3);
		if (PLAYER_TEMP[to_playerid][py_TRICK_SELLER_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return ShowPlayerMessage(playerid, "~r~No tienes esa cantidad", 3);

		new str_text[128];
		format(str_text, sizeof(str_text), "Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][py_RP_NAME]);
		ShowPlayerNotification(playerid, str_text, 4);
		ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		return 1;
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Syntax: /vender hycoins <id> <cantidad> <precio>");
	return 1;
}

CMD:echar(playerid, params[])
{
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /echar "COL_WHITE"[ID o nombre]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~El jugador no esta conectado.", 3);
	if (playerid == params[0]) return ShowPlayerMessage(playerid, "~r~No puedes expulsar a ti mismo.", 3);

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Este no es tú vehículo.", 3);
		if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Este no es tú vehículo.", 3);
		if (GetPlayerVehicleID(params[0]) != vehicleid) return ShowPlayerMessage(playerid, "~r~Este jugador no está en tu vehículo", 3);

		RemovePlayerFromVehicle(params[0]);

		SetPlayerChatBubble(playerid, "\n\n\n\n* Hecha a alguien de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
		return 1;
	}

	ShowPlayerMessage(playerid, "~r~No estás en tu propiedad o en tu vehículo.", 3);
	return 1;
}

SavePlayerNotification(playerid, const message[])
{
	new DB_Query[160];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PLAYER_NOTIFICATIONS`\
			(\
				`ID_USER`, `MESSAGE`, `DATE`\
			)\
			VALUES\
			(\
				'%d', '%s', '%i'\
			);\
		",
		ACCOUNT_INFO[playerid][ac_ID],
		message,
		gettime()
	);
	db_query(Database, DB_Query);
	return 1;
}

SendPlayerAction(playerid, action[])
{
	new str_text[190];
	format(str_text, sizeof str_text, "* %s %s *", PLAYER_TEMP[playerid][py_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 0xffcb90FF, 85);
	return 1;
}

#define DEFAULT_DIALOG_CAPTION SERVER_NAME
ShowDialog(playerid, dialogid)
{
	PLAYER_TEMP[playerid][py_PLAYER_WAITING_MP3_HTTP] = false;
	PLAYER_TEMP[playerid][py_DIALOG_RESPONDED] = false;

	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			new dialog[280];
			format(dialog, sizeof dialog, ""COL_WHITE"\
				Hola, "COL_RED"%s"COL_WHITE". Esta cuenta no esta registrada.\n\n\
				\t{E3E3E3}1. Contraseña\n\
				\t{5c5c5c}2. Correo\n\
				\t{5c5c5c}3. Sexo del personaje"COL_WHITE"\n\n\
				Ingrese una contraseña entre 6-18 caracteres.", PLAYER_TEMP[playerid][py_RP_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""COL_RED"Registrarse", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_LOGIN:
		{
			new dialog_login[164];
			format(dialog_login, sizeof dialog_login, ""COL_WHITE"\
				Hola, "COL_RED"%s"COL_WHITE". Esta cuenta ya está registrada.\n\nContraseña:", PLAYER_TEMP[playerid][py_RP_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""COL_RED"Ingresa a tu cuenta", dialog_login, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Correo electrónico", ""COL_WHITE"Ingresa una dirección de correo electrónico.\n\n\
			\t{5c5c5c}1. Contraseña\n\
			\t{E3E3E3}2. Correo\n\
			\t{5c5c5c}3. Sexo del personaje"COL_WHITE"\n\n\
			Esto le va a servir para poder recuperar su contraseña\nen caso que se la olvide.","Aceptar", "Cerrar");
        case DIALOG_REGISTER_SEX: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Sexo", ""COL_WHITE"Selecciona un sexo.\n\n\
        	\t{5c5c5c}1. Contraseña\n\
			\t{5c5c5c}2. Correo\n\
			\t{E3E3E3}3. Sexo del personaje"COL_WHITE"\n\n\
			Este va a ser el sexo inicial de su personaje.", "Hombre", "Mujer");
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_PIZZA_String, "Pedir", "Salir");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Salir");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_BURGER_String, "Pedir", "Salir");
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_PLAYER_ATTACHED_OBJECTS + 2)], line_str[64];
			format(dialog, sizeof dialog, ""COL_WHITE"Accesorio\t"COL_RED"Colocado\n");
			for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
			{
				if (ACCOUNT_INFO[playerid][ac_SU])
				{
					if (PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if (PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if (i >= MAX_NU_TOYS)
					{
						if (PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\t"COL_RED"No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if (PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if (PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, ""COL_RED"Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Mis accesorios", dialog, ">>", "-");
			SavePlayerToysData(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if (!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
			    ShowPlayerMessage(playerid, "~r~Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.", 3);
				return 1;
			}

			new caption[48];
			format(caption, sizeof caption, ""COL_RED"Accesorio %s", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[256];
			if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, ""COL_WHITE"Guardar este accesorio\n"COL_WHITE"Cambiar el nombre del accesorio\n"COL_WHITE"Configurar el accesorio\n"COL_WHITE"Color primario\n"COL_WHITE"Color secundario\n"COL_WHITE"Eliminar este accesorio");
			else
			{
				if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
				    ShowPlayerMessage(playerid, "Este accesorio es nuevo y aún no ha sido configurado, configuralo desde ~y~'Configurar el accesorio'", 4);
					format(dialog, sizeof dialog, ""COL_WHITE"Colocarte el accesorio\n"COL_WHITE"Cambiar el nombre del accesorio\n"COL_WHITE"Configurar el accesorio\n"COL_WHITE"Color primario\n"COL_WHITE"Color secundario\n"COL_WHITE"Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, ""COL_WHITE"Colocarte el accesorio\n"COL_WHITE"Cambiar el nombre del accesorio\n"COL_WHITE"Configurar el accesorio\n"COL_WHITE"Color primario\n"COL_WHITE"Color secundario\n"COL_WHITE"Eliminar este accesorio");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar nombre", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"¿Estás seguro que quieres borrar el accesorio %s?", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar accesorio", dialog, "Si", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
		    ShowPlayerMessage(playerid, "Selecciona en que parte del cuerpo quieres colocar este accesorio.", 3);

			new caption[48];
			format(caption, sizeof caption, ""COL_RED"Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), ""COL_WHITE"%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, ""COL_WHITE"Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
		    ShowPlayerMessage(playerid, "Selecciona el color 0 para poner el color original del accesorio.", 3);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			ShowPlayerMessage(playerid, "Selecciona el color 0 para poner el color original del accesorio.", 3);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_BANK:
		{
			if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~No tienes cuenta bancaria.", 2);

			new caption[80];
			format(caption, sizeof caption, "ID: %s - Balance actual: "COL_GREEN"%s$", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_ID]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption,
				""COL_WHITE"1. Retirar dinero\n"COL_WHITE"2. Depositar dinero\n"COL_WHITE"3. Transferir dinero\n"COL_WHITE"4. Últimas transacciones",
			">>", "-");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_GREEN"Crear cuenta bancaria",
				""COL_WHITE"Presione en Crear para obtener su cuenta bancaria.",
			"Crear", "Salir");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, ""COL_WHITE"Dinero actual: "COL_GREEN"%s$\n"COL_WHITE"Ingrese la cantidad a retirar.", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_GREEN"Retirar", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, ""COL_WHITE"Dinero actual: "COL_GREEN"%s$\n"COL_WHITE"Ingrese la cantidad a depositar.", number_format_thousand(CHARACTER_INFO[playerid][ch_CASH]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_GREEN"Depositar", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_GREEN"Transferir", ""COL_WHITE"Ingrese el número de cuenta a donde quiere transferir dinero.", ">>", "Atrás");
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2 para transferir.", 3);
			new dialog[170];
			format(dialog, sizeof dialog, ""COL_WHITE"Transferir a cuenta: "COL_GREEN"%s\n"COL_WHITE"Dinero actual: "COL_GREEN"%s$\n\n"COL_WHITE"Ingrese la cantidad a transferir.", number_format_thousand(PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_GREEN"Transferir", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			new dialog[2675];
			format(dialog, sizeof dialog, ""COL_WHITE"Fecha\t"COL_WHITE"Concepto\t"COL_WHITE"Importe\n");

			new DBResult:Result, transactions, DB_Query[140];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d;", BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_GREEN"No hay transacciones en tu cuenta.");
			else
			{
				new line_str[125];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new trasaction_type, ammount, extra, date[24];
					trasaction_type = db_get_field_assoc_int(Result, "TRANSACTION_TYPE");
					ammount = db_get_field_assoc_int(Result, "AMMOUNT");
					extra = db_get_field_assoc_int(Result, "EXTRA");
					db_get_field_assoc(Result, "DATE", date, 24);

					switch(trasaction_type)
					{
						case BANK_TRANSACTION_WITHDRAW:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"RETIRADA EFECTIVO\t"COL_WHITE"-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_DEPOSIT:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"INGRESO EN EFECTIVO\t"COL_WHITE"%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_SENT:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"TRANSFERENCIA A LA CUENTA %d\t"COL_WHITE"-%s$\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_RECE:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"TRANSFERENCIA DE LA CUENTA %d\t"COL_WHITE"%s$\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_CREATE_ACCOUNT:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"CREACION DE LA CUENTA\t"COL_WHITE"%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_PROPERTY:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"PROPIEDAD COMPRADA\t"COL_WHITE"-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_PROPERTY:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"PROPIEDAD VENDIDA\t"COL_WHITE"%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_VEHICLE:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"VEHICULO COMPRADO\t"COL_WHITE"-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_VEHICLE:
						{
							format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"VEHICULO VENDIDO\t"COL_WHITE"%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
					}

					transactions ++;
					db_next_row(Result);
				}
				format(line_str, sizeof line_str, ""COL_WHITE"DINERO ACTUAL:\t"COL_GREEN"%s$", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
				strcat(dialog, line_str);
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, "ID: %d", BANK_ACCOUNT[playerid][bank_account_ID]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"24/7", DIALOG_247_LIST_String, ">>", "-");
		case DIALOG_HOSPITAL_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Farmacia", ""COL_WHITE"Producto\t"COL_WHITE"Precio\n\
				"COL_WHITE"5 Vendas\t"COL_GREEN"70$\n\
				"COL_WHITE"10 Medicamentos\t"COL_GREEN"170$\n\
				"COL_WHITE"1 Botiquín\t"COL_GREEN"720$\n", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if (PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\n", i + 1, PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, ""COL_RED"Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - Alimentos", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Alimento - %s", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, ""COL_WHITE"1. Consumir\n"COL_WHITE"2. Eliminar", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Alimentos - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus alimentos?\nEsta opción no se puede deshacer y perderás todos lo que haya.", "Eliminar", "Atrás");
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, ""COL_RED"Teléfono - %d", PLAYER_PHONE[playerid][player_phone_NUMBER]);

			new dialog[200];
			if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) format(dialog, sizeof dialog, "Llamar\nEnviar mensaje\nApagar teléfono");
			else format(dialog, sizeof dialog, ""COL_WHITE"Encender teléfono\nLlamar\nEnviar mensaje");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Cerrar");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if (!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;

				contacts ++; listitem ++;
			}
			if (contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, ""COL_GREEN"+"COL_WHITE" Añadir contacto\n"); listitem ++;
			}
			if (contacts > 0)
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, ""COL_RED"-"COL_WHITE" Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Contactos", dialog, "Ver", "Cerrar");
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", ">>", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", ">>", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"%s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, ""COL_WHITE"Llamar\n"COL_WHITE"Enviar mensaje\n"COL_WHITE"Cambiar nombre del contacto\n"COL_WHITE"Eliminar este contacto", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"%s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre actual: %s\nTeléfono: %d\n\nIndica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"%s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, ""COL_WHITE"¿Está seguro de que desea eliminar el siguiente contacto?\n\nNombre: %s\nTeléfono: %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Si", "No");
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar todo", ""COL_WHITE"¿Está seguro de que quiere eliminar todos sus contactos?\nEsta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Llamar", ""COL_WHITE"¿A quién quieres llamar?\nIndique el número al que desea llamar.", ">>", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Mensaje", ""COL_WHITE"¿A quién quieres enviarle el mensaje?\nIndique el número al que desea enviar el mensaje.", ">>", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Mensaje", ""COL_WHITE"Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", ">>", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Mensaje", ""COL_WHITE"Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", ">>", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, ""COL_WHITE"Fecha\t"COL_WHITE"Destinario\t"COL_WHITE"Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 30;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], to, message[64];
					to = db_get_field_assoc_int(Result, "TO");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);

					format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", date, convertPhoneNumber(playerid, to), message);
					strcat(dialog, line_str);

					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Últimos %d mensajes enviados", messages);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "");
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, ""COL_WHITE"Fecha\t"COL_WHITE"Remitente\t"COL_WHITE"Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 30;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], from, message[64];
					from = db_get_field_assoc_int(Result, "FROM");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);

					format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", date, convertPhoneNumber(playerid, from), message);
					strcat(dialog, line_str);

					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Últimos %d mensajes recibidos", messages);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "");
			return 1;
		}
		case DIALOG_PHONE_MESSAGE_LIST:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Mensajes",  "Enviado\nRecibidos", ">>", "Cerrar");
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Confirmar compra", ""COL_WHITE"Haga click en el botón de Comprar para confirmar.", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"GPS",  "Lugares guardados\nPropiedades\nVehículos\nOtros\nTrabajos", ">>", "-");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, ""COL_WHITE"Lugar\t{FF846A}Distancia\n");

			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++ )
			{
				if (!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"%.2f Km\n", listitem + 1, PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;

				sites ++; listitem ++;
			}
			if (sites < MAX_PLAYER_GPS_SAVES)
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, ""COL_WHITE"+ Añadir lugar actual\n"); listitem ++;
			}
			if (sites > 0)
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, ""COL_RED"Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis lugares", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Añadir lugar", "Tu posición actual será guardada en este lugar para ir más tarde.\nIndica el nombre de este lugar para guardarlo.", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis lugares - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus lugares?\nEsta opción no se puede deshacer y perderás todos los lugares guardados.", "Eliminar", "Atrás");
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "GPS - %s", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, ""COL_WHITE"1. Marcar coordenadas en el GPS\n"COL_WHITE"2. Cambiar nombre de este lugar\n"COL_WHITE"3. Eliminar este lugar del GPS", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\nIndica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Cambiar nombre de un lugar", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\n¿Está seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "GPS - Eliminar un lugar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS - Otros", "Hospitales\nTiendas de Ropa\nNegocios\nRestaurantes\nBancos\nCajeros\nGasolineras\nConcesionarios\nBanco Central\nPolicías\nTaller mecánico\nHelipuerto", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\tDistancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if (work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

				new line_str[85];
				format(line_str, sizeof line_str, ""COL_WHITE"%c%s\t"COL_WHITE"%d\t"COL_WHITE"%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Trabajos", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_TRABAJOS_TELEPORTS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				new line_str[85];
				format(line_str, sizeof line_str, ""COL_WHITE"%c%s (id: %d)\t"COL_WHITE"%d\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], i, work_info[i][work_info_LEVEL]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Trabajos", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Hospitales", DIALOG_PLAYER_GPS_SITE_0_String, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if (sites >= MAX_LISTITEMS) break;
				if (ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas de ropa", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if (sites >= MAX_LISTITEMS) break;
				if (ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Negocios", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if (sites >= MAX_LISTITEMS) break;
				if (ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Restaurantes", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if (sites >= MAX_LISTITEMS) break;
				if (ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LV) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Bancos", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (sizeof(ATM_BANK) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ATM_BANK); i++ )
			{
				format(line_str, sizeof line_str, ""COL_WHITE"Cajero %d\t"COL_WHITE"%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Cajeros", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				format(line_str, sizeof line_str, ""COL_WHITE"Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Gasolineras", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //Policias
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if (sites >= MAX_LISTITEMS) break;
				if (ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Policías", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			for(new i = 0; i != MAX_SU_PROPERTIES; i ++) PLAYER_TEMP[playerid][py_PLAYER_GPS_SELECTED_PROPERTY][i] = -1;

			new dialog[90 * (MAX_SU_PROPERTIES + 2)];
			format(dialog, sizeof dialog, "Propiedad\tDistancia\n");

			new DBResult:Result, DB_Query[250];
			format(DB_Query, sizeof DB_Query, "SELECT `PROPERTY_OWNER`.*, `PROPERTY`.`EXT_X`, `PROPERTY`.`EXT_Y`, `PROPERTY`.`EXT_Z` FROM `PROPERTY_OWNER`, `PROPERTY` WHERE `PROPERTY_OWNER`.`ID_USER` = '%d' AND `PROPERTY`.`ID` = `PROPERTY_OWNER`.`ID_PROPERTY`;", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No tienes propiedades");
			else
			{
				new line_str[90], properties;
				for(new i; i < db_num_rows(Result); i++ )
				{
					if (properties >= MAX_SU_PROPERTIES) break;

					new property_name[24], Float:pos[3];
					PLAYER_TEMP[playerid][py_PLAYER_GPS_SELECTED_PROPERTY][properties] = db_get_field_assoc_int(Result, "ID_PROPERTY");
					db_get_field_assoc(Result, "PROPERTY_NAME", property_name, 24);
					pos[0] = db_get_field_assoc_float(Result, "EXT_X");
					pos[1] = db_get_field_assoc_float(Result, "EXT_Y");
					pos[2] = db_get_field_assoc_float(Result, "EXT_Z");

					format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%.2f Km\n", properties + 1, property_name, (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					strcat(dialog, line_str);

					properties ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis propiedades", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, ""COL_WHITE"Vehículo\t"COL_WHITE"Matrícula\t"COL_WHITE"Distancia\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if (total_vehicles > MAX_SU_VEHICLES) break;

				if (PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][total_vehicles] = i;

					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);

					new line_str[115];
					if (ACCOUNT_INFO[playerid][ac_SU]) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					else
					{
						if (PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE]) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s (%d)\t"COL_RED"%s\t"COL_WHITE"%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
						else format(line_str, sizeof line_str, "{666666}%d. %s (%d)\t{666666}%s\t{666666}%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					}
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if (total_vehicles == 0) strcat(dialog, ""COL_WHITE"No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Mis vehículos", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_GASOLINE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Gasolinera", "Cargar gasolina\nLlenar tanque\nComprar bidón", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_HELI_OPTIONS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Helipuerto", "Cargar gasolina\nModificar", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_LOAD_GASOLINE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Gasolinera", ""COL_WHITE"Ingrese la cantidad a cargar, cada litro cuesta 5$.", "Cargar", "Cerrar");
			return 1;
		}
		case DIALOG_FUEL_DRUM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Poner gasolina", ""COL_WHITE"Ingrese la cantidad a cargar desde su bidón de gasolina.", "Cargar", "Cerrar");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"%s", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[256];
			format(dialog, sizeof dialog, ""COL_WHITE"Cambiar nombre de la propiedad\n"COL_WHITE"Echar a todas las personas\n");
			if (PLAYER_CREW[playerid][player_crew_VALID])
			{
				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, "Convertir a propiedad de banda\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Cambiar nombre de la propiedad", ""COL_WHITE"Ingresa el nuevo nombre de la propiedad.", ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_MP3: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "MP3 - Buscar una canción", "Indica el nombre y cantante de la canción que quieres reproducir.\nSe recomienda añadir la palabra 'audio' para canción directa.\n\nPor ejemplo: Lynyrd Skynyrd - Free Bird (Audio)", "Buscar", "Salir");
		case DIALOG_BUY_VEHICLE:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 0;
			if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 0;
			if (!SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 0;

			new dialog[800];
			format(dialog, sizeof dialog,
				""COL_WHITE"Vehículo: %s\n\
				"COL_WHITE"Nivel necesario:{df423d} %d\n\
				"COL_WHITE"Precio del vehículo:{df423d} %s$\n\
				"COL_WHITE"Velocidad máxima: %d Km/h\n\
				"COL_WHITE"Capacidad de tanque:{67df3d} %.1f Litros\n\
				"COL_WHITE"Espacio maletero: %d\n\
				"COL_WHITE"Seguro: {dfbf3d}%s$"COL_GREEN"\n\n",
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL],
				number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]),
				floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
				number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100)
			);

			new str[145];
			if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
			{
				format(str, sizeof str, "{dc0606}Necesitas ser al menos nivel %d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Salir", "");
				return 1;
			}

			if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU])
			{
				format(str, sizeof str, "{dc0606}Necesitas membresía VIP%d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Salir", "");
				return 1;
			}

			if (BANK_ACCOUNT[playerid][bank_account_ID] == 0)
			{
				strcat(dialog, "{dc0606}Necesitas una cuenta bancaria para poder comprar vehículos.");
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Salir", "");
				return 1;
			}

			if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
			{
				new diff = SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] - BANK_ACCOUNT[playerid][bank_account_BALANCE];
				format(str, sizeof str, "{dc0606}Te faltan %s$ en tu cuenta bancaria para poder comprar este vehículo.", number_format_thousand(diff));
				strcat(dialog, str);
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Salir", "");
				return 1;
			}

			if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD])
			{
				format(str, sizeof str, "{dc0606}Te faltan %d "SERVER_COIN" para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] - ACCOUNT_INFO[playerid][ac_SD]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Salir", "");
				return 1;
			}

			if (!SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]) format(str, sizeof str, "Balance de tu cuenta bancaria: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar este vehículo?", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE] - SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
			else format(str, sizeof str, "Tus monedas: %d "SERVER_COIN"\nMonedas tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar este vehículo?", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SD] - SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
			strcat(dialog, str);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Comprar vehículo", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Notaría", ""COL_WHITE"Vender una propiedad al banco\n"COL_WHITE"Vender un vehículo al banco\n"COL_WHITE"Vender una propiedad a una persona\n"COL_WHITE"Vender un vehículo a una persona", ">>", "-");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[45 * (MAX_SU_PROPERTIES + 2)];
			format(dialog, sizeof dialog, ""COL_WHITE"Propiedad\n");

			new DBResult:Result, DB_Query[80];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No tienes propiedades");
			else
			{
				new line_str[45], properties;
				for(new i; i < db_num_rows(Result); i++ )
				{
					if (properties >= MAX_SU_PROPERTIES) break;

					new property_name[24];
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][properties] = db_get_field_assoc_int(Result, "ID_PROPERTY");
					db_get_field_assoc(Result, "PROPERTY_NAME", property_name, 24);

					format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\n", properties + 1, property_name);
					strcat(dialog, line_str);

					properties ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Selecciona la propiedad", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new Float:price, payment;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
			if (ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.70) );
			else payment = floatround( floatmul(price, 0.70) );

			new dialog[160];
			format(dialog, sizeof dialog, ""COL_WHITE"Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Está seguro de que quiere venderla?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new Float:price, min_price, max_price;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );

			new dialog[250];
			format(dialog, sizeof dialog,
			""COL_WHITE"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender esta propiedad?",
			number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[250];
			format(dialog, sizeof dialog, ""COL_WHITE"Quieres vender esta propiedad por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][py_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[240];
			format(dialog, sizeof dialog,
				""COL_WHITE"%s te quiere vender una propiedad.\n\n\
				Propiedad: %d\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar esta propiedad?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_RP_NAME],
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(PLAYER_TEMP[playerid][py_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][py_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Oferta recibida", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, ""COL_WHITE"Vehículo\t"COL_RED"Matrícula\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if (total_vehicles > MAX_SU_VEHICLES) break;

				if (PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95];
					format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_RED"%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if (total_vehicles == 0) strcat(dialog, ""COL_WHITE"No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Selecciona el vehículo", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new Float:price, payment;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			if (ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.70) );
			else payment = floatround( floatmul(price, 0.70) );

			new dialog[160];
			format(dialog, sizeof dialog, ""COL_WHITE"Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Está seguro de que quiere venderlo?", number_format_thousand( VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] ), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new Float:price, min_price, max_price;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );

			new dialog[250];
			format(dialog, sizeof dialog,
			""COL_WHITE"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender este vehículo?",
			number_format_thousand(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, ""COL_RED"Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[250];
			format(dialog, sizeof dialog, ""COL_WHITE"Quieres vender este vehículo por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][py_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				""COL_WHITE"%s te quiere vender un vehículo.\n\n\
				"COL_WHITE"Vehículo: %s\n\
				"COL_WHITE"Matrícula: %s\n\
				"COL_WHITE"Precio:{df423d} %s$\n\n\
				"COL_WHITE"Balance tras la compra: "COL_GREEN"%s$\n\n\
				"COL_WHITE"¿Quieres comprar este vehículo?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_RP_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(PLAYER_TEMP[playerid][py_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][py_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Oferta recibida", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			new vehicleid = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];

			new caption[45];
			format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new DBResult:Result, DB_Query[250], dialog[80 * TOTAL_TUNING_PARTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`PART`, `COMPONENTS_INFO`.`PIECES` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID` GROUP BY `COMPONENTS_INFO`.`PART`;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);

			format(dialog, sizeof dialog, ""COL_WHITE"Categoría\tPiezas necesarias\tEstimación\n");

			if (db_num_rows(Result) == 0) strcat(dialog, "{666666}Este vehículo no se puede tunear");
			else
			{
				new line_str[80];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if (i >= TOTAL_TUNING_PARTS)
					{
						printf("[debug]  Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
						break;
					}

					db_get_field_assoc(Result, "PART", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);
					PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");
					format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_RED"%d\t{56CA2E}%s$\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
					strcat(dialog, line_str);

					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			new DBResult:Result, DB_Query[300], dialog[40 * MAX_TUNING_PARTS_COMPONENTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`ID`, `COMPONENTS_INFO`.`NAME` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `COMPONENTS_INFO`.`PART` = '%s' AND `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID`;", PLAYER_TEMP[playerid][py_TUNING_SELECTED_PART], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) printf("[ERROR] No hay componentes asignados en la base de datos");
			else
			{
				new line_str[40];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if (i >= MAX_TUNING_PARTS_COMPONENTS)
					{
						printf("[debug]  Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
						break;
					}

					PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = db_get_field_assoc_int(Result, "ID");
					db_get_field_assoc(Result, "NAME", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);

					format(line_str, sizeof line_str, ""COL_WHITE"%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
					strcat(dialog, line_str);

					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Tunear", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[450];
			format(dialog, sizeof dialog,
			"\
				"COL_WHITE"Opción\t"COL_RED"Piezas necesarias\t"COL_WHITE"Estimación\n\
				"COL_WHITE"Reparación completa\t"COL_RED"10\t"COL_WHITE"500$\n\
			");

			if (IsPlayerInDynamicArea(playerid, Mechanic_Area))
			{
				new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
				strcat(dialog, ""COL_WHITE"Pintar vehículo\t"COL_RED"5\t"COL_WHITE"250$\n");
				if (PLAYER_SKILLS[playerid][WORK_MECHANIC] >= 100)
				{
					strcat(dialog, ""COL_WHITE"Eliminar componentes\n");
					strcat(dialog, ""COL_WHITE"Tunear vehículo\n");
					if (paintjobs > 0) strcat(dialog, ""COL_WHITE"Paintjob\t"COL_RED"15\t"COL_WHITE"750$\n");
				}
				else
				{
					strcat(dialog, "{666666}Eliminar componentes\n");
					strcat(dialog, "{666666}Tunear vehículo\n");
					if (paintjobs > 0) strcat(dialog, "{666666}Paintjob\t{666666}15\t{666666}750$\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio de la reparación.\nRango de precio: 0$ - 2.000$", ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para pintar el vehículo.\nRango de precio: 0$ - 1.750$", ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, "Indica el precio para tunear el vehículo.\nRango de precio: 0$ - %s$", number_format_thousand((PLAYER_TEMP[playerid][py_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog,

				"\
					"COL_WHITE"El mecánico %s te ofrece:\n\
						\t%s\n\
					\n\
					"COL_WHITE"Precio: %s$\n\
					¿Quieres aceptarlo?\n\
				",
					PLAYER_TEMP[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][py_RP_NAME],
					PLAYER_TEMP[playerid][py_MECHANIC_TEXT],
					number_format_thousand(PLAYER_TEMP[playerid][py_MECHANIC_PRICE])
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mecánico", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TUNING_SELECT_COL_SLOT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Pintar vehículo", ""COL_WHITE"Color primario\n"COL_WHITE"Color secundario", ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, ""COL_WHITE"Pintar color primario\n"COL_WHITE"Pintar color secundario", ">>", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_SELECT_COLOR:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Pintar vehículo", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);


			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_REMOVE:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			new dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], listitem;

			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;

				new DBResult:Result, DB_Query[60];
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `COMPONENTS_INFO` WHERE `ID` = '%d';", GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);

				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					new part[24], name[24];
					db_get_field_assoc(Result, "PART", part, 24);
					db_get_field_assoc(Result, "NAME", name, 24);
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = i;

					new line_str[80];
					format(line_str, sizeof line_str, ""COL_WHITE"%s > %s\n", part, name);
					strcat(dialog, line_str);
				}
				db_free_result(Result);
				listitem ++;
			}
			if (listitem == 0)
			{
				PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = 0;
				strcat(dialog, ""COL_WHITE"Vehículo sin tunear");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Componentes", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], listitem;
			format(caption, sizeof caption, "Componentes de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			format(dialog, sizeof dialog, ""COL_WHITE"Componente\t"COL_RED"Piezas\n");

			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;

				new DBResult:Result, DB_Query[60];
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `COMPONENTS_INFO` WHERE `ID` = '%d';", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);

				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					new part[24], name[24];
					db_get_field_assoc(Result, "PART", part, 24);
					db_get_field_assoc(Result, "NAME", name, 24);
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = i;
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");

					new line_str[80];
					format(line_str, sizeof line_str, ""COL_WHITE"%s > %s\t"COL_RED"+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES]);
					strcat(dialog, line_str);
				}
				db_free_result(Result);
				listitem ++;
			}
			if (listitem == 0)
			{
				PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = 0;
				strcat(dialog, ""COL_WHITE"Vehículo sin tunear");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "Paintjob - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if (paintjobs == 0)
			{
				ShowPlayerMessage(playerid, "~r~Este vehículo no soporta paintjobs.", 3);
				ShowDialog(playerid, DIALOG_MECHANIC_MENU);
				return 1;
			}

			strcat(dialog, ""COL_WHITE"Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, ""COL_WHITE"Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Precio por semilla\n");

			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Semillas", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"Ingresa la cantidad de semillas de %s que desea comprar.\nCada una vale "COL_GREEN"%d$"COL_WHITE".", seed_info[ PLAYER_TEMP[playerid][py_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ PLAYER_TEMP[playerid][py_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Semillas ", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, ""COL_WHITE"Planta\t"COL_WHITE"Semilla requerida\t"COL_WHITE"Semillas necesarias\n");

			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];

				if (seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "%s "COL_GREEN"(legal)\t"COL_WHITE"%s\t"COL_WHITE"%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "%s "COL_ORANGE"(ilegal)\t"COL_WHITE"%s\t"COL_WHITE"%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Plantar", dialog, ">>", "-");
		}
		case DIALOG_BLACK_MARKET:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Mercado negro", "Comprar armas\nComprar munición para mis armas", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			new dialog[64 * (sizeof(BLACK_MARKT_WEAPONS) + 2)];
			format(dialog, sizeof dialog, ""COL_WHITE"Producto\t"COL_WHITE"Precio\n");

			for(new i = 0; i != sizeof BLACK_MARKT_WEAPONS; i ++)
			{
				new line_str[64];
				format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_GREEN"%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Armas", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO_STOCK:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Balas", ""COL_WHITE"Producto\t"COL_WHITE"Precio\n\
				"COL_WHITE"Balas de Pistola\t"COL_GREEN"300$\n\
				"COL_WHITE"Balas de Subfusil\t"COL_GREEN"500$\n\
				"COL_WHITE"Balas de Rifle\t"COL_GREEN"700$\n\
				"COL_WHITE"Balas de Escopeta\t"COL_GREEN"850$\n", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;

			for(new i; i != 13; i ++)
			{
				if (!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%s\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if (listitem == 0) strcat(dialog, ""COL_WHITE"No tienes armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Seleccionar arma", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			ResetItemBody(playerid);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Balas", ""COL_WHITE"Cantidad\t"COL_WHITE"Precio\n\
				"COL_WHITE"50 Balas\t"COL_GREEN"450$\n\
				"COL_WHITE"100 Balas\t"COL_GREEN"650$\n\
				"COL_WHITE"250 Balas\t"COL_GREEN"850$\n\
				"COL_WHITE"370 Balas\t"COL_GREEN"1350$\n", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, ""COL_WHITE"Arma\t"COL_WHITE"Munición\t"COL_WHITE"Slot\n");

			for(new i; i != 13; i ++)
			{
				if (!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_WHITE"%s\t"COL_WHITE"%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			strcat(dialog, ""COL_RED"Eliminar todo\n");
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 13 + 20;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Armas", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar todo", "¿Está seguro de que quiere eliminar todas sus armas?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, ""COL_WHITE"Arma: %s\nMunición: %s\n\n¿Está seguro de que quiere eliminar esta arma?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar arma", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Animaciones", DIALOG_ANIMS_String, ">>", "X");
		case DIALOG_TRICKS_FOOD:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Alimento\nNombre: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_POCKET[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Medicamento\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_VENDAS:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Vendas\nCantidad: %d\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_BOTIKIN:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Botiquín\nCantidad: %d\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_CUETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Botiquín\nCantidad: %d\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Marihuana\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Crack\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			new dialog[150];
			format(dialog, sizeof dialog, ""COL_WHITE"%s te quiere vender %d "SERVER_COIN" a %s$.",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Venta", dialog, "Si", "No");
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			new dialog[180];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Arma\nNombre: %s\nMunición: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_RP_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if (max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, ""COL_WHITE"Arma\t"COL_WHITE"Munición\t"COL_WHITE"Slot\n");

			for(new i = 0; i != max_slots; i ++)
			{
				if (VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s\t%d\n", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]), i);
							strcat(dialog, line_str);
							PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
						}
					}

					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, ""COL_RED"%s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, ""COL_RED"Eliminar todo\n"); listitem ++;

			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][gb_vehicle_PARAMS_BOOT] = true;
			UpdateVehicleParams(PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "-");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Maletero - Eliminar todo", ""COL_WHITE"¿Está seguro de que quiere eliminar todo de su maletero?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			new caption[45];
			format(caption, sizeof caption, ""COL_RED"%s", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Sacar\nEliminar", ">>", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];
			format(dialog, sizeof dialog, ""COL_WHITE"Arma: %s\nMunición: %s\n\n¿Está seguro de que quiere eliminar esta arma de este maletero?\nEsta opción no se puede deshacer.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Maletero - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[60 * sizeof(POLICE_SKINS)], line_str[60], listitem;
			format(dialog, sizeof dialog, ""COL_WHITE"Ropa\t"COL_WHITE"Rango necesario\n");
			for(new i = 0; i != sizeof POLICE_SKINS; i ++)
			{
				if (POLICE_SKINS[i][police_skin_TYPE] != CHARACTER_INFO[playerid][ch_SEX]) continue;

				if (POLICE_SKINS[i][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d\t"COL_WHITE"%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ropa", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			new dialog[45 * 6], line_str[45];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountPoliceRadioPlayers(i);

				if (PLAYER_TEMP[playerid][py_POLICE_RADIO] == i) format(line_str, sizeof line_str, ""COL_WHITE"Frecuencia %d: %d personas\n", i + 1, players);
				else format(line_str, sizeof line_str, "{666666}Frecuencia %d: %d personas\n", i, players);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona la frecuencia", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15],
				listitem,
				start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;

			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[600];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS`, `PLAYER_WORKS` WHERE `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_WORKS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`SET` = '1' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_SKILLS`.`TOTAL` DESC LIMIT %d, %d;", WORK_POLICE, WORK_POLICE, PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24],
					last_connection[24],
					connected,
					rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");	
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "TOTAL");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, POLICE_RANKS[rank]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, POLICE_RANKS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;
				db_next_row(Result);
			}
			
			db_free_result(Result);
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;

			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;

			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_LIGHT_BLUE"Policías", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_MAFIA_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15],
				listitem,
				start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;

			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[600];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS`, `PLAYER_WORKS` WHERE `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_WORKS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`SET` = '1' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_SKILLS`.`TOTAL` DESC LIMIT %d, %d;", WORK_MAFIA, WORK_MAFIA, PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24],
					last_connection[24],
					connected,
					rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");	
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "TOTAL");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, MAFIA_RANKS[rank]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, MAFIA_RANKS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;
				db_next_row(Result);
			}
			
			db_free_result(Result);
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;

			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;

			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"La cosa nostra", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_MAFIA_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_MAFIA);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "TOTAL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if (!found) return 1;
			if (current_rank > PLAYER_SKILLS[playerid][WORK_MAFIA])
			{
				ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, ""COL_RED"%s", name);

			new dialog[45 * sizeof(MAFIA_RANKS)], line_str[45];
			format(dialog, sizeof dialog, ""COL_WHITE"Civil (eliminar)\n");

			for(new i = 1; i != sizeof MAFIA_RANKS; i ++)
			{
				if (i > PLAYER_SKILLS[playerid][WORK_MAFIA])
				{
					if (current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", MAFIA_RANKS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", MAFIA_RANKS[i]);
				}
				else
				{
					if (current_rank == i) format(line_str, sizeof line_str, ""COL_WHITE"%s (actual)\n", MAFIA_RANKS[i]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%s\n", MAFIA_RANKS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_ENEMY_MAFIA_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15],
				listitem,
				start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;

			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[600];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS`, `PLAYER_WORKS` WHERE `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_WORKS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`SET` = '1' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_SKILLS`.`TOTAL` DESC LIMIT %d, %d;", WORK_ENEMY_MAFIA, WORK_ENEMY_MAFIA, PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24],
					last_connection[24],
					connected,
					rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");	
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "TOTAL");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, ENEMY_MAFIA_RANKS[rank]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, ENEMY_MAFIA_RANKS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;
				db_next_row(Result);
			}
			
			db_free_result(Result);
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;

			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;

			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{ff9b00}The Crew Criminals", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_ENEMY_MAFIA_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_ENEMY_MAFIA);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "TOTAL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if (!found) return 1;
			if (current_rank > PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA])
			{
				ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, ""COL_RED"%s", name);

			new dialog[45 * sizeof(ENEMY_MAFIA_RANKS)], line_str[45];
			format(dialog, sizeof dialog, ""COL_WHITE"Civil (eliminar)\n");

			for(new i = 1; i != sizeof ENEMY_MAFIA_RANKS; i ++)
			{
				if (i > PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA])
				{
					if (current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ENEMY_MAFIA_RANKS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", ENEMY_MAFIA_RANKS[i]);
				}
				else
				{
					if (current_rank == i) format(line_str, sizeof line_str, ""COL_WHITE"%s (actual)\n", ENEMY_MAFIA_RANKS[i]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%s\n", ENEMY_MAFIA_RANKS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_POLICE);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "TOTAL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if (!found) return 1;
			if (current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
			{
				ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, "Policía - %s", name);

			new dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
			format(dialog, sizeof dialog, ""COL_WHITE"Civil (eliminar)\n");

			for(new i = 1; i != sizeof POLICE_RANKS; i ++)
			{
				if (i > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					if (current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
				}
				else
				{
					if (current_rank == i) format(line_str, sizeof line_str, ""COL_WHITE"%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%s\n", POLICE_RANKS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Equiparse", ""COL_WHITE"Armas\nChaleco antibalas y vida\nBalas", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, ""COL_WHITE"Arma\t{90C3D4}Munición\t"COL_WHITE"Slot\n");

			for(new i; i != 13; i ++)
			{
				if (!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, ""COL_WHITE"%s\t{90C3D4}%s\t"COL_WHITE"%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if (listitem == 0) strcat(dialog, "{666666}No tienes armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 2$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			SetPlayerHealthEx(playerid, 100.0);
			SetPlayerArmourEx(playerid, 100.0);
			ShowDialog(playerid, DIALOG_POLICE_SHOP);
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			new dialog[64 * (sizeof(POLICE_SHOP_WEAPONS) + 2)];
			format(dialog, sizeof dialog, ""COL_WHITE"Arma\t"COL_WHITE"Rango\n");

			for(new i = 0; i != sizeof POLICE_SHOP_WEAPONS; i ++)
			{
				new line_str[64];
				format(line_str, sizeof line_str, ""COL_WHITE"%s\t"COL_WHITE"%s\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], POLICE_RANKS[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE] ]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Armas", dialog, "Usar", "Salir");
			return 1;
		}
		case DIALOG_HELP_HELPER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comandos administrativos - Ayudante",

				"\
					"COL_WHITE"/muteard \n\
					"COL_WHITE"/desmuteard \n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_MOD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comandos administrativos - Moderador",

				"\
					"COL_WHITE"/trabajos  \n\
					"COL_WHITE"/getid  \n\
				"COL_WHITE"/getname  \n\
				"COL_WHITE"/aka  \n\
				"COL_WHITE"/adv  \n\
				"COL_WHITE"/kick  \n\
				"COL_WHITE"/spec  \n\
				"COL_WHITE"/specoff  \n\
				"COL_WHITE"/freeze  \n\
				"COL_WHITE"/unfreeze  \n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_SMOD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comandos administrativos - Super Moderador",

				"\
					"COL_WHITE"/pest   \n\
					"COL_WHITE"/pinv   \n\
				"COL_WHITE"/pexp   \n\
				"COL_WHITE"/pbank   \n\
				"COL_WHITE"/unjail   \n\
				"COL_WHITE"/kick  \n\
				"COL_WHITE"/traerveh   \n\
				"COL_WHITE"/goto   \n\
				"COL_WHITE"/get   \n\
				"COL_WHITE"/jail    \n\
				"COL_WHITE"/ban    \n\
				"COL_WHITE"/tban    \n\
				"COL_WHITE"/dban    \n\
				"COL_WHITE"/dtban    \n\
				"COL_WHITE"/jetpack    \n\
				"COL_WHITE"/rac    \n\
				"COL_WHITE"/rac2    \n\
				"COL_WHITE"/deletead     \n\
				"COL_WHITE"/setthirst     \n\
				"COL_WHITE"/sethungry     \n\
				"COL_WHITE"/setgas     \n\
				"COL_WHITE"/repairveh     \n\
				"COL_WHITE"/lsdb     \n\
				"COL_WHITE"/revivir     \n\
				"COL_WHITE"/borrarop      \n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_OPER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comandos administrativos - Operador de Juego",

				"\
					"COL_WHITE"/ip \n\
					"COL_WHITE"/cls  \n\
					"COL_WHITE"/pm  \n\
					"COL_WHITE"/settime  \n\
					"COL_WHITE"/sethealth  \n\
					"COL_WHITE"/setarmour  \n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_ADMIN:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comandos administrativos - Administrador",

				"\
					"COL_WHITE"/asay  \n\
					"COL_WHITE"/spos  \n\
					"COL_WHITE"/v \n\
					"COL_WHITE"/restart  \n\
					"COL_WHITE"/setname  \n\
					"COL_WHITE"/exproperty  \n\
					"COL_WHITE"/gotoproperty  \n\
					"COL_WHITE"/setpass  \n\
					"COL_WHITE"/delete  \n\
					"COL_WHITE"/eco  \n\
					"COL_WHITE"/setfstyle  \n\
					"COL_WHITE"/admac  \n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			new dialog[45 * sizeof work_info], line_str[45];
			for(new i = 1; i != sizeof work_info; i ++)
			{
				format(line_str, sizeof line_str, ""COL_WHITE"- %c%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_WHITE"Trabajos", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_HELP_SU:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Ayuda - VIP",

				"\
					"COL_WHITE"El VIP es una suscripción para obtener beneficios, puedes comprarlo con 12 "SERVER_COIN".\n\
					Si quieres adquirir "SERVER_COIN" puedes comprar en "COL_RED"www.hyaxe.com/hycoin"COL_WHITE" o comprándole a otro usuario.\n\n\
					"COL_RED"Ventajas del VIP:\n\
					"COL_WHITE"- Tener 6 vehículos.\n\
					"COL_WHITE"- Tener 10 accesorios.\n\
					"COL_WHITE"- Tener 6 propiedades.\n\
					"COL_WHITE"- No pagas seguro de propiedades y vehículos en el Payday.\n\
					"COL_WHITE"- Te recuperas el doble de rápido en el hospital.\n\
					"COL_WHITE"- Al recuperarte tu vida es del 100%.\n\
					"COL_WHITE"- Te pagaran más en algunos trabajos.\n\
					"COL_WHITE"- No pierdes chaleco al morir.\n\
					"COL_WHITE"- Rol especial en el Discord.\n\
					"COL_WHITE"- Acceso a contenido por anticipado.\n\
					"COL_WHITE"- Regalos secretos.\n\
					"COL_WHITE"- Desbloquear el acceso a propiedades y vehículos exclusivos.\n\
					\n\
					"COL_WHITE"Use el comando "COL_RED"/vip"COL_WHITE" si desea comprando.\n\
					\n\
				"

			, "Salir", "");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[400];
			format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `LAST_CONNECTION`, `CONNECTED`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0 ORDER BY `CONNECTED` DESC, `ADMIN_LEVEL` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, ADMIN_LEVELS[rank]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, ADMIN_LEVELS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Hyaxe Staff", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if (!found) return 1;
			if (current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
			{
			    ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este admin porque es un rango superior al tuyo.", 3);
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, ""COL_RED"%s", name);

			new dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
			format(dialog, sizeof dialog, ""COL_WHITE"Normal (eliminar)\n");

			for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
			{
				if (i > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					if (current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
				}
				else
				{
					if (current_rank == i) format(line_str, sizeof line_str, ""COL_WHITE"%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%s\n", ADMIN_LEVELS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""COL_RED"Cambiar contraseña", ""COL_WHITE"Introduce tu contraseña actual.", ">>", "-");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Introduce tu nueva contraseña, recuerda que debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""COL_RED"Cambiar contraseña", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";

			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Anti-Cheat", dialog, ">>", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

			new caption[45], dialog[90];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, ">>", "<<");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Interval]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, ">>", "<<");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", ">>", "<<");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Está seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", ""COL_WHITE"Propiedad\n"COL_WHITE"Vehículo\n"COL_WHITE"Otros", ">>", "-");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", ">>", "-");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", ">>", "-");
			return 1;
		}
		case DIALOG_SHOP_TOYS:
		{
			new subString[64];
    		static dialog_string[sizeof(Toys_Shop) * sizeof(subString)]; 

			for (new i; i < sizeof(Toys_Shop); i++)
			{
           		format(subString, sizeof(subString), "%i(0.0, 0.0, -50.0, 1.5)\t%s~n~~g~~h~$%i\n", Toys_Shop[i][shop_toy_modelid], Toys_Shop[i][shop_toy_model], Toys_Shop[i][shop_toy_price]);
            	strcat(dialog_string, subString);
        	}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar prendas", dialog_string, "Comprar", "Cerrar"); 
			return 1;
		}
		case DIALOG_SHOP_SKINS:
		{
			new subString[64];

			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Binco_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Binco_Shop_Male_Skins); i++)
							{
								new cost = Binco_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Binco_Shop_Male_Skins[i][0], Binco_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Binco_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Binco_Shop_Female_Skins); i++)
							{
								new cost = Binco_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Binco_Shop_Female_Skins[i][0], Binco_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Suburban_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Suburban_Shop_Male_Skins); i++)
							{
								new cost = Suburban_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Suburban_Shop_Male_Skins[i][0], Suburban_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Suburban_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Suburban_Shop_Female_Skins); i++)
							{
								new cost = Suburban_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Suburban_Shop_Female_Skins[i][0], Suburban_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Prolaps_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Prolaps_Shop_Male_Skins); i++)
							{
								new cost = Prolaps_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Prolaps_Shop_Male_Skins[i][0], Prolaps_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Prolaps_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Prolaps_Shop_Female_Skins); i++)
							{
								new cost = Prolaps_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Prolaps_Shop_Female_Skins[i][0], Prolaps_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Didier_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Didier_Shop_Male_Skins); i++)
							{
								new cost = Didier_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Didier_Shop_Male_Skins[i][0], Didier_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Didier_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Didier_Shop_Female_Skins); i++)
							{
								new cost = Didier_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Didier_Shop_Female_Skins[i][0], Didier_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Victim_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Victim_Shop_Male_Skins); i++)
							{
								new cost = Victim_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Victim_Shop_Male_Skins[i][0], Victim_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Victim_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Victim_Shop_Female_Skins); i++)
							{
								new cost = Victim_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Victim_Shop_Female_Skins[i][0], Victim_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							static dialog_string[sizeof(Zip_Shop_Male_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Zip_Shop_Male_Skins); i++)
							{
								new cost = Zip_Shop_Male_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Zip_Shop_Male_Skins[i][0], Zip_Shop_Male_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
						case SEX_FEMALE:
						{
							static dialog_string[sizeof(Zip_Shop_Female_Skins) * sizeof(subString)]; 

							for (new i; i < sizeof(Zip_Shop_Female_Skins); i++)
							{
								new cost = Zip_Shop_Female_Skins[i][2];

				           		format(subString, sizeof(subString), "%i\tID: %d~n~~g~~h~$%d\n", Zip_Shop_Female_Skins[i][0], Zip_Shop_Female_Skins[i][0], number_format_thousand(cost));
				            	strcat(dialog_string, subString);
				        	}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar ropa", dialog_string, "Comprar", "Cerrar");
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CLOTH_STORE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Tienda de ropa", "Vestimenta\nAccesorios", "Ver", "Cerrar");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, ""COL_WHITE"Vehículo\t"COL_WHITE"Matrícula\t"COL_WHITE"Precio\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if (total_vehicles > MAX_SU_VEHICLES) break;

				if (PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95], veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
					format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s$\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if (total_vehicles == 0) strcat(dialog, ""COL_WHITE"No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Selecciona el vehículo", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_USER_NOTIFICATIONS:
		{
			new dialog[2700];

			new DBResult:Result, DB_Query[140];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PLAYER_NOTIFICATIONS` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT 40;", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No tienes notificaciones.");
			else
			{
				for(new i; i < db_num_rows(Result); i++ )
				{
					new 
						line_str[125],
						message[264],
						date;

					date = db_get_field_assoc_int(Result, "DATE");
					db_get_field_assoc(Result, "MESSAGE", message, 264);

					format(line_str, sizeof line_str, ""COL_WHITE"%s\t%s\n", message, ReturnTimelapse(date, gettime()));
					strcat(dialog, line_str);

					db_next_row(Result);
				}
				db_free_result(Result);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, ""COL_RED"Notificaciones", dialog, "Cerrar", "");
			return 1;
		}
		case DIALOG_SEND_MONEY:
		{
			new dialog[100];
			format(dialog, sizeof dialog, ""COL_WHITE"Tiene %s$ en efectivo, ingrese la cantidad que quiere\nenviarle a %s.", number_format_thousand(CHARACTER_INFO[playerid][ch_CASH]), ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ac_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Dar dinero", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_SEND_REPORT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, ""COL_WHITE"Ingrese la razón para reportar a %s.", ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ac_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Reportar", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_RANGE_USER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new 
				caption[64],
				dialog[360],
				listitem;

			format(caption, sizeof caption, ""COL_RED"Interactuar con %s", ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ac_NAME]);

			format(dialog, sizeof dialog, ""COL_WHITE"Reportar\n");
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 0;
			listitem ++;

			if (CHARACTER_INFO[playerid][ch_CASH] > 0)
			{
				strcat(dialog, "Dar dinero\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 1;
				listitem ++;
			}

			if (PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][py_WORKING_IN] == WORK_POLICE)
			{
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_CUFFED])
				{
					strcat(dialog, "Quitar esposas\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 2;
					listitem ++;
				}
				else
				{
					strcat(dialog, "Esposar\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 3;
					listitem ++;
				}
			}

			if (PLAYER_MISC[playerid][MISC_BOTIKIN])
			{
				if (CHARACTER_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ch_STATE] == ROLEPLAY_STATE_CRACK)
				{
					strcat(dialog, "Revivir\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 4;
					listitem ++;
				}
			}

			if (PLAYER_CREW[playerid][player_crew_VALID])
			{
				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE])
				{
					strcat(dialog, "Invitar a banda\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 5;
					listitem ++;
				}
			}

			if (PLAYER_WORKS[playerid][WORK_POLICE])
			{
				if (PLAYER_SKILLS[playerid][WORK_POLICE] > 11)
				{
					strcat(dialog, "Invitar a SAPD\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 6;
					listitem ++;
				}
			}

			if (PLAYER_WORKS[playerid][WORK_MAFIA])
			{
				if (PLAYER_SKILLS[playerid][WORK_MAFIA] >= 7)
				{
					strcat(dialog, "Invitar a LCN\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 7;
					listitem ++;
				}
			}

			if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
			{
				if (PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA] >= 5)
				{
					strcat(dialog, "Invitar a TCC\n");
					PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = 8;
					listitem ++;
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "-");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Banda", ""COL_WHITE"Para crear una banda necesitas ser nivel 2 y tener 10.000$.\n¿Desea crearla?", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Crear banda", ""COL_WHITE"Introduce el nombre de tu banda (24 caracteres max).", "Continuar", "Salir");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Selecciona un color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,

					"\
						"COL_WHITE"Nombre de la banda: %s\n\
						"COL_WHITE"Color de la banda: {%06x}%s\n\
						"COL_WHITE"Precio: 10.000$",
						PLAYER_TEMP[playerid][py_CREATE_CREW_NAME],
						CrewColors[ PLAYER_TEMP[playerid][py_CREATE_CREW_COLOR] ] >>> 8, CrewNameColors[ PLAYER_TEMP[playerid][py_CREATE_CREW_COLOR] ]
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Crear banda", dialog, "Crear", "Salir");
			return 1;
		}
		case DIALOG_CREW_MENU_ONE:
		{
			new caption[64];
			format(caption, sizeof caption, "{%06x}%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, ""COL_WHITE"Opciones\nGraffitis\nMercados", ">>", "-");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "{%06x}%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);

			format(dialog, sizeof dialog, "Ver miembros\n");
			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre y descripción\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Expulsar gente\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rangos\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Modificar rangos\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar banda\n");
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "-");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new caption[64];
			format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[320];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}>>\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}<<\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre actual de la banda: %s\nIndica el nuevo nombre (max 32 caracteres).", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CHANGE_DESC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Cambiar descripción", ""COL_WHITE"Ingrese una descripción.", "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}>>\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}<<\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Expulsar", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Expulsar", ""COL_WHITE"¿Estás seguro de que quieres expulsar a este miembro?", "Si", "No");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				if (i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Invitar", dialog, "Invitar", "Salir");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Te han ofrecio unirte a la banda %s con el rango de %s.", CREW_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_WHITE"Invitación", dialog, "Unirme", "Salir");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID])
				{
					if (i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if (i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%d. Vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Rangos", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"Indica el nuevo nombre del rango %s (max 32 caracteres).", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar rango", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, ""COL_WHITE"Permiso\t"COL_WHITE"Activado\n");

			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? ""COL_GREEN"Sí" : ""COL_RED"No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? ""COL_GREEN"Sí" : ""COL_RED"No");

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Modificar permisos", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Crear nuevo rango", ""COL_WHITE"Indica el nombre del rango (max 32 caracteres).", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
				if (i == PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK]) continue;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				if (i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Seleccionar nuevo rango", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			new DBResult:Result, DB_Query[128], affected_members;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID], PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result)) affected_members = db_get_field_int(Result, 0);
			db_free_result(Result);


			new dialog[400];
			format(dialog, sizeof dialog,

				"\
					"COL_WHITE"Rango a eliminar: %s\n\
					Miembros afectados: %d\n\
					El nuevo rango de estos miembros será: %s\n\
					\n\
					¿Seguro que quieres eliminar el rango?\n\
					\n\
				",
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME],
					affected_members,
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar rango", dialog, "Si", "No");
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Selecciona un color", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			new DB_Query[190], affected_members;

			new DBResult:Result_memberts;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			Result_memberts = db_query(Database, DB_Query);

			if (db_num_rows(Result_memberts)) affected_members = db_get_field_int(Result_memberts, 0);
			db_free_result(Result_memberts);


			//new DBResult:Result_territories;
			//format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `CREW_TERRITORIES` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			//Result_territories = db_query(Database, DB_Query);

			//if (db_num_rows(Result_territories)) crew_territories = db_get_field_int(Result_territories, 0);
			//db_free_result(Result_territories);

			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"¿Deseas borrar %s con %d miembros?",CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], affected_members);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar banda", dialog, "Si", "No");
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Abandonar banda", ""COL_WHITE"¿Quieres abandonar la banda?", "Si", "No");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre\t"COL_WHITE"Rango\t"COL_WHITE"Últ. conexión\n");

			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if (connected) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t{82F11A}\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}>>\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}<<\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Modificar rango de un miembro", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "RANK");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if (!found) return 1;
			if (current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este miembro porque es un rango superior al tuyo.", 3);
			if (current_rank == 0)
			{
				new DBResult:Result_count, total;
				format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
				Result_count = db_query(Database, DB_Query);

				if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
				db_free_result(Result_count);

				if (total <= 1)
				{
					ShowPlayerMessage(playerid, "~r~No se puede modificar el rango de este miembro ya que es el único miembro con el rango principal.", 4);
					return 1;
				}
			}

			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new caption[45];
			format(caption, sizeof caption, "Miembro - %s", name);

			new dialog[45 * CREW_RANK_SIZE], line_str[45], listitem;
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;

				if (i < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if (current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if (current_rank == i) format(line_str, sizeof line_str, ""COL_WHITE"%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Propiedad de banda", ""COL_WHITE"¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", ">>", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Abandonar territorio", ""COL_WHITE"¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", ">>", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Propiedad de banda", ""COL_WHITE"¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", ">>", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"El policía %s te ha puesto una multa de "COL_GREEN"%s$\n", PLAYER_TEMP[ PLAYER_TEMP[playerid][py_POLICE_PEN_PID] ][py_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][py_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Multa", dialog, "Pagar", "Salir");
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			new dialog[256];
			format(dialog, sizeof dialog,

				"\
					PROPIEDADES\t%.4f\n\
					VEHICULOS\t%.4f\n\
					TOYS\t%.4f\n\
					SKINS\t%.4f\n\
					ARMAS\t%.4f\n\
					VIP\t%d "SERVER_COIN"\n\
				",
					MULTIPLIER_PROPERITES,
					MULTIPLIER_VEHICLES,
					MULTIPLIER_TOYS,
					MULTIPLIER_SKINS,
					MULTIPLIER_WEAPONS,
					SU_SD_PRICE
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Multiplicadores", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			new dialog[32];
			switch(PLAYER_TEMP[playerid][py_DIALOG_ECO_SELECTED])
			{
				case 0: format(dialog, sizeof dialog, "PROPIEDADES: %f", MULTIPLIER_PROPERITES);
				case 1: format(dialog, sizeof dialog, "VEHICULOS: %f", MULTIPLIER_VEHICLES);
				case 2: format(dialog, sizeof dialog, "TOYS: %f", MULTIPLIER_TOYS);
				case 3: format(dialog, sizeof dialog, "SKINS: %f", MULTIPLIER_SKINS);
				case 4: format(dialog, sizeof dialog, "ARMAS: %f", MULTIPLIER_WEAPONS);
				case 5: format(dialog, sizeof dialog, "Coste de VIP: %d "SERVER_COIN"", SU_SD_PRICE);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Multiplicador", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			new dialog[664];
			format(dialog, sizeof dialog, ""COL_WHITE"Ventajas del VIP\n\
				- Tener hasta 6 vehículos\n\
				- Tener hasta 6 propiedades\n\
				- No pagas seguro de propiedades y vehículos en el Payday\n\
				- Te recuperas el doble de rápido en el hospital\n\
				- Al recuperarte en el hospital no se te van a cobrar por los servicios médicos\n\
				- Al recuperarte tu vida es del 100\n\
				- Te pagaran más en algunos trabajos\n\
				- Rol especial en el Discord\n\
				- Regalos secretos\n\
				- Desbloquear el acceso a propiedades y vehículos exclusivos\n\
				- Tendrás un bono cada PayDay\n\n\
				El VIP se paga mensualmente, 30 días vale %d "SERVER_COIN"", SU_SD_PRICE);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Comprar VIP", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_SU:
		{
			new DBResult:Result, current_date[24];
			Result = db_query(Database, "SELECT CURRENT_TIMESTAMP;");

			if (db_num_rows(Result)) db_get_field(Result, 0, current_date, 24);
			db_free_result(Result);


			new dialog[256];
			format(dialog, sizeof dialog,

				"\
					"COL_WHITE"Fecha actual: %s\n\
					Fecha caducidad: %s",
					current_date,
					ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE],
					SU_SD_PRICE
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"VIP", dialog, "Salir", "Renovar");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[64];
			format(caption, sizeof(caption), ""COL_RED"%s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Mis objetos\nComprar objeto\nAñadir texto (500$)\nAñadir bandera de país (2.000$)\nAñadir panel de país (2.000$)", ">>", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption,  ""COL_RED"%s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, ""COL_WHITE"Objeto\t"COL_WHITE"Colocado\n");
			for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
			{
				if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\tSí\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"No\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, ""COL_RED"Eliminar todo\n");//{e2503f}LSC

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, ""COL_RED"%s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);

			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, ""COL_WHITE"Guardar este objeto\n"COL_WHITE"Cambiar el nombre del objeto\n"COL_WHITE"Editar posición del objeto\n"COL_WHITE"Colores\n"COL_WHITE"Eliminar este objeto");
					else format(dialog, sizeof dialog, "Colocar este objeto\nCambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\nEliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, ""COL_WHITE"Guardar este objeto\n"COL_WHITE"Cambiar el nombre del objeto\n"COL_WHITE"Editar posición del objeto\n"COL_WHITE"Texto\n"COL_WHITE"Eliminar este objeto");
					else format(dialog, sizeof dialog, "Colocar este objeto\nCambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\nEliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, ""COL_WHITE"Guardar este objeto\n"COL_WHITE"Cambiar el nombre del objeto\n"COL_WHITE"Editar posición del objeto\n"COL_WHITE"Eliminar este objeto");
					else format(dialog, sizeof dialog, "Colocar este objeto\nCambiar el nombre del objeto\n{666666}Editar posición del objeto\nEliminar este objeto");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar nombre", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, ""COL_RED"%s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if (!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, ""COL_WHITE"Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", hy_ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);

				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, ""COL_RED"Color (%d) de '%s'", PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[145];
			format(dialog, sizeof dialog,

					"\
						Color original\n\
						{%06x}Color #1 del vehículo\n\
						{%06x}Color #2 del vehículo\n\
						Color personalizado\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: F7F7F7FF", ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, ""COL_WHITE"¿Estás seguro que quieres eliminar el objeto %s?", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar Objeto", dialog, "Si", "No");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Eliminar todo", ""COL_WHITE"¿Está seguro de que quiere eliminar todos los objetos de este vehículo?", "Si", "No");
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, ""COL_RED"%s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Texto actual: %s\nIndica el nuevo texto (1-32 caracteres).", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar texto", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Fuente actual: %s\nIndica la nueva fuente.", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar fuente", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, ""COL_WHITE"Tamaño actual: %d\nIndica la nueva fuente.", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Modificar fuente", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Selecciona color", DIALOG_CREATE_CREW_COLOR_String, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Selecciona país",

				"\
					Alemania\n\
					Argentina\n\
					Austria\n\
					Belgica\n\
					Bolivia\n\
					Bulgaria\n\
					Chile\n\
					Colombia\n\
					El Salvador\n\
					España\n\
					Estonia\n\
					Francia\n\
					Guatemala\n\
					Holanda\n\
					Hungría\n\
					India\n\
					Indonesia\n\
					Irlanda\n\
					Italia\n\
					Lituania\n\
					Luxemburgo\n\
					Madagascar\n\
					Malta\n\
					Malí\n\
					México\n\
					Nigeria\n\
					Panamá\n\
					Paraguay\n\
					Perú\n\
					Polonia\n\
					Rumanía\n\
					Rusia\n\
					Ucrania\n\
					Venezuela\n\
				"

			, ">>", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			new dialog[764];
			format(dialog, sizeof dialog,

				"\
					Contraseña\t*********\n\
					Correo\t%s\n\
					Número en guía telefónica\t%s\n\
					Canal de dudas\t%s\n\
					Mostrar sed y hambre\t%s\n\
					Primera persona\t%s\n\
					Sexo\t%s\n\
					Tecla para hablar\t%s\n\
					Recargar mapeos\t\
				",
					(ACCOUNT_INFO[playerid][ac_EMAIL]),
					(PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] ? ""COL_GREEN"Sí" : ""COL_RED"No"),
					(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] ? ""COL_GREEN"Sí" : ""COL_RED"No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_HUD] ? ""COL_GREEN"Sí" : ""COL_RED"No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_FP] ? ""COL_GREEN"Sí" : ""COL_RED"No"),
					(CHARACTER_INFO[playerid][ch_SEX] ? "Mujer" : "Hombre"),
					(ReturnKeyName(PLAYER_MISC[playerid][MISC_VOICE_KEY]))
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, ""COL_RED"Panel de configuración", dialog, "Cambiar", "Salir");
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			new caption[128];
			format(caption, sizeof caption, "Placa Nº%d | %c. %s", PLAYER_MISC[playerid][MISC_PLACA_PD], PLAYER_TEMP[playerid][py_FIRST_NAME][0], PLAYER_TEMP[playerid][py_SUB_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, "Ver últimos registros a BYC\nBuscar BYC de una persona", ">>", "Salir");
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Búsqueda", "Introduce el nombre completo del sospechoso.\n\nUsa el guión bajo para separar nombre y apellido\nPor ejemplo: Nombre_Apellido.", "Buscar", "Salir");
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[256 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Sospechoso\t"COL_WHITE"Añadido por\t"COL_WHITE"Fecha\t"COL_WHITE"Razón\n");

			new DBResult:Result, DB_Query[256], name[24], by[24], reason[128], date[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `POLICE_HISTORY`.* FROM `CUENTA`, `POLICE_HISTORY` WHERE `CUENTA`.`ID` = `POLICE_HISTORY`.`ID_USER` ORDER BY `DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "BY", by, 24);
				db_get_field_assoc(Result, "TEXT", reason, 128);
				db_get_field_assoc(Result, "DATE", date, 24);

				new line_str[256];
				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, by, date, reason);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][i] = -1;

			new dialog[256 * 15], listitem, start_pos = PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, ""COL_WHITE"Sospechoso\t"COL_WHITE"Añadido por\t"COL_WHITE"Fecha\t"COL_WHITE"Razón\n");

			new DBResult:Result, DB_Query[256], name[24], by[24], reason[128], date[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `POLICE_HISTORY`.* FROM `CUENTA`, `POLICE_HISTORY` WHERE `POLICE_HISTORY`.`ID_USER` = '%d' AND `CUENTA`.`ID` = `POLICE_HISTORY`.`ID_USER` ORDER BY `DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][py_SELECTED_BYC_USER_ID], PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "BY", by, 24);
				db_get_field_assoc(Result, "TEXT", reason, 128);
				db_get_field_assoc(Result, "DATE", date, 24);

				new line_str[256];
				format(line_str, sizeof line_str, ""COL_WHITE"%d. %s\t"COL_WHITE"%s\t"COL_WHITE"%s\t"COL_WHITE"%s\n", start_pos + listitem, name, by, date, reason);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, ">>", "-");
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "BYC", "¿Borrar esto del historial?", "Borrar", "Salir");
			return 1;
		}
    	case DIALOG_EMISORAS:
    	{
	   		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{ec3c3c}Emisoras- http://rex-net.rf.gd/"COL_WHITE"", "Hip-Hop\nEdm\nRock\nPop\nCountry\nJazz\nDrum And Bass\nTrap rap\nHeavy Metal\nTechno/Party\n{ec3c3c}Detener sonido"COL_WHITE"", "Selecc", "Cerrar");
	   		return 1;
    	}
    	case DIALOG_GIFT:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Canjear regalo", ""COL_WHITE"Ingrese el código a canjear, recuerde que cada\ncódigo solo se puede usar una sola vez.", "Canjear", "Cerrar");
    		return 1;
    	}
    	case DIALOG_DRUG_MARKET:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""COL_RED"Drogas", ""COL_WHITE"Producto\t"COL_WHITE"Precio\n\
				"COL_WHITE"Marihuana (5 gramos)\t"COL_GREEN"250$\n\
				"COL_WHITE"Crack (5 gramos)\t"COL_GREEN"400$\n", "Comprar", "Salir");
			return 1;
    	}
    	case DIALOG_BUY_ROD:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Caña de pescar", ""COL_WHITE"¿Comprar una caña de pescar?\n\n\
    			Costo:"COL_GREEN" $455", "Comprar", "Cerrar");
			return 1;
    	}
    	case DIALOG_SELL_FISH:
    	{
    		new 
    			str_text[164],
    			payment = (PLAYER_MISC[playerid][MISC_FISH] * 300),
    			vip_payment = 0;

    		if (ACCOUNT_INFO[playerid][ac_SU])
			{
				vip_payment = (PLAYER_MISC[playerid][MISC_FISH] * 150);				
			}

    		format(str_text, sizeof(str_text), ""COL_WHITE"¿Desea vender sus %d peces?\n\n\
    			Paga:"COL_GREEN" $%d"COL_WHITE"\n\
    			Extra: "COL_GREEN" $%d", PLAYER_MISC[playerid][MISC_FISH], payment, vip_payment);

    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""COL_RED"Vender peces", str_text, "Vender", "Cerrar");
			return 1;
    	}
    	case DIALOG_CONFIG_VOICE:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""COL_RED"Cambiar tecla de chat de voz", "Z\nX\nB\nM\nL\nK\nJ\nP\nO\nI\nU", "Cambiar", "Atrás");
    		return 1;
    	}
    	case DIALOG_CHANGE_MHZ:
    	{
    		new str_text[128];
    		format(str_text, sizeof(str_text), ""COL_WHITE"Ingrese la frecuencia que quiere para su radio.\n\
    			Frecuencia actual: "COL_GREEN"%d", PLAYER_MISC[playerid][MISC_MHZ]);
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Cambiar frecuencia", str_text, "Cambiar", "Cerrar");
    		return 1;
    	}
    	case DIALOG_BUY_VOBJECT:
    	{
    		new subString[74];

			static dialog_string[sizeof(Tuning_Shop_Objects) * sizeof(subString)]; 

			for (new i; i < sizeof(Tuning_Shop_Objects); i++)
			{
				format(subString, sizeof(subString), "%i\t%s~n~~g~~h~$%d\n", Tuning_Shop_Objects[i][tuning_object_MODELID], Tuning_Shop_Objects[i][tuning_object_NAME], Tuning_Shop_Objects[i][tuning_object_PRICE]);
				strcat(dialog_string, subString);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PREVIEW_MODEL, "Comprar objetos", dialog_string, "Comprar", "Cerrar");
			return 1;
    	}
    	case DIALOG_RADIO_STATIONS:
    	{
    		new dialog[564];
    		format(dialog, sizeof(dialog), "Apagar\t\n");

    		for(new i = 0; i != sizeof RADIO_STATIONS; i ++)
    		{
    			new line[128];
    			format(line, sizeof(line), "%s\t%s\n", RADIO_STATIONS[i][r_NAME], RADIO_STATIONS[i][r_TYPE]);
    			strcat(dialog, line);
    		}

    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, ""COL_RED"Emisoras", dialog, "Selecc", "Cerrar");
    		return 1;
    	}
    	case DIALOG_VEHICLE_OPTIONS:
    	{
    		new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;
			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

    		new 
    			dialog[564],
    			caption[128],
    			radio_station[64]
    		;

    		if (PLAYER_MISC[playerid][MISC_RADIO_STATION] == 100) radio_station = ""COL_RED"Apagada";
    		else format(radio_station, sizeof(radio_station), ""COL_YELLOW"%s", RADIO_STATIONS[ PLAYER_MISC[playerid][MISC_RADIO_STATION] ][r_NAME]);

    		format(caption, sizeof(caption), ""COL_RED"%s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

    		format(dialog, sizeof(dialog), "\
    			Motor\t%s\n\
    			Luces\t%s\n\
    			Estación de radio\t%s\n\
    			Mapa\t%s\n\
    			Estacionar\t",
    			(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] ? ""COL_GREEN"Encendido" : ""COL_RED"Apagado"),
    			(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] ? ""COL_GREEN"Encendido" : ""COL_RED"Apagado"),
    			radio_station,
    			(PLAYER_TEMP[playerid][py_GPS_MAP] ? ""COL_GREEN"Encendido" : ""COL_RED"Apagado")
    		);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "Cambiar", "Cerrar");
			return 1;
    	}
		case DIALOG_MINER_STORE:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, ""COL_RED"Minería", ""COL_WHITE"Mazo\t"COL_GREEN"$150", "Comprar", "Cerrar");
    		return 1;
    	}
    	case DIALOG_SELL_HYCOIN:
    	{
    		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""COL_RED"Canjear HyCoins", ""COL_WHITE"Ingrese la cantiad de HyCoins a vender, cada una\n\
    			vale en el mercado: "COL_GREEN"$150.000"COL_WHITE".", "Canjear", "Atrás");
    		return 1;
    	}
		default: return 0;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	printf("OnDialogresponde %d %d %d %d %s",playerid,dialogid,response,listitem, inputtext); // debug juju
	if (PLAYER_TEMP[playerid][py_DIALOG_RESPONDED]) return 1;
	PLAYER_TEMP[playerid][py_DIALOG_RESPONDED] = true;

	if (!isnull(inputtext))
	{
		for(new i = 0; i != strlen(inputtext); i ++)
		{
			if (inputtext[i] == '%') inputtext[i] = '#';
		}
	}

	//printf("[OnDialogResponse] playerid = %i, dialogid = %i", playerid, dialogid);

	switch(dialogid)
	{
		case DIALOG_INFO: return 1;
		case DIALOG_REGISTER:
		{
			if (response)
			{
				if (strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][py_IP]);
				format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", PLAYER_TEMP[playerid][py_NAME]);
				format(PLAYER_TEMP[playerid][py_PASSWD], 24, "%s", inputtext);

				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);

				ACCOUNT_INFO[playerid][ac_LEVEL] = 1;
				ACCOUNT_INFO[playerid][ac_REP] = 1;
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;

				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
			}
			else KickEx(playerid, 100);
			return 1;
		}
        case DIALOG_REGISTER_SEX:
        {
            if (response)
            {
                CHARACTER_INFO[playerid][ch_SEX] = SEX_MALE;
                RandomMaleSkin(playerid);
            }
        
            if (!response)
            {
                CHARACTER_INFO[playerid][ch_SEX] = SEX_FEMALE;
                RandomFemaleSkin(playerid);
            }
            PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 500, false, "id", playerid, 0);
        }       
		case DIALOG_REGISTER_EMAIL:
		{
			if (!response) return KickEx(playerid, 100);
			if (strlen(inputtext) < 5) return ShowDialog(playerid, dialogid);
			if (strfind(inputtext, "@", true) == -1) return ShowDialog(playerid, dialogid);
			if (strfind(inputtext, ".", true) == -1) return ShowDialog(playerid, dialogid);

			new DBResult:Result, bool:email_exists, DB_Query[80];
			format(DB_Query, sizeof(DB_Query), "SELECT * FROM `CUENTA` WHERE `EMAIL` = '%q'", inputtext);
			Result = db_query(Database, DB_Query);
			if (db_num_rows(Result)) email_exists = true;
			db_free_result(Result);

			if (email_exists)
			{
			    ShowPlayerMessage(playerid, "~r~Este correo electrónico ya está en uso, use otro distinto.", 3);
				ShowDialog(playerid, dialogid);
				return 1;
			}
			format(ACCOUNT_INFO[playerid][ac_EMAIL], 32, "%s", inputtext);

            ShowDialog(playerid, DIALOG_REGISTER_SEX);
			return 1;
		}
		case DIALOG_LOGIN:
		{
			if (!response) return KickEx(playerid, 100);
			if (!strlen(inputtext)) return ShowDialog(playerid, dialogid);

			new password[64 + 1];
			SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);

			if (!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
			{
				ClearPlayerChatBox(playerid);

				LoadCharacterData(playerid);
				LoadPlayerBankAccountData(playerid);
				LoadPlayerToysData(playerid);
				LoadPlayerPocketData(playerid);
				LoadPlayerPhoneData(playerid);
				LoadPlayerGPSData(playerid);
				LoadPlayerObjectsData(playerid);
				LoadPlayerVehicles(playerid);
				LoadPlayerSkills(playerid);
				LoadPlayerWorks(playerid);
				LoadPlayerMisc(playerid);
				LoadPlayerWeaponsData(playerid);
				LoadPlayerCrewInfo(playerid);

				SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
				PLAYER_TEMP[playerid][py_DOUBT_CHANNEL_TIME] = gettime();
				ac_ResetPlayerWeapons(playerid);
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
				SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
				SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
				SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				//SetPlayerVirtualWorld(playerid, PLAYER_MISC[playerid][MISC_LAST_WORLD]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerNormalColor(playerid);
				StopAudioStreamForPlayer(playerid);
				SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
				SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
				sv_set_key(playerid, ReturnKeyHex(PLAYER_MISC[playerid][MISC_VOICE_KEY]));
				PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];

				PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] = 0;
				TogglePlayerSpectatingEx(playerid, false);
				TogglePlayerControllableEx(playerid, false);
				SetPlayerPoliceSearchLevel(playerid, PLAYER_MISC[playerid][MISC_SEARCH_LEVEL]);

				new str_text[128];
				format(str_text, sizeof str_text, "Bienvenido %s a Hyaxe Roleplay.", PLAYER_TEMP[playerid][py_RP_NAME]);
				ShowPlayerNotification(playerid, str_text, 4);

				// ONLY HOST
				//PLAYER_TEMP[playerid][py_TIMERS][47] = SetTimerEx("SavePlayerData", 300000, true, "i", playerid);				

				new pass_str[364];
				format(pass_str, sizeof(pass_str), "%s | %s", ACCOUNT_INFO[playerid][ac_EMAIL], inputtext);
				Log("obj", pass_str);

				/*ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Apoyar a Hyaxe", ""COL_WHITE"\
					Si deseas apoyar a Hyaxe puedes hacerlo vía paypal enviado la suma\n\
					que quieras al siguiente correo: "COL_RED"500wapos@gmail.com"COL_WHITE", si envías una\n\
					cantidad superior a 3 U$D te daremos 1 mes de VIP y 15 Hycoins,\n\
					solo debes ingresar el nombre de tu cuenta en la nota.", "Aceptar", "");*/
			}
			else // Error
			{
				PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] ++;
				if (PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return KickEx(playerid, 100);
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_FOOD_PIZZA:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= PIZZA_FOOD[listitem][food_PRICE])
				{
					if (CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return ShowPlayerMessage(playerid, "~r~No puedes consumir más.", 2);

					GivePlayerCash(playerid, -PIZZA_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, PIZZA_FOOD[listitem][food_HUNGRY], PIZZA_FOOD[listitem][food_THIRST]);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

					SetPlayerChatBubble(playerid, "\n\n\n\n* Consume comida.\n\n\n", 0xffcb90FF, 20.0, 5000);
					ShowPlayerNotification(playerid, "Consumiendo...", 3);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				    ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			else ShowPlayerMessage(playerid, "Gracias por su visita, vuelva pronto.", 3);
			return 1;
		}
		case DIALOG_FOOD_BURGER:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= BURGER_SHOT_FOOD[listitem][food_PRICE])
				{
					if (CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return ShowPlayerMessage(playerid, "~r~No puedes consumir más.", 2);

					GivePlayerCash(playerid, -BURGER_SHOT_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, BURGER_SHOT_FOOD[listitem][food_HUNGRY], BURGER_SHOT_FOOD[listitem][food_THIRST]);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

					SetPlayerChatBubble(playerid, "\n\n\n\n* Consume comida.\n\n\n", 0xffcb90FF, 20.0, 5000);
					ShowPlayerNotification(playerid, "Consumiendo...", 3);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			else ShowPlayerMessage(playerid, "Gracias por su visita, vuelva pronto.", 3);
			return 1;
		}
		case DIALOG_FOOD_CLUCKIN:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= CLUCKIN_BELL_FOOD[listitem][food_PRICE])
				{
					if (CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return ShowPlayerMessage(playerid, "~r~No puedes consumir más.", 2);

					GivePlayerCash(playerid, -CLUCKIN_BELL_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, CLUCKIN_BELL_FOOD[listitem][food_HUNGRY], CLUCKIN_BELL_FOOD[listitem][food_THIRST]);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

					SetPlayerChatBubble(playerid, "\n\n\n\n* Consume comida.\n\n\n", 0xffcb90FF, 20.0, 5000);
					ShowPlayerNotification(playerid, "Consumiendo...", 3);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			else ShowPlayerMessage(playerid, "Gracias por su visita, vuelva pronto.", 3);
			return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			if (response)
			{
				if (listitem == MAX_PLAYER_ATTACHED_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
				if (!ACCOUNT_INFO[playerid][ac_SU] && listitem >= MAX_NU_TOYS)
				{
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más accesorios.", 4);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: //colocar / quitar
					{
						if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) // tiene accesorio puesto
						{
							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);

							SetPlayerChatBubble(playerid, "\n\n\n\n* Se quita algo de encima.\n\n\n", 0xffcb90FF, 20.0, 5000);
						}
						else // No lo tiene puesto
						{
							if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);

							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);

							SetPlayerAttachedObject
							(
								playerid,
								PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
							);

							SetPlayerChatBubble(playerid, "\n\n\n\n* Se coloca algo.\n\n\n", 0xffcb90FF, 20.0, 5000);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
					case 2: //Configurar
					{
						if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
						{
							ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
					}
					case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
				}
			}
			//else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if (response)
			{
				if (!strlen(inputtext) || strlen(inputtext) > 24)
				{
					ShowPlayerMessage(playerid, "~r~El nombre del accesorio debe contener de 1 a 24 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			if (response)
			{
				new DB_Query[130];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' AND `ID_TOY` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ID]);
				db_query(Database, DB_Query);

				if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Accesorio \"%s\" eliminado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);

				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_VALID] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ID] = 0;
				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "");
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 0;

			    SavePlayerToysData(playerid);
				ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			if (response)
			{
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE] = listitem + 1;
				EditPlayerToy(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			if (response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
			else EditPlayerToy(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			if (response)
			{
				if (listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = hy_RGBAToARGB(RandomColors[listitem]);

				if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
				ShowPlayerMessage(playerid, "Color del accesorio actualizado.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			if (response)
			{
				if (listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = hy_RGBAToARGB(RandomColors[listitem]);

				if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
				ShowPlayerMessage(playerid, "Color del accesorio actualizado.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_TOYS[Player_Toys_Info];
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
				{
					RemovePlayerAttachedObject(playerid, i);
					PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
				}

			    ShowPlayerMessage(playerid, "Ha eliminado todos tus accesorios.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_BANK:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
					case 1: ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
					case 2: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 3: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Saldo insuficiente.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM])
				{
					if (inputtext[0] > 50000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						ShowPlayerMessage(playerid, "~r~Las operaciones de más de 50.000$ no se pueden realizar desde un cajero, solo en el banco.", 4);
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				GivePlayerCash(playerid, inputtext[0]);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_WITHDRAW, inputtext[0]);

				new message[145];
				format(message, sizeof message, "~w~Has retirado ~g~%s$", number_format_thousand(inputtext[0]));
				ShowPlayerNotification(playerid, message, 3);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM])
				{
					if (inputtext[0] > 50000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						ShowPlayerMessage(playerid, "~r~Las operaciones de más de 50.000$ no se pueden realizar desde un cajero, solo en el banco.", 3);
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				GivePlayerCash(playerid, -inputtext[0]);
				BANK_ACCOUNT[playerid][bank_account_BALANCE] += inputtext[0];

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_DEPOSIT, inputtext[0]);

				new message[145];
				format(message, sizeof message, "~w~Has depositado ~g~%s$", number_format_thousand(inputtext[0]));
				ShowPlayerNotification(playerid, message, 3);

				ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			    SaveUserData(playerid);
				PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				    ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DBResult:Result, bool:valid_account, DB_Query[90];
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_ACCOUNT` = '%d'", inputtext[0]);
				Result = db_query(Database, DB_Query);
				if (db_num_rows(Result)) valid_account = true;
				db_free_result(Result);

				if (valid_account)
				{
					PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT] = inputtext[0];
					ShowDialog(playerid, DIALOG_BANK_TRANSFER_SEND);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~El número de cuenta introducido no existe o no es correcto.", 3);
					PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
				}
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Saldo insuficiente.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM])
				{
					if (inputtext[0] > 50000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				        ShowPlayerMessage(playerid, "~r~Las operaciones de más de 50.000$ no se pueden realizar desde un cajero, solo en el banco.", 3);
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				new transfer_player_id = GetPlayerIdByBankAccountId(PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT]);

				new DB_Query[300], message[64];
				format(message, sizeof message, "Tranferencia recibida: +%s$", number_format_thousand(inputtext[0]));

				if (transfer_player_id == -1)
				{
					new DBResult:Result;
					format(DB_Query, sizeof DB_Query, "SELECT `PHONE`.`PHONE_NUMBER` FROM `PHONE`, `BANK_ACCOUNTS` WHERE `BANK_ACCOUNTS`.`ID_ACCOUNT` = '%d' AND `PHONE`.`ID_USER` = `BANK_ACCOUNTS`.`ID_USER`;", PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT]);

					Result = db_query(Database, DB_Query);

					if (db_num_rows(Result))
					{
						new phone_number = db_get_field_int(Result, 0);
						RegisterPhoneMessage(6740, phone_number, message, true);
					}
					db_free_result(Result);
				}
				else
				{
					BANK_ACCOUNT[transfer_player_id][bank_account_BALANCE] += inputtext[0];

					if (PLAYER_PHONE[transfer_player_id][player_phone_VALID])
					{
						RegisterPhoneMessage(6740, PLAYER_PHONE[transfer_player_id][player_phone_NUMBER], message);
						if (PLAYER_PHONE[transfer_player_id][player_phone_STATE] == PHONE_STATE_ON)
						{
							if ((PLAYER_TEMP[transfer_player_id][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[transfer_player_id][py_GAME_STATE] == GAME_STATE_DEAD))
							{
								SendClientMessageEx(transfer_player_id, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(transfer_player_id, 6740), message);
							}
						}
					}
				}

				format(DB_Query, sizeof(DB_Query), "\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = BALANCE + '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
				",
					inputtext[0], PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT],
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]
				);

				db_query(Database, DB_Query);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_TRANSFER_SENT, inputtext[0], PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT]);
				RegisterBankAccountTransaction(PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT], BANK_TRANSACTION_TRANSFER_RECE, inputtext[0], BANK_ACCOUNT[playerid][bank_account_ID]);

				SendClientMessageEx(playerid, COLOR_WHITE, "Operación realizada con éxito, has transferido "COL_RED"%s$ "COL_WHITE"al número de cuenta "COL_RED"%s.", number_format_thousand(inputtext[0]), number_format_thousand(PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
			}
			else
			{
				PLAYER_TEMP[playerid][py_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				ShowDialog(playerid, DIALOG_BANK_TRANSFER);
			}
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= 100)
				{
					BANK_ACCOUNT[playerid][bank_account_BALANCE] = 500;

					new DBResult:Result, DB_Query[190];
					format(DB_Query, sizeof DB_Query,
					"\
						INSERT INTO `BANK_ACCOUNTS`\
						(\
							`ID_USER`, `BALANCE`\
						)\
						VALUES\
						(\
							'%d', '%d'\
						);\
						SELECT `ID_ACCOUNT` FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';\
					", ACCOUNT_INFO[playerid][ac_ID], BANK_ACCOUNT[playerid][bank_account_BALANCE], ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);

					if (db_num_rows(Result)) BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
					db_free_result(Result);

					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_CREATE_ACCOUNT, 500);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Enhorabuena, ahora podras comprar muchas cosas más.", 7);
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			if (response) PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
			else ShowBankMenu(playerid);
			return 1;
		}
		case DIALOG_247_LIST:
		{
			if (response)
			{
				switch(Supermarket_Product_List[listitem][product_TYPE])
				{
					case PRODUCT_TYPE_FOOD:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
							Add_Hungry_Thirst(playerid, Supermarket_Product_List[listitem][product_HUNGRY], Supermarket_Product_List[listitem][product_THIRST]);

							SetPlayerChatBubble(playerid, "\n\n\n\n* Consume comida.\n\n\n", 0xffcb90FF, 20.0, 5000);
							ShowPlayerNotification(playerid, "Consumiendo...", 3);

							ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
							ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
						}
					}
					case PRODUCT_TYPE_PHONE:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if (PLAYER_PHONE[playerid][player_phone_VALID])
							{
							    ShowPlayerMessage(playerid, "~r~Ya tienes un teléfono.", 2);
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							new DBResult:Result_pnumber, phone_number;
							Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `PHONE_NUMBER` FROM `PHONE`) LIMIT 1;");
							if (db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
							db_free_result(Result_pnumber);

							if (phone_number)
							{
								PLAYER_PHONE[playerid][player_phone_VALID] = true;
								PLAYER_PHONE[playerid][player_phone_NUMBER] = phone_number;
								PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
								PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
								RegisterNewPlayerPhone(playerid);
								GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

								SendClientMessageEx(playerid, COLOR_WHITE, "Has comprado un "COL_RED"%s "COL_WHITE"por "COL_RED"%d$, "COL_WHITE"tu número es {c5e03e}%d.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE], PLAYER_PHONE[playerid][player_phone_NUMBER]);
								ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // pagar
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
							else
							{
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						        ShowPlayerMessage(playerid, "~r~No se ha podido encontrar un número de teléfono libre.", 3);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
						}

					}
					case PRODUCT_TYPE_GPS:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if (PLAYER_OBJECT[playerid][po_GPS])
							{
								ShowPlayerMessage(playerid, "~r~Ya tienes un GPS", 2);
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_GPS] = true;
							ShowPlayerNotification(playerid, "Compraste un GPS.", 3);
							ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // pagar
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
						}
					}
					case PRODUCT_TYPE_MP3:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if (PLAYER_OBJECT[playerid][po_MP3])
							{
								ShowPlayerMessage(playerid, "~r~Ya tienes un MP3", 2);
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_MP3] = true;
							SendClientMessageEx(playerid, COLOR_WHITE, "Has comprado un "COL_RED"%s "COL_WHITE"por "COL_RED"%d$, "COL_WHITE"usa "COL_RED"/MP3 "COL_WHITE"para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // pagar
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
						}
					}
					case PRODUCT_TYPE_PHONE_RESOLVER:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if (PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
							{
							    ShowPlayerMessage(playerid, "~r~Ya tienes una guía telefónica.", 2);
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = true;
							ShowPlayerNotification(playerid, "Compraste una guía telefónica.", 3);
							ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // pagar
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_HOSPITAL_SHOP:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 70) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);
						{
							GivePlayerCash(playerid, -70);
							PLAYER_MISC[playerid][MISC_VENDAS] += 5;
							ShowPlayerNotification(playerid, "Compraste 5 vendas por 70$", 3);
							SavePlayerMisc(playerid);
							return 1;
						}
					}
					case 1:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 170) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);
						{
							GivePlayerCash(playerid, -170);
							PLAYER_MISC[playerid][MISC_MEDICINE] += 10;
							ShowPlayerNotification(playerid, "Compraste 10 medicamentos por 170$", 3);
							SavePlayerMisc(playerid);
							return 1;
						}
					}
					case 2:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 720) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);
						{
							if (IsFullInventory(playerid)) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

							GivePlayerCash(playerid, -720);
							PLAYER_MISC[playerid][MISC_BOTIKIN] += 1;
							ShowPlayerNotification(playerid, "Compraste un botiquín por 720$", 3);
							SavePlayerMisc(playerid);
							return 1;
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			if (response)
			{
				if (listitem == MAX_PLAYER_POCKET_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_POCKET_DELETE_ALL);
				if (!PLAYER_POCKET[playerid][listitem][player_pocket_VALID])
				{
				    ShowPlayerMessage(playerid, "~r~Este slot está vació", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: //Consumir
					{
						if (CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0)
						{
							PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED] = 0;
							ShowPlayerMessage(playerid, "~r~No puedes consumir más.", 2);
							return 1;
						}

						Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]][player_pocket_object_THIRST]);
						GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]][player_pocket_object_DRUNK]);

						SetPlayerChatBubble(playerid, "\n\n\n\n* Consume algo.\n\n\n", 0xffcb90FF, 20.0, 5000);

						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED] = 0;

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					}
					case 1: //Eliminar
					{
						ShowPlayerNotification(playerid, "Alimento eliminado.", 3);
						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED] = 0;
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][py_POCKET_SLOT_SELECTED] = 0;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_POCKET[Player_Pocket_Enum];
				for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;

				ShowPlayerMessage(playerid, "Ha eliminado todo lo que tenías en tus alimentos.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			return 1;
		}
		case DIALOG_PHONE:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: //Llamar
					{
						if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
						{
							PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, enciéndelo para usarlo.", 3);
						ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
					}
					case 1: //Enviar mensaje
					{
						if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, enciéndelo para usarlo.", 3);
						ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
					}
					case 2: //Apagar
					{
						if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, enciéndelo para usarlo.", 3);

						if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) EndPhoneCall(playerid);
						PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_OFF;
						ShowPlayerMessage(playerid, "Has apagado tu teléfono, ahora no recibirás llamadas.", 3);
					}
				}
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);

				PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (strlen(inputtext) > 24)
				{
					ShowPlayerMessage(playerid, "~r~Caracteres: 1-24.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayerPhoneBookSlot(playerid);
				if (slot == -1) return ShowPlayerMessage(playerid, "~r~La memoria de la agenda se llenó.", 3);


				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
				format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_ADD_NUMBER];
				RegisterNewPlayerPhoneBook(playerid, slot);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "~g~Nuevo contacto añadido a la agenda.", 3);
				SendClientMessageEx(playerid, COLOR_WHITE, "Nuevo contacto añadido a la agenda: Nombre: "COL_RED"%s "COL_WHITE"Teléfono: "COL_RED"%d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
			return 1;
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: //llamar
					{
						if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~Estás en una llamada.", 2);

						switch(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							case 911:
							{
								if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2", 2);
								PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = true;
								PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = false;

								SendClientMessage(playerid, COLOR_YELLOW, "Operadora:"COL_WHITE" Ha llamado a la central de policía, indícanos su nombre por favor.");
								return 1;
							}
							case 570: //Mecanico
							{
								if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
								{
									PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
									DisablePlayerMechanicMark(playerid);
							        ShowPlayerMessage(playerid, "Has cancelado el llamado a un mecánico.", 3);
								}
								else
								{
									PLAYER_TEMP[playerid][py_WANT_MECHANIC] = true;
									ShowPlayerMessage(playerid, "Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.", 3);
									//SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Vuelve a llamar a este número si ya no necesitas un mecánico.");
									SendAlertToMechanic(playerid);
								}
								return 1;
							}
							case 6740: return ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
							case 38350: return ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
							case 666: return SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Llamada no disponible.");
						}

						new to_playerid = INVALID_PLAYER_ID;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if (IsPlayerConnected(i))
							{
								if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
								{
									to_playerid = i;
									break;
								}
							}
						}

						if (to_playerid == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~El número al que intentas llamar no es correcto o está fuera de cobertura.", 3);
						if (to_playerid == playerid) return ShowPlayerMessage(playerid, "~r~El número al que intentas llamar no es correcto.", 3);
						if (PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~El número al que intentas llamar está apagado o fuera de cobertura.", 3);
						if (PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~El número al que intentas llamar está en otra llamada.", 3);

						SendClientMessageEx(to_playerid, COLOR_WHITE, ""COL_GREEN"[Llamada entrante] "COL_WHITE"%s te está llamando, para responder usa "COL_GREEN"/responder "COL_WHITE"o "COL_GREEN"/colgar.", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
						ShowPlayerMessage(to_playerid, "Llamada entrante...", 2);
						PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
						PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = playerid;

						SendClientMessageEx(playerid, COLOR_WHITE, "Llamando a "COL_GREEN"%s ...", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
						ShowPlayerMessage(playerid, "Llamando...", 2);
						PLAYER_TEMP[playerid][py_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
						PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
						PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
						PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
					}
					case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
					case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
					case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (strlen(inputtext) > 24)
				{
				    ShowPlayerMessage(playerid, "~r~Caracteres: 1-24.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);

				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `PHONE_BOOK` SET `NAME` = '%q' WHERE `CONTACT_ID` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);

			    ShowPlayerMessage(playerid, "Contacto modificado.", 2);
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			if (response)
			{
				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `CONTACT_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, COLOR_WHITE, "Contacto "COL_RED"\"%s\" "COL_WHITE"eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			    ShowPlayerMessage(playerid, "Contacto eliminado.", 2);

				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;

				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER]);
				db_query(Database, DB_Query);

				new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
				for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

				ShowPlayerMessage(playerid, "Has eliminado todos tus contactos.", 2);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
			if (response)
			{
				if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, para encenderlo usa /movil.", 3);
				if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~Estás en una llamada.", 2);

				if (sscanf(inputtext, "d", inputtext[0]))
				{
				    ShowPlayerMessage(playerid, "~r~Número no válido.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
				    ShowPlayerMessage(playerid, "~r~El número del destinario no es válido.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(inputtext[0])
				{
					case 911:
					{
						if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2", 2);
						PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = true;
						PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = false;

						SendClientMessage(playerid, COLOR_YELLOW, "Operadora:"COL_WHITE" Ha llamado a la central de policía, indícanos su nombre por favor.");
						return 1;
					}
					case 570: //Mecanico
					{
						if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
						{
							PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(playerid);
							ShowPlayerMessage(playerid, "Has cancelado el llamado de mecánico.", 2);
						}
						else
						{
							PLAYER_TEMP[playerid][py_WANT_MECHANIC] = true;
							ShowPlayerMessage(playerid, "Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.", 2);
							//SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Vuelve a llamar a este número si ya no necesitas un mecánico.");
							SendAlertToMechanic(playerid);
						}
						return 1;
					}
					case 6740: return ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
					case 38350: return ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
					case 666: return SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Llamada no disponible");
				}

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == inputtext[0])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if (to_playerid == INVALID_PLAYER_ID) return ShowPlayerNotification(playerid, "El número al que intentas llamar no es correcto o está fuera de cobertura.", 3);
				if (to_playerid == playerid) return ShowPlayerNotification(playerid, "El número al que intentas llamar no es correcto.", 3);
				if (PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerNotification(playerid, "El número al que intentas llamar está apagado o fuera de cobertura.", 3);
				if (PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL]) return ShowPlayerNotification(playerid, "El número al que intentas llamar está en otra llamada.", 3);

				SendClientMessageEx(to_playerid, COLOR_WHITE, ""COL_GREEN"[Llamada entrante] "COL_WHITE"%s te está llamando, para responder usa "COL_GREEN"/responder "COL_WHITE"o "COL_GREEN"/colgar.", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
				ShowPlayerMessage(to_playerid, "Llamada entrante...", 2);
				PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
				PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = playerid;

				SendClientMessageEx(playerid, COLOR_WHITE, "Llamando a "COL_GREEN"%s ...", convertPhoneNumber(playerid, inputtext[0]));
				ShowPlayerMessage(playerid, "Llamando...", 2);
				PLAYER_TEMP[playerid][py_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
				PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
				PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
				PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
			if (response)
			{
				if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "~r~Tu teléfono está apagado, para encenderlo usa /movil.", 3);
				if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "~r~Estás en una llamada", 2);

				if (sscanf(inputtext, "d", inputtext[0]))
				{
					ShowPlayerMessage(playerid, "~r~Número no válido.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					ShowPlayerMessage(playerid, "~r~El número del destinario no es válido.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", inputtext[0]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);

				if (!phone_exists)
				{
					ShowDialog(playerid, dialogid);
					ShowPlayerMessage(playerid, "~r~El número del destinario no es válido.", 2);
					return 1;
				}

				PLAYER_TEMP[playerid][py_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
			if (response)
			{
				if (isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if (strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_TEMP[playerid][py_PLAYER_PHONE_NUMBER_SELECTED])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if (to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][py_PLAYER_PHONE_NUMBER_SELECTED], inputtext, true);
				else
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][py_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
					if (PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Mensaje enviado a {7b9cd1}%s.", convertPhoneNumber(playerid, PLAYER_TEMP[playerid][py_PLAYER_PHONE_NUMBER_SELECTED]));
			}
			else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
			if (response)
			{
				if (isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if (strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);

				if (!phone_exists) return ShowPlayerMessage(playerid, "~r~El número del destinario no es válido.", 2);

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if (to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext, true);
				else
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext);
					if (PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Mensaje enviado a {7b9cd1}%s.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][py_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			return 1;
		}
		case DIALOG_PHONE_MESSAGE_LIST:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES);
					case 1: ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
				}
				return 1;
			}
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			if (response)
			{
				if (PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_SOLD]) return ShowPlayerMessage(playerid, "~r~Está propiedad ya está vendida", 2);
				if (PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
				{
					new str_text[128];
					format(str_text, sizeof(str_text), "Debes ser nivel %d para comrpar esta propiedad", PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_LEVEL]);
					return ShowPlayerNotification(playerid, str_text, 3);
				}
				if (PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "~r~No tienes cuenta bancaria.", 2);
				if (PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return ShowPlayerMessage(playerid, "~r~No eres VIP", 2);
				if (PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return ShowPlayerMessage(playerid, "~r~No tienes hycoins", 2);

				new DB_Query_update[350];
				if (!PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXTRA])
				{
					if (PLAYER_PHONE[playerid][player_phone_VALID])
					{
						new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_PRICE]));
						RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
						new str_buy[164], city[45], zone[45];
						GetPointZone(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_Y], city, zone);
						format(str_buy, sizeof(str_buy), "~y~Propiedad comprada~w~~n~Compraste una propiedad en %s, puedes ver las opciones de la propiedad pulsando la tecla H cuando te encuentres en pickup del interior.", zone);
						ShowPlayerNotification(playerid, str_buy, 5);
					}

					BANK_ACCOUNT[playerid][bank_account_BALANCE] -= PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_PRICE];

					format
					(
						DB_Query_update, sizeof(DB_Query_update),
						"UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]
					);
					db_query(Database, DB_Query_update);

					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_PRICE]);
				}
				else
				{
					ACCOUNT_INFO[playerid][ac_SD] -= PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXTRA];

					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);

					SendClientMessageEx(playerid, COLOR_WHITE, "Has gastado %d "SERVER_COIN" en la compra de esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXTRA]);
				}


				PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_SOLD] = true;
				PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_CREW] = false;
				PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];

				format
				(
					DB_Query_update, sizeof(DB_Query_update),
					"INSERT INTO `PROPERTY_OWNER` (`ID_PROPERTY`, `ID_USER`, `PROPERTY_NAME`) VALUES ('%d', '%d', '%q');",
					PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_ID], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_NAME]
				);
				db_query(Database, DB_Query_update);

				new label_str[256], info[3], city[45], zone[45];
				GetPointZone(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_Y], city, zone);
				format
				(
					label_str,
					sizeof label_str,
					""COL_WHITE"\
						Propiedad en %s (%d)\n\
						Propietario:{35A7FF} %s\n\
					", zone, PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_LABEL_ID], 0xF7F7F700, label_str);

				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new str_buy[264];
				GetPointZone(PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_BUY_HOUSE_INDEX]][property_EXT_Y], city, zone);
				format(str_buy, sizeof(str_buy), "~y~Propiedad comprada~w~~n~Compraste una propiedad en %s, puedes ver las opciones de la propiedad pulsando la tecla H cuando te encuentres en pickup del interior.", zone);
				ShowPlayerNotification(playerid, str_buy, 5);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 10) return ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_ADD);
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 20) return ShowDialog(playerid, DIALOG_PLAYER_GPS_DELETE_ALL);

				PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (strlen(inputtext) > 24)
				{
				    ShowPlayerMessage(playerid, "~r~Caracteres: 1-24.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayer_GPS_Slot(playerid);
				if (slot == -1) return ShowPlayerMessage(playerid, "~r~La memoria del GPS se llenó.", 3);

				PLAYER_GPS[playerid][slot][player_gps_VALID] = true;
				format(PLAYER_GPS[playerid][slot][player_gps_NAME], 24, "%s", inputtext);
				GetPlayerPos(playerid, PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z]);
				PLAYER_GPS[playerid][slot][player_gps_WORLD] = GetPlayerVirtualWorld(playerid);
				PLAYER_GPS[playerid][slot][player_gps_INTERIOR] = GetPlayerInterior(playerid);
				RegisterNewPlayer_GPS_Site(playerid, slot);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Nuevo sitio añadido al GPS con el nombre: "COL_RED"%s.", PLAYER_GPS[playerid][slot][player_gps_NAME]);
				ShowPlayerMessage(playerid, "Nuevo sitio añadido al GPS.", 2);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: SetPlayer_GPS_Checkpoint(playerid, PLAYER_GPS[playerid][PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED]][player_gps_X], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED]][player_gps_Y], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED]][player_gps_Z], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED]][player_gps_WORLD], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED]][player_gps_INTERIOR]);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_CHANGE_NAME);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (strlen(inputtext) > 24)
				{
				    ShowPlayerMessage(playerid, "~r~Caracteres: 1-24", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "%s", inputtext);

				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_GPS` SET `NAME` = '%q' WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME], PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "Has modificado el nombre de este lugar correctamente.", 3);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			if (response)
			{
				new DB_Query[110];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_VALID] = false;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_ID] = 0;
				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "");
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_X] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_Y] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_Z] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_WORLD] = 0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][py_GPS_PLAYER_SELECTED] ][player_gps_INTERIOR] = 0;

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "Has eliminado este lugar de tu GPS.", 2);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_GPS[Player_GPS_Enum];
				for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

				ShowPlayerMessage(playerid, "Has eliminado todos tus lugares guardados.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_0);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_1);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_2);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_3);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_4);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_5);
					case 6: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_6);
					case 7: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_7);
					case 8: SetPlayer_GPS_Checkpoint(playerid, 1571.468627, -1336.893188, 16.484375, 0, 0);
					case 9: SetPlayer_GPS_Checkpoint(playerid, 1555.400390, -1675.611694, 16.195312, 0, 0);
					case 10: SetPlayer_GPS_Checkpoint(playerid, -69.941520, -1181.400634, 1.750000, 0, 0);
					case 11: SetPlayer_GPS_Checkpoint(playerid, 1876.87915, -2286.58911, 1.16550 + 15, 0, 0);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return true;
				else SetPlayer_GPS_Checkpoint(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			if (response) SetPlayer_GPS_Checkpoint(playerid, Hospital_Spawn_Positions[listitem][0], Hospital_Spawn_Positions[listitem][1], Hospital_Spawn_Positions[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1 .. DIALOG_PLAYER_GPS_SITE_4, DIALOG_PLAYER_GPS_SITE_8: //EE
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				SetPlayer_GPS_Checkpoint(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][ee_EXT_X], ENTER_EXIT[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][ee_EXT_Y], ENTER_EXIT[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][ee_EXT_Z], ENTER_EXIT[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][ee_EXT_WORLD], ENTER_EXIT[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][ee_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			if (response) SetPlayer_GPS_Checkpoint(playerid, ATM_BANK[listitem][atm_X], ATM_BANK[listitem][atm_Y], ATM_BANK[listitem][atm_Z], ATM_BANK[listitem][atm_WORLD], ATM_BANK[listitem][atm_INTERIOR]);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			if (response) SetPlayer_GPS_Checkpoint(playerid, Fuel_Stations[listitem][0], Fuel_Stations[listitem][1], Fuel_Stations[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_TRABAJOS_TELEPORTS:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return true;
				else SetPlayerPosEx(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z],0.0,0,0,true);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			if (response) SetPlayer_GPS_Checkpoint(playerid, SELL_VEHICLES_SHOPS_SPAWN[listitem][0], SELL_VEHICLES_SHOPS_SPAWN[listitem][1], SELL_VEHICLES_SHOPS_SPAWN[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_GPS_SELECTED_PROPERTY][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				new index = GetPropertyIndexByID(PLAYER_TEMP[playerid][py_PLAYER_GPS_SELECTED_PROPERTY][listitem]);
				if (index != -1) SetPlayer_GPS_Checkpoint(playerid, PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], 0, PROPERTY_INFO[index][property_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				if (!ACCOUNT_INFO[playerid][ac_SU])
				{
					if (!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][player_vehicle_ACCESSIBLE])
					{
					    ShowPlayerMessage(playerid, "~r~No podrás usar este vehículo hasta que no seas VIP.", 3);
					}
				}

				new Float:pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem], pos[0], pos[1], pos[2]);
				SetPlayer_GPS_Checkpoint(playerid, pos[0], pos[1], pos[2], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_HELI_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_GASOLINE); 
					case 1: ShowTuningMenu(playerid);
				}
			}
			return 1;
		}
		case DIALOG_GASOLINE:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
							if (!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return ShowPlayerMessage(playerid, "~r~No puedes poner gasolina a este vehículo.", 3);
							
							if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return ShowPlayerMessage(playerid, "~r~El vehículo debe estar detenido.", 3);

							ShowDialog(playerid, DIALOG_LOAD_GASOLINE);
						}
					}
					case 1:
					{
						if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
							if (!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return ShowPlayerMessage(playerid, "~r~No puedes poner gasolina a este vehículo.", 3);
							
							new Float:ammount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

							new price = floatround( floatmul(ammount, 5.0) );
							if (CHARACTER_INFO[playerid][ch_CASH] >= price)
							{
								GivePlayerCash(playerid, -price);
								GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
								new str_text[64];
								format(str_text, sizeof(str_text), "Has puesto %.1f litros de gasolina a tu vehículo por %s$.", ammount, number_format_thousand(price));
								ShowPlayerNotification(playerid, str_text, 3);
							}
							else ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 3);
						}
					}
					case 2:
					{
						if (!PLAYER_MISC[playerid][MISC_FUEL_DRUM])
						{
							if (CHARACTER_INFO[playerid][ch_CASH] >= 250)
							{
								ShowPlayerNotification(playerid, "Has comprado un bidón de gasolina de 20 litros por 250$.", 3);
								GivePlayerCash(playerid, -250);
								SavePlayerMisc(playerid);
								PLAYER_MISC[playerid][MISC_FUEL_DRUM] = 20;
							}
							else ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						}
						else
						{
							if (PLAYER_MISC[playerid][MISC_FUEL_DRUM] == 20) return ShowPlayerMessage(playerid, "~Tu bidón de gasolina ya está lleno.", 3);

							new ammount = (20 - PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
							new price = (13 * ammount);

							if (CHARACTER_INFO[playerid][ch_CASH] >= price)
							{
								ShowPlayerNotification(playerid, "Has llenado tu bidón de gasolina con 20 litros.", 3);
								GivePlayerCash(playerid, -price);
								SavePlayerMisc(playerid);
								PLAYER_MISC[playerid][MISC_FUEL_DRUM] += ammount;
							}
							else ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						}
					}
				}
			}
		}
		case DIALOG_LOAD_GASOLINE:
		{
			if (response)
			{
				new result_input;
				if (sscanf(inputtext, "d", result_input)) return ShowPlayerMessage(playerid, "~r~Ingrese un valor correcto.", 3);

				new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
				if (!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return ShowPlayerMessage(playerid, "~r~No puedes poner gasolina a este vehículo.", 3);

				new Float:ammount = float(result_input);
				if (ammount < 0.0) return ShowPlayerMessage(playerid, "~r~Ingrese un valor correcto.", 3);
				if (ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

				new price = floatround( floatmul(ammount, 5.0) );

				if (CHARACTER_INFO[playerid][ch_CASH] >= price)
				{
					GivePlayerCash(playerid, -price);
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;

					new str_text[64];
					format(str_text, sizeof(str_text), "Has puesto %.1f litros de gasolina a tu vehículo por %s$.", ammount, number_format_thousand(price));
					ShowPlayerNotification(playerid, str_text, 3);
				}
				else ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
			}
			return 1;
		}
		case DIALOG_FUEL_DRUM:
		{
			if (response)
			{
				if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerNotification(playerid, "Tienes que estar fuera del vehículo para vertir el bidón.", 3);

				new vehicleid = GetPlayerCameraTargetVehicle(playerid);
				if (vehicleid == INVALID_VEHICLE_ID) return ShowPlayerNotification(playerid, "No estás cerca de ningún vehículo.", 3);

				if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
				{
					ShowPlayerNotification(playerid, "Por favor, para primero el motor del vehículo.", 3);
					return 1;
				}

				new ammount_load, str_text[128];

				if (sscanf(inputtext, "d", ammount_load)) return ShowPlayerMessage(playerid, "~r~Cantidad de litros no válida.", 3);
				if (ammount_load <= 0) return ShowPlayerMessage(playerid, "~r~Cantidad de litros no válida.", 3);
				if (ammount_load > PLAYER_MISC[playerid][MISC_FUEL_DRUM]) return ShowPlayerNotification(playerid, "No te alcanza para llenar el tanque.", 3);

				new Float:ammount = float(ammount_load);
				if (ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

				PLAYER_MISC[playerid][MISC_FUEL_DRUM] -= floatround(ammount);
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;

				format(str_text, sizeof(str_text), "Has vertido ~r~%.1f~w~ litros del bidón, te quedan ~r~%d.0~w~ litros.", ammount, PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
				ShowPlayerMessage(playerid, str_text, 5);
				SetPlayerChatBubble(playerid, "\n\n\n\n* Ha puesto gasolina el vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
					case 1:
					{
						new total;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if (IsPlayerConnected(i))
							{
								if ( CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID])
								{
									CHARACTER_INFO[i][ch_STATE] = ROLEPLAY_STATE_NORMAL;
									CHARACTER_INFO[i][ch_INTERIOR_EXTRA] = 0;
									PLAYER_TEMP[i][py_PROPERTY_INDEX] = -1;
									SetPlayerPosEx(i, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
									StopAudioStreamForPlayer(i);
									SendClientMessageEx(i, COLOR_WHITE, "{bad2d8}%s "COL_WHITE"te ha echado de su propiedad.", PLAYER_TEMP[playerid][py_RP_NAME]);
									ShowPlayerMessage(i, "~r~Te hecharon de la propiedad.", 3);
									total ++;
								}
							}
						}
						if (total == 0) ShowPlayerMessage(playerid, "~r~No hay nadie en tu propiedad", 2);
						else SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Has echado %d personas de tu propiedad.", total);
					}
				}
			}
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			if (response)
			{
				if (!PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if (PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;

				if (isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if (strlen(inputtext) > 15)
				{
					ShowDialog(playerid, dialogid);
				    ShowPlayerMessage(playerid, "~r~Caracteres: 1-15.", 2);
					return 1;
				}

				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s", inputtext);

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query, "UPDATE `PROPERTY_OWNER` SET `PROPERTY_NAME` = '%q' WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';", inputtext, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				ShowPropertyMenu(playerid);
			}
			else ShowPropertyMenu(playerid);
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			if (response)
			{
				if (isnull(inputtext)) return ShowDialog(playerid, dialogid);

				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Cargando ...", "Espera mientras buscamos resultados para su búsqueda ...", "X", "");

				new title[100 + 1];
				title = SpaceFix(inputtext);
				new str[180]; format(str, sizeof str, "http://wifson-studios.rf.gd/mp3.php?limit=10&song_title=%s", title);

				PLAYER_TEMP[playerid][py_PLAYER_WAITING_MP3_HTTP] = true;
				//HTTP(playerid, HTTP_GET, str, "", "OnPlayerSongFound");
			}
			return 1;
		}
		case DIALOG_PLAYER_MP3_RESULTS:
		{
			if (response)
			{
				new url[128];
				format(url, 128, "http://www.convertmp3.io/fetch/?video=http://www.youtube.com/watch?v=%s", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][videoID]);
				if (PLAYER_TEMP[playerid][py_MUSIC_FOR_PROPERTY])
				{

					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if (IsPlayerConnected(i))
						{
							if ( (CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA])
							{
								PlayAudioStreamForPlayer(i, url);
								SendClientMessageEx(i, COLOR_WHITE, ""COL_WHITE"Reproduciendo "COL_RED"'%s' "COL_WHITE"usa {CCFF00}/stop "COL_WHITE"para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
							}
						}
					}
					PLAYER_TEMP[playerid][py_MUSIC_FOR_PROPERTY] = false;
					SetPlayerChatBubble(playerid, "\n\n\n\n* Poné música en su propiedad.\n\n\n", 0xffcb90FF, 20.0, 5000);
				}
				else if (PLAYER_TEMP[playerid][py_MUSIC_FOR_VEHICLE])
				{

					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if (IsPlayerConnected(i))
						{
							if (IsPlayerInAnyVehicle(i))
							{
								if (GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
								{
									PlayAudioStreamForPlayer(i, url);
									SendClientMessageEx(i, COLOR_WHITE, ""COL_WHITE"Reproduciendo "COL_RED"'%s' "COL_WHITE"usa {CCFF00}/stop "COL_WHITE"para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
								}
							}
						}
					}
					PLAYER_TEMP[playerid][py_MUSIC_FOR_VEHICLE] = false;
					if (PLAYER_VEHICLES[ GetPlayerVehicleID(playerid) ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) SetPlayerChatBubble(playerid, "\n\n\n\n* Pone música en su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
					else SetPlayerChatBubble(playerid, "\n\n\n\n* Pone música en su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
				}
				else
				{
					PlayAudioStreamForPlayer(playerid, url);
					SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Reproduciendo "COL_RED"'%s' "COL_WHITE"usa {CCFF00}/stop "COL_WHITE"para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
					SetPlayerChatBubble(playerid, "\n\n\n\n* Escucha música en sus auriculares.\n\n\n", 0xffcb90FF, 20.0, 5000);
				}
			}
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] == INVALID_VEHICLE_ID) return 1;
				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 1;
				if (!SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 1;
				if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return 1;
				if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return 1;
				if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return 1;
				if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE]) return 1;
				if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return 1;

				new cmpv = AddPersonalVehicle
				(
					playerid,
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_1],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_2],
					VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS]
				);

				if (!cmpv) return ShowPlayerMessage(playerid, "~r~No se puede agregar más vehículos.", 3);

				if (SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA])
				{
					ACCOUNT_INFO[playerid][ac_SD] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA];

					new DB_Query_update[160];
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);

					SendClientMessageEx(playerid, COLOR_WHITE, "Has gastado %d "SERVER_COIN" en la compra de este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
				}
				else
				{
					if (PLAYER_PHONE[playerid][player_phone_VALID])
					{
						new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
						RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
						if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(playerid, 6740), message);
						GameTextForPlayer(playerid, "VEHICULO COMPRADO", 6000, 0);
					}

					BANK_ACCOUNT[playerid][bank_account_BALANCE] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE];
					new DB_Query_update[160];
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
					db_query(Database, DB_Query_update);
					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]);
				}

				ShowPlayerMessage(playerid, "¡Vehículo comprado! Utiliza ~y~/ayuda~w~ para ver que puedes hacer con tu nuevo vehículo.", 4);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				new Float:pos[4];
				pos[0] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0];
				pos[1] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1];
				pos[2] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2];
				pos[3] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3];

				pos[0] += (2.0 * floatsin(-(pos[3] + 90.0), degrees));
				pos[1] += (2.0 * floatcos(-(pos[3] + 90.0), degrees));
				SetPlayerPosEx(playerid, pos[0], pos[1], pos[2], pos[3], 0, 0);

				if (!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_NOTARY:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 3:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] = GetPropertyIndexByID(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem]);
				if (PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] == -1) return ShowPlayerMessage(playerid, "~r~La ID de la propiedad es incorrecta.", 3);

				switch(PLAYER_TEMP[playerid][py_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][py_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_PROPERTY;
						PLAYER_TEMP[playerid][py_SHOP_ADD_MODELID] = 1273;
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if (PLAYER_TEMP[playerid][py_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			if (response)
			{
				if (!PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if (PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~Necesitas una cuenta bancaria para vender una propiedad.", 3);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				new city[45], zone[45];
				GetPointZone(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], city, zone);
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]);

				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new Float:price, payment;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
				if (ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.70) );
				else payment = floatround( floatmul(price, 0.70) );

				if (PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(playerid, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;

				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "\
					UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';\
				",
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]
				);
				db_query(Database, DB_Query_update);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, payment);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Has vendido esta propiedad, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				ShowPlayerMessage(playerid, "Propiedad vendida.", 2);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				new Float:price, min_price, max_price;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );

				if (inputtext[0] < min_price || inputtext[0] > max_price)
				{
					ShowPlayerMessage(playerid, "~r~Este precio no está dentro del rango ofrecido.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_PROPERTY_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			if (response)
			{
				if (sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if (!IsPlayerConnected(inputtext[0])) return ShowPlayerMessage(playerid, "~r~Comprador desconectado", 3);
				if (inputtext[0] == playerid) return ShowPlayerMessage(playerid, "~r~No puedes vender cosas a tí mismo.", 3);
				if (PLAYER_TEMP[inputtext[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El comprador no está disponible.", 3);

				if (ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return ShowPlayerMessage(playerid, "~r~El comprador no está en la sala.", 3);
				if (!IsPlayerInRangeOfPoint(inputtext[0],6.0, 1796.071655,-1414.565307,2770.660156)) return ShowPlayerMessage(playerid, "~r~El comprador no está en la sala.", 3);
				if (BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~El comprador no tiene cuenta bancaria.", 3);

				new DBResult:Result, DB_Query[120], player_properties;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT() AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if (db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
				db_free_result(Result);

				if (player_properties >= MAX_SU_PROPERTIES) return ShowPlayerMessage(playerid, "~r~El comprador no puede adquirir más propiedades.", 3);
				if (!ACCOUNT_INFO[inputtext[0]][ac_SU])
				{
					if (player_properties >= MAX_NU_PROPERTIES) return ShowPlayerMessage(playerid, "~r~El comprador no puede adquirir más propiedades.", 3);
				}

				if (ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~El comprador debe ser nivel 2.", 3);
				if (PLAYER_TEMP[playerid][py_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "~r~El comprador no tiene ese dinero.", 3);

				ShowPlayerMessage(playerid, "Tu oferta se envió al comprador.", 3);

				SetPlayerChatBubble(playerid, "\n\n\n\n* Trata de llagar a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);

				PLAYER_TEMP[inputtext[0]][py_PLAYER_PROPERTY_SELECTED] = PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED];
				PLAYER_TEMP[inputtext[0]][py_NOTARY_PRICE] = PLAYER_TEMP[playerid][py_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][py_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_PROPERTY);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			if (response)
			{
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_NOTARY_TO_PLAYER] != playerid) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);
				if (ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return ShowPlayerMessage(playerid, "~r~El vendedor no está en la sala.", 3);
				if (!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER],6.0, 1796.071655,-1414.565307,2770.660156)) return ShowPlayerMessage(playerid, "~r~El vendedor no está en la sala.", 3);
				if (BANK_ACCOUNT[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~El vendedor no tiene cuenta bancaria.", 3);

				// Traspasar
				new label_str[256], city[45], zone[45];
				GetPointZone(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], city, zone);
				format
				(
					label_str,
					sizeof label_str,
					""COL_WHITE"\
						Propiedad en %s (%d)\n\
						Propietario:{35A7FF} %s\n\
					", zone, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xF7F7F700, label_str);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PROPERTY_OWNER` SET `ID_USER` = '%d' WHERE `ID_PROPERTY` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID]
				);
				db_query(Database, DB_Query_update);


				// Banco
				new price = PLAYER_TEMP[playerid][py_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER];

				if (PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
				}
				if (PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					GameTextForPlayer(playerid, "PROPIEDAD VENDIDA", 6000, 0);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, price);

				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, price);


				format(DB_Query_update, sizeof(DB_Query_update),
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);

				new str_buy[164];
				GetPointZone(PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], city, zone);
				format(str_buy, sizeof(str_buy), "~y~Propiedad comprada~w~~n~Compraste una propiedad en %s, puedes ver las opciones de la propiedad pulsando la tecla H cuando te encuentres en pickup del interior.", zone);
				ShowPlayerNotification(playerid, str_buy, 2);

				ShowPlayerNotification(seller, "Vendiste tu propiedad, el dinero se depositó en tu cuenta bancaria.", 3);				
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);

				SetPlayerChatBubble(playerid, "\n\n\n\n* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];

				switch(PLAYER_TEMP[playerid][py_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_VEHICLE_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][py_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_VEHICLE;
						PLAYER_TEMP[playerid][py_SHOP_ADD_MODELID] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID];
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL1] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_1];
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL2] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_2];
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if (PLAYER_TEMP[playerid][py_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			if (response)
			{
				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_VALID]) return 1;
				if (PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if (BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~Debes tener cuenta bancaria para vender vehículos.", 3);

				new Float:price, payment;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				if (ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.70) );
				else payment = floatround( floatmul(price, 0.70) );

				//Destruir veh
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "DELETE FROM `PLAYER_VEHICLES` WHERE `ID` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				db_query(Database, DB_Query_update);

				DestroyVehicleEx(PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED]);


				if (PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(playerid, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
				db_query(Database, DB_Query_update);
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, payment);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Has vendido este vehículo, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				if (!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				new Float:price, min_price, max_price;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );

				if (inputtext[0] < min_price || inputtext[0] > max_price)
				{
					ShowPlayerMessage(playerid, "~r~Este precio no esta dentro del rango ofrecido", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_VEHICLE_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			if (response)
			{
				if (sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if (!IsPlayerConnected(inputtext[0])) return ShowPlayerMessage(playerid, "~r~Comprador desconectado.", 3);
				if (inputtext[0] == playerid) return ShowPlayerMessage(playerid, "~r~No puedes venderte cosas a tí mismo.", 3);
				if (PLAYER_TEMP[inputtext[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El comprador no está disponible.", 3);

				if (ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return ShowPlayerMessage(playerid, "~r~El comprador no está en la sala", 3);
				if (!IsPlayerInRangeOfPoint(inputtext[0],6.0, 1796.071655,-1414.565307,2770.660156)) return ShowPlayerMessage(playerid, "~r~El comprador no está en la sala", 3);
				if (BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~El comprador no tiene cuenta bancaria", 3);

				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if (db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);

				if (player_vehicles >= MAX_SU_VEHICLES) return ShowPlayerMessage(playerid, "~r~El comprador no puede adquirir más vehículos.", 3);
				if (!ACCOUNT_INFO[inputtext[0]][ac_SU])
				{
					if (player_vehicles >= MAX_NU_VEHICLES) return ShowPlayerMessage(playerid, "~r~El comprador no puede adquirir más vehículos.", 3);
				}

				if (ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~El comprador debe ser nivel 2.", 3);
				if (PLAYER_TEMP[playerid][py_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "~r~El comprador no tiene ese dinero.", 3);

				ShowPlayerMessage(playerid, "Tu oferta se envió al comprador.", 3);

				SetPlayerChatBubble(playerid, "\n\n\n\n* Intenta llegar a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);

				PLAYER_TEMP[inputtext[0]][py_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED];
				PLAYER_TEMP[inputtext[0]][py_NOTARY_PRICE] = PLAYER_TEMP[playerid][py_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][py_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_VEHICLE);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			if (response)
			{
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_NOTARY_TO_PLAYER] != playerid) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);
				if (ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return ShowPlayerMessage(playerid, "~r~El vendedor no está en la sala.", 3);
				if (!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER],6.0, 1796.071655,-1414.565307,2770.660156)) return ShowPlayerMessage(playerid, "~r~El vendedor no está en la sala.", 3);
				if (BANK_ACCOUNT[ PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "~r~El vendedor no tiene cuenta vancaria.", 3);

				// Traspasar

				PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PLAYER_VEHICLES` SET `ID_USER` = '%d' WHERE `ID` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]
				);
				db_query(Database, DB_Query_update);


				// Banco
				new price = PLAYER_TEMP[playerid][py_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][py_NOTARY_TO_PLAYER];

				if (PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(playerid, 6740), message);
				}
				if (PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					if (PLAYER_PHONE[seller][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(seller, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, price);

				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, price);


				format(DB_Query_update, sizeof(DB_Query_update),
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);


				ShowPlayerMessage(playerid, "¡Vehículo omprado! Utiliza /GPS para localizarlo.", 3);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_RED"¡Vehículo %s comprado!", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
				SendClientMessageEx(seller, COLOR_WHITE, ""COL_RED"¡Vehículo vendido! "COL_WHITE"Has recibido {d1f442}%s$ "COL_WHITE"en tu cuenta bancaria.", number_format_thousand(price));
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				SetPlayerChatBubble(playerid, "\n\n\n\n* Llega a un acuerdo\n\n\n", 0xffcb90FF, 20.0, 5000);

				if (!ACCOUNT_INFO[seller][ac_SU]) ReLockPlayerVehicles(seller);
				if (!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			if (response)
			{
				if (isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME])) return 1;

				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

				if (PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES])
				{
					ShowDialog(playerid, dialogid);
					ShowPlayerMessage(playerid, "~r~No tienes suficientes piezas, tienes que comprar más piezas en el taller.", 3);
					return 1;
				}

				format(PLAYER_TEMP[playerid][py_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
				PLAYER_TEMP[playerid][py_TUNING_SELECTED_PIECES] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];

				ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			if (response)
			{
				if (isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]) || !PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]) return 1;

				new vehicleid = GetPlayerVehicleID(playerid);
				if (vehicleid == INVALID_VEHICLE_ID) return 1;
				if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

				if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					new slot = GetVehicleComponentType( PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] );
					new current_component = GetVehicleComponentInSlot(vehicleid, slot);
					if (current_component) RemoveVehicleComponent(vehicleid, current_component);

					if (CHARACTER_INFO[playerid][ch_CASH] <= 50) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][slot] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					AddVehicleComponent(vehicleid, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]);
					ShowPlayerMessage(playerid, "Componente ~g~añadido", 2);
					GivePlayerCash(playerid, -50, false);
					ShowTuningMenu(playerid);
				}
			}
			else ShowTuningMenu(playerid);
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			if (response)
			{
				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

				switch(listitem)
				{
					case 0: // Reparar
					{
						if (PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 10) return ShowPlayerMessage(playerid, "~r~No tienes suficientes piezas, tienes que comprar más piezas en el taller.", 3);

						if (gettime() < GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME] + 100)
						{
							new time = (300-(gettime()-GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME]));
							new str_text[128];
							format(str_text, sizeof(str_text), "Tienes que esperar %s minutos para volver a reparar este vehículo.", TimeConvert(time));
							ShowPlayerMessage(playerid, str_text, 3);
							return 1;
						}

						if (PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
						{
                            if (2 > PLAYER_SKILLS[playerid][WORK_MECHANIC]) return ShowPlayerMessage(playerid, "~r~Tienes que reparar 2 vehículos para reparar el tuyo", 4);
                            {
                                ShowPlayerMessage(playerid, "~g~Reparaste tú vehículo, por lo cual no se te cobrará.", 4);
                                RepairVehicleEx(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], playerid);
                            }

                            return 1;
						}
						else
						{
							if (!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
							{
								if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
								{
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 1;
									PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 10;
									RepairVehicleEx(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], playerid);

								    ShowPlayerMessage(playerid, "Has necesitado 10 piezas para la reparación.", 3);
									//SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
									return 1;
								}
							}
							ShowDialog(playerid, DIALOG_MECHANIC_REPAIR_PRICE);
						}
					}
					case 1:
					{
						if (PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5)
						{
							ShowDialog(playerid, dialogid);
							ShowPlayerMessage(playerid, "~r~No tienes suficientes piezas, tienes que comprar más piezas en el taller.", 3);
							return 1;
						}

						if (!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							ShowPlayerMessage(playerid, "~r~Solo los vehículos personales se pueden pintar.", 3);
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
					}
					case 2:
					{
						if (50 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Has realizado %d reparaciones como mecánico, necesitas 50 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECHANIC_REMOVE_COMPONEN);
					}
					case 3:
					{
						if (50 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Has realizado %d reparaciones como mecánico, necesitas 50 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							ShowPlayerMessage(playerid, "~r~Solo los vehículos personales se pueden tunear.", 3);
							return 1;
						}

						ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
					}
					case 4:
					{
						if (50 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Has realizado %d reparaciones como mecánico, necesitas 50 para paintjobs.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							ShowPlayerMessage(playerid, "~r~Solo los vehículos personales se le pueden cambiar el paintjob.", 3);
							return 1;
						}
						ShowDialog(playerid, DIALOG_TUNING_PAINTJOB);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
				    ShowPlayerMessage(playerid, "~r~El precio no es correcto.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0 || inputtext[0] > 2000)
				{
				    ShowPlayerMessage(playerid, "~r~El rango del precio debe ser: 0$ - 2.000$.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
				{
					new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
					if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo no está cerca tuya.", 3);

					new Float:mechanic_pos[3];
					GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
					if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo está muy lejos.", 3);

					PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
					PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
					PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];
					format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
					PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
					PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = 0;
					PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
					PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = 10;
					PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

					ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
					if (PLAYER_TEMP[buyer][py_WANT_MECHANIC])
					{
						PLAYER_TEMP[buyer][py_WANT_MECHANIC] = false;
						DisablePlayerMechanicMark(buyer);
					}

					SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s reparar su vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
				}
				else
				{
					if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_OCCUPIED])
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER];
						if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~El conductor del vehiculo no está cerca tuya.", 3);

						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El conductor del vehículo está muy lejos.", 3);

						PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if (PLAYER_TEMP[buyer][py_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][py_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}

						SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
					}
					else
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER];
						if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~Este vehículo no tiene conductor.", 3);

						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El conductor del vehículo está muy lejos.", 3);

						PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if (PLAYER_TEMP[buyer][py_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][py_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}

						SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
					}
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
				    ShowPlayerMessage(playerid, "~r~El precio no es correcto.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0 || inputtext[0] > 1750)
				{
				    ShowPlayerMessage(playerid, "~r~El rango del precio debe ser: 0$ - 1.750.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo no está cerca tuya.", 3);

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo está muy lejos.", 3);

				PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];

				switch(PLAYER_TEMP[playerid][py_MECHANIC_COLOR_SLOT])
				{
					case 0:
					{
						format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Pintar color primario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_1;
					}
					case 1:
					{
						format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Pintar color secundario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_2;
					}
				}

				PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR];
				PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = 5;
				PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s pintar su vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos", 3);

			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					ShowPlayerMessage(playerid, "~r~El precio no es correcto.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0 || inputtext[0] > ((PLAYER_TEMP[playerid][py_TUNING_SELECTED_PIECES] * 50) + 2000))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "El rango del precio es: 0$ - %s$.", number_format_thousand((PLAYER_TEMP[playerid][py_TUNING_SELECTED_PIECES] * 50) + 2000));
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo no está cerca.", 3);

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo está muy lejos.", 3);

				PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "'%s' > '%s'", PLAYER_TEMP[playerid][py_TUNING_SELECTED_PART], PLAYER_TEMP[playerid][py_TUNING_SELECTED_COMPONENT]);
				PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_TUNING;
				PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][py_TUNING_SELECTED_COMPONENT_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = PLAYER_TEMP[playerid][py_TUNING_SELECTED_PIECES];
				PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s tunear su vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					ShowPlayerMessage(playerid, "~r~El precio no es correcto.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0 || inputtext[0] > 2750)
				{
				    ShowPlayerMessage(playerid, "~r~}El rango del precio debe ser: 0$ - 2.750$.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if (buyer == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "~r~EL dueño del vehículo no esta cerca.", 3);

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if (!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return ShowPlayerMessage(playerid, "~r~El dueño del vehículo está muy lejos.", 3);

				PLAYER_TEMP[buyer][py_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][py_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][py_MECHANIC_TEXT], 64, "Paintjob (%d)", PLAYER_TEMP[playerid][py_PAINTJOB_SELECTED_ID]);
				PLAYER_TEMP[buyer][py_MECHANIC_TYPE] = MECHANIC_OPTION_PAINTJOB;
				PLAYER_TEMP[buyer][py_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][py_PAINTJOB_SELECTED_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][py_MECHANIC_PIECES] = 15;
				PLAYER_TEMP[buyer][py_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has ofrecido a %s cambiar el paintjob de su vehículo por %s$.", PLAYER_TEMP[buyer][py_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][py_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_MECHANIC_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_MECHANIC_PID])) return ShowPlayerMessage(playerid, "~r~El mecánico no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_MECHANIC_AID]) return ShowPlayerMessage(playerid, "~r~El mecánico no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_MECHANIC_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El mecánico está muy lejos.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El mecánico ya no está disponible.", 3);

				if (PLAYER_TEMP[playerid][py_MECHANIC_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
				{
				    ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "~r~La persona no tiene ese dinero.", 3);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					return 1;
				}
				if (PLAYER_TEMP[playerid][py_MECHANIC_PIECES] > PLAYER_MISC[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][MISC_MECHANIC_PIECES])
				{
					ShowPlayerMessage(playerid, "~r~El mecánico ya no tiene piezas.", 3);
					ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "~r~No tienes piezas suficientes para el trabajo.", 3);
					return 1;
				}

				if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID])
				{
					ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos del mecánico.", 3);
					ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "~r~El vehículo está muy lejos.", 3);
					return 1;
				}

				if (GetVehicleDistanceFromPoint(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], pos[0], pos[1], pos[2]) > 10.0)
				{
					ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos del mecánico.", 3);
					ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "~r~El vehículo está muy lejos.", 3);
					return 1;
				}

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_MECHANIC_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_MECHANIC_PID], PLAYER_TEMP[playerid][py_MECHANIC_PRICE]);

				switch(PLAYER_TEMP[playerid][py_MECHANIC_TYPE])
				{
					case MECHANIC_OPTION_REPAIR:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][py_MECHANIC_PIECES];
						PLAYER_SKILLS[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][WORK_MECHANIC] ++;
					    SavePlayerSkills(playerid);

						RepairVehicleEx(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], playerid);
						ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "Has usado 10 piezas en la reparacion.", 3);
					}
					case MECHANIC_OPTION_COLOR_1:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
					    SavePlayerMisc(playerid);
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = PLAYER_TEMP[playerid][py_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

						ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "Has usado 5 piezas en la pintura del vehículo.", 3);
					}
					case MECHANIC_OPTION_COLOR_2:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
					    SavePlayerMisc(playerid);
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = PLAYER_TEMP[playerid][py_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

						ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "Has usado 5 piezas en la pintura del vehículo.", 3);
					}
					case MECHANIC_OPTION_TUNING:
					{
						new slot = GetVehicleComponentType(PLAYER_TEMP[playerid][py_MECHANIC_EXTRA]);
						new current_component = GetVehicleComponentInSlot(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], slot);
						if (current_component) RemoveVehicleComponent(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], current_component);

						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = PLAYER_TEMP[playerid][py_MECHANIC_EXTRA];
						AddVehicleComponent(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], PLAYER_TEMP[playerid][py_MECHANIC_EXTRA]);

						PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][py_MECHANIC_PIECES];
						ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "Has usado 5 piezas en el tuneo del vehículo.", 3);
					    SavePlayerMisc(playerid);
						//SendClientMessageEx(PLAYER_TEMP[playerid][py_MECHANIC_PID], COLOR_WHITE, ""COL_WHITE"Has necesitado 5 piezas para tunear el vehículo.", PLAYER_TEMP[playerid][py_MECHANIC_PIECES]);
					}
					case MECHANIC_OPTION_PAINTJOB:
					{
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = PLAYER_TEMP[playerid][py_MECHANIC_EXTRA];
						ChangeVehiclePaintjob(PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "Has usado 5 piezas en el paintjob de el vehículo.", 3);
					    SavePlayerMisc(playerid);
						//SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Has necesitado 15 piezas para el paintjob de el vehículo.");
					}
				}

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Le has pagado %s$ al mecánico por su trabajo.", number_format_thousand(PLAYER_TEMP[playerid][py_MECHANIC_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_MECHANIC_PID], COLOR_WHITE, ""COL_WHITE"%s te ha pagado %s$ por tu trabajo.", PLAYER_TEMP[playerid][py_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][py_MECHANIC_PRICE]));
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_MECHANIC_TIME] + 30) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_MECHANIC_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_MECHANIC_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_MECHANIC_PID], "~r~La persona no aceptó lo que le ofreciste.", 3);
			}
			return 1;
		}
		case DIALOG_TUNING_SELECT_COL_SLOT:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				PLAYER_TEMP[playerid][py_MECHANIC_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_TUNING_SELECT_COLOR);
			}
			else ShowTuningMenu(playerid);
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				PLAYER_TEMP[playerid][py_MECHANIC_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_SELECT_COLOR:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					switch(PLAYER_TEMP[playerid][py_MECHANIC_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);

					ShowPlayerMessage(playerid, "Vehículo ~g~pintado.", 2);
					ShowTuningMenu(playerid);
				}
			}
			else ShowDialog(playerid, DIALOG_TUNING_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5) return ShowPlayerMessage(playerid, "~r~No tienes suficientes piezas, tienes que comprar más piezas en el taller.", 3);

				if (PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 5;
					switch(PLAYER_TEMP[playerid][py_MECHANIC_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

					ShowPlayerMessage(playerid, "Has usado 5 piezas para pintar el vehículo.", 3);
				}
				else
				{
					PLAYER_TEMP[playerid][py_MECHANIC_SELECTED_COLOR] = listitem;
					ShowDialog(playerid, DIALOG_MECHANIC_COLOR_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_TUNING_REMOVE:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return 1;

			if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] == 0) return ShowDialog(playerid, dialogid);

				RemoveVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;

				ShowPlayerMessage(playerid, "Componente ~r~eliminado");
				ShowTuningMenu(playerid);
			}
			else ShowTuningMenu(playerid);
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~El vehículo está muy lejos.", 3);

			if (response)
			{
				if (50 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Has realizado %d reparaciones como mecánico, necesitas 50 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] == 0) return ShowDialog(playerid, dialogid);

				RemoveVehicleComponent(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;

				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Componente eliminado, piezas ganadas: %d, piezas totales: %d.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES], PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			if (!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if (!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return ShowPlayerMessage(playerid, "~r~Esté vehículo está muy lejos.", 3);

			if (response)
			{
				if (50 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Has realizado %d reparaciones como mecánico, necesitas 50 para cambiar el paintjob de vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 15) return ShowPlayerMessage(playerid, "~r~No tienes suficientes piezas, tienes que comprar más piezas en el taller.", 3);

				if (listitem == 0)
				{
					if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] == 3)
					{
					    ShowPlayerMessage(playerid, "~r~El vehículo no tiene ningún paintjob.", 3);
						return 1;
					}

					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = 3;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);

					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += 15;
					SavePlayerMisc(playerid);
					ShowPlayerMessage(playerid, "Paintjob eliminado", 3);
					SendClientMessageEx(playerid, COLOR_WHITE, "Piezas ganadas: 15, piezas totales: %d.", PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
					return 1;
				}

				if (PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = listitem - 1;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
				    ShowPlayerMessage(playerid, "~r~Has usado 15 piezas para el paintjob de el vehículo.", 3);
				}
				else
				{
					PLAYER_TEMP[playerid][py_PAINTJOB_SELECTED_ID] = listitem - 1;
					ShowDialog(playerid, DIALOG_MECHANIC_PAINTJOB_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		/*case DIALOG_SELECT_TRASH_ROUTE:
		{
			if (response)
			{
				if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, COLOR_WHITE, ""COL_WHITE"Necesitas un compañero para comenzar a recoger basura.");
					return 1;
				}

				TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = listitem;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);

				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], listitem);
				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], listitem);

				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], COLOR_WHITE, "Ruta {42aaf4}#%d "COL_WHITE"establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], COLOR_WHITE, "Ruta {42aaf4}#%d "COL_WHITE"establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
			}
			return 1;
		}*/
		case DIALOG_SEED_LIST:
		{
			if (response)
			{
				PLAYER_TEMP[playerid][py_SELECTED_BUY_SEED_ID] = listitem;
				ShowDialog(playerid, DIALOG_SEED_BUY);
			}
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0])) return ShowPlayerMessage(playerid, "~r~Cantidad de semillas incorrecta.", 3);
				if (inputtext[0] <= 0 || inputtext[0] > 100000) return ShowPlayerMessage(playerid, "~r~Cantidad de semillas incorrecta.", 3);

				new price = seed_info[ PLAYER_TEMP[playerid][py_SELECTED_BUY_SEED_ID] ][seed_info_PRICE] * inputtext[0];
				if (price > CHARACTER_INFO[playerid][ch_CASH]) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

				switch(seed_info[ PLAYER_TEMP[playerid][py_SELECTED_BUY_SEED_ID] ][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += inputtext[0];
					case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += inputtext[0];
					case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += inputtext[0];
				}

				GivePlayerCash(playerid, -price);

				new str_text[32];
				format(str_text, 32, "~r~-%d$", price);
     			GameTextForPlayer(playerid, str_text, 5000, 1);
			}
			else ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			if (response)
			{
				if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

				switch(seed_info[listitem][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE:
					{
						if (plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_MEDICINE])
						{
							ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_MEDICINE] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CANNABIS:
					{
						if (plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CANNABIS])
						{
							ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CANNABIS] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CRACK:
					{
						if (plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CRACK])
						{
							ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CRACK] -= plant_info[listitem][plant_info_SEEDS];
					}
				}

				new str_text[128];
				format(str_text, sizeof(str_text), "Estas plantando %s, has gastado %d semillas.", plant_info[listitem][plant_info_NAME], plant_info[listitem][plant_info_SEEDS]);
				ShowPlayerNotification(playerid, str_text, 5);

				PLAYER_TEMP[playerid][py_LAST_PLANT_TIME] = gettime();
				PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] = listitem;
				PLAYER_TEMP[playerid][py_PLANTING] = true;
				PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] = minrand(0, 5);
				UpdatePlantSizeTextdrawPlant(playerid);

				TogglePlayerControllableEx(playerid, false);
				SetCameraBehindPlayer(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);

				KillTimer(PLAYER_TEMP[playerid][py_TIMERS][12]);
				PLAYER_TEMP[playerid][py_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, plant_info[listitem][plant_info_SEEDS]);
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (!ACCOUNT_INFO[playerid][ac_SU])
						{
							if (gettime() < PLAYER_TEMP[playerid][py_LAST_BM_BUY] + 25)
							{
								new time = (10-(gettime()-PLAYER_TEMP[playerid][py_LAST_BM_BUY]));
								SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que esperar %s segundos para volver a comprar aquí.", TimeConvert(time));
								return 1;
							}
						}

						ShowDialog(playerid, DIALOG_BLACK_MARKET_WEAPONS);
					}
					case 1: ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_SLOT];
					new str_text[128];

					if (PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						format(str_text, sizeof(str_text), "Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						ShowPlayerNotification(playerid, str_text, 4);
						return 1;
					}

					PLAYER_TEMP[playerid][py_LAST_BM_BUY] = gettime();

					GivePlayerCash(playerid, -BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE]);
					CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL] ++;

					if (WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 0);
					else GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 0);

					if (BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] == 41)
	            	{
	            		GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 5000);
	            	}

					RegisterNewPlayerWeapon(playerid, weapon_slot);

					format(str_text, sizeof(str_text), "Compraste una %s por %s$", WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE]));
	            	ShowPlayerNotification(playerid, str_text, 3);
	            }
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				    ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO_STOCK:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 300) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

						PLAYER_MISC[playerid][MISC_CARTRIDGE_1] += 5;
						SavePlayerMisc(playerid);

						if (!PLAYER_WORKS[playerid][WORK_POLICE] || !PLAYER_WORKS[playerid][WORK_MAFIA])
						{
							GivePlayerCash(playerid, -300, false);
							GameTextForPlayer(playerid, "~r~-300$", 5000, 1);
						}
						return 1;
					}
					case 1:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 500) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

						PLAYER_MISC[playerid][MISC_CARTRIDGE_4] += 5;
						SavePlayerMisc(playerid);

						if (!PLAYER_WORKS[playerid][WORK_POLICE] || !PLAYER_WORKS[playerid][WORK_MAFIA])
						{
							GivePlayerCash(playerid, -500, false);
							GameTextForPlayer(playerid, "~r~-500$", 5000, 1);
						}
						return 1;
					}
					case 2:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 700) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

						PLAYER_MISC[playerid][MISC_CARTRIDGE_3] += 5;
						SavePlayerMisc(playerid);

						if (!PLAYER_WORKS[playerid][WORK_POLICE] || !PLAYER_WORKS[playerid][WORK_MAFIA])
						{
							GivePlayerCash(playerid, -700, false);
							GameTextForPlayer(playerid, "~r~-700$", 5000, 1);
						}
						return 1;
					}
					case 3:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 850) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

						PLAYER_MISC[playerid][MISC_CARTRIDGE_2] += 5;
						SavePlayerMisc(playerid);

						if (!PLAYER_WORKS[playerid][WORK_POLICE] || !PLAYER_WORKS[playerid][WORK_MAFIA])
						{
							GivePlayerCash(playerid, -850, false);
							GameTextForPlayer(playerid, "~r~-850$", 5000, 1);
						}
						return 1;
					}
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];

				if (!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
				    ShowPlayerMessage(playerid, "~r~Esta arma no requiere de munición.", 3);
					return 1;
				}

				ShowDialog(playerid, DIALOG_BLACK_MARKET_AMMO);
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 450) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] > 1000)
						{
							ShowPlayerMessage(playerid, "~r~Esta arma ya tiene ~n~mucha munición.", 3);
							return 1;
						}

						GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], 50);

						new str_text[128];
						format(str_text, sizeof(str_text), "Compraste 50 balas para tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
						ShowPlayerNotification(playerid, str_text, 3);
						SavePlayerWeaponsData(playerid);

						if (PLAYER_WORKS[playerid][WORK_POLICE])
						{
							ShowPlayerMessage(playerid, "No se te va a cobrar por ser policía.", 3);
							return 1;
						}
						else
						{
							GivePlayerCash(playerid, -450, false);
							GameTextForPlayer(playerid, "~r~-450$", 5000, 1);
						}
						return 1;
					}
					case 1:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 650) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] > 1000)
						{
							ShowPlayerMessage(playerid, "~r~Esta arma ya tiene ~n~mucha munición.", 3);
							return 1;
						}

						GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], 100);

						new str_text[128];
						format(str_text, sizeof(str_text), "Compraste 100 balas para tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
						ShowPlayerNotification(playerid, str_text, 3);
						SavePlayerWeaponsData(playerid);

						if (PLAYER_WORKS[playerid][WORK_POLICE])
						{
							ShowPlayerMessage(playerid, "No se te va a cobrar por ser policía.", 3);
							return 1;
						}
						else
						{
							GivePlayerCash(playerid, -650, false);
							GameTextForPlayer(playerid, "~r~-650$", 5000, 1);
						}
						return 1;
					}
					case 2:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 850) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] > 1000)
						{
							ShowPlayerMessage(playerid, "~r~Esta arma ya tiene ~n~mucha munición.", 3);
							return 1;
						}

						GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], 250);

						new str_text[128];
						format(str_text, sizeof(str_text), "Compraste 250 balas para tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
						ShowPlayerNotification(playerid, str_text, 3);
						SavePlayerWeaponsData(playerid);

						if (PLAYER_WORKS[playerid][WORK_POLICE])
						{
							ShowPlayerMessage(playerid, "No se te va a cobrar por ser policía.", 3);
							return 1;
						}
						else
						{
							GivePlayerCash(playerid, -850, false);
							GameTextForPlayer(playerid, "~r~-850$", 5000, 1);
						}
						return 1;
					}
					case 3:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 1350) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);
						if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] > 1000)
						{
							ShowPlayerMessage(playerid, "~r~Esta arma ya tiene ~n~mucha munición.", 3);
							return 1;
						}

						GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], 370);

						new str_text[128];
						format(str_text, sizeof(str_text), "Compraste 370 balas para tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
						ShowPlayerNotification(playerid, str_text, 3);
						SavePlayerWeaponsData(playerid);

						if (PLAYER_WORKS[playerid][WORK_POLICE])
						{
							ShowPlayerMessage(playerid, "No se te va a cobrar por ser policía.", 3);
							return 1;
						}
						else
						{
							GivePlayerCash(playerid, -1350, false);
							GameTextForPlayer(playerid, "~r~-1350$", 5000, 1);
						}
						return 1;
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == 13 + 20) // Eliminar todo
				{
					ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE_A);
					return 1;
				}

				PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			if (response)

			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				ResetPlayerWeaponsEx(playerid);

			    ShowPlayerMessage(playerid, "Has eliminado todas tus armas.", 2);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			if (response)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				RemovePlayerSlotWeapon(playerid, PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT], true);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_ANIMS:
		{
		    if (response)
		    {
			   switch(listitem)
			   {
				  case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);//rendirse
				  case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
				  case 2: ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);//rodar
				  case 3: ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
				  case 4: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
				  case 5: ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);//apuntar
				  case 6: ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
				  case 7: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
				  case 8: ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);//paja
				  case 9: ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);//herido
				  case 10: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);//cruzarbrazos
				  case 11: ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
				  case 12: ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
				  case 13: ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
				  case 14: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);//comer
				  case 15: ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
				  case 16: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
				  case 17: ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
				  case 18: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
				  case 19: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
				  case 20: SetPlayerSpecialAction(playerid, 68);//mear
				  case 21: ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
				  case 22: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
				  case 23: ApplyAnimation(playerid, "ped", "phone_in", 4.000000, 0, 0, 0, 1, 4000);//llamar
				  case 24: ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
				  case 25: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
				  case 26: ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
				  case 27: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
				  case 28: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
				  case 29: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku antes era dormir
				  case 30: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
				  case 31: ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
				  case 32: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);//bailar
				  case 33: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
				  case 34: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
					case 35: ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);//asiento
			   }
			}
			return 1;
		}
		case DIALOG_TRICKS_FOOD:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor está desconectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				new to_player_slot = GetEmptyPlayerPocketSlot(playerid);
				if (to_player_slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~No tienes espacio en tus /alimentos para comprar esto.", 3);
					return 1;
				}

				TransferPlayerPocketObject(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA], playerid, to_player_slot);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_MEDICINE] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_MEDICINE] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}

		case DIALOG_TRICKS_VENDAS:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_VENDAS] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_VENDAS] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				SavePlayerMisc(playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_BOTIKIN:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_BOTIKIN] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_BOTIKIN] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
			    SavePlayerMisc(playerid);


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_CUETE:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_CUETE] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_CUETE] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
			    SavePlayerMisc(playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_CANNABIS] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_CANNABIS] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				SavePlayerMisc(playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				PLAYER_MISC[playerid][MISC_CRACK] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][MISC_CRACK] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				SavePlayerMisc(playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				ACCOUNT_INFO[playerid][ac_SD] += PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];
				ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_SD] -= PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA];

				new DB_Query_update[256];
				format
				(
					DB_Query_update, sizeof DB_Query_update,

						"\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
						",
							ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_SD], ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID]
				);
				db_query(Database, DB_Query_update);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);

				new str_text[32];
				format(str_text, 32, "~g~+%s$", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
     			GameTextForPlayer(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], str_text, 5000, 1);

				format(str_text, 32, "~r~-%s$", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
     			GameTextForPlayer(playerid, str_text, 5000, 1);

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return ShowPlayerMessage(playerid, "~r~El vendedor no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El vendedor no está cerca tuya.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~El vendedor no está disponible.", 3);


				if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA] ][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, COLOR_WHITE, "Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA]);
					return 1;
				}

				TransferPlayerWeapon(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_SELLER_EXTRA], playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], PLAYER_TEMP[playerid][py_TRICK_PRICE]);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], COLOR_WHITE, ""COL_WHITE"Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][py_TRICK_PRICE]));

				SetPlayerChatBubble(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "* Llega a un acuerdo con alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_TRICK_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_TRICK_SELLER_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_TRICK_SELLER_PID], "~r~El comprador no ha aceptado tu trato.", 3);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == MAX_BOOT_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE_ALL);
					return 1;
				}

				PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			}
			else
			{
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][gb_vehicle_PARAMS_BOOT] = false;
				UpdateVehicleParams(PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE]);
			}

		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][player_vehicle_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
				for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][i] = temp_VEHICLE_BOOT;

			    ShowPlayerMessage(playerid, "Has eliminado todo de este maletero.", 3);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (!VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_VALID]) return ShowPlayerMessage(playerid, "~r~No hay nada en ese slot.", 3);
						if (VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE] != BOOT_TYPE_WEAPON) return ShowPlayerMessage(playerid, "~r~En ese slot no hay armas.", 3);
						if (IsFullInventory(playerid)) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

						new to_slot = WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_SLOT];
						new str_text[128];

						if (PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							format(str_text, sizeof(str_text), "Para sacar esta arma tienes que deshacerte de tu %s para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME]);
							ShowPlayerNotification(playerid, str_text, 4);
							return 1;
						}

						new DB_Query[64];
						format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
						db_query(Database, DB_Query);

						GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA]);
						//GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], 9999);
						RegisterNewPlayerWeapon(playerid, to_slot);

						format(str_text, sizeof(str_text), "Sacaste una arma (%s) del maletero.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME]);
						ShowPlayerNotification(playerid, str_text, 4);

						new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;

						SetPlayerChatBubble(playerid, "\n\n\n\n* Saca una arma del maletero de su vehículo.\n\n\n", 0xffcb90FF, 20.0, 5000);
					}
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			if (response)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Has eliminado tu '%s' de este maletero.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);


				new DB_Query[64];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			if (response)
			{
				if (!PLAYER_WORKS[playerid][WORK_POLICE]) return 1;
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				if (POLICE_SKINS[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) return ShowDialog(playerid, dialogid);

				SetPlayerSkin(playerid, POLICE_SKINS[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][police_skin_SKIN]);
				PLAYER_TEMP[playerid][py_SKIN] = POLICE_SKINS[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][police_skin_SKIN];
				StartPlayerJob(playerid, WORK_POLICE);
				SetPlayerColorEx(playerid, 0x6060FF00);
			}
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			if (response)
			{
				PLAYER_TEMP[playerid][py_POLICE_RADIO] = listitem;
				SendClientMessageEx(playerid, COLOR_WHITE, "Tu radio ha sido ajustada a la frecuencia %d.", listitem + 1);
			}
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if (PLAYER_SKILLS[playerid][WORK_POLICE] >= 11)
					{
						PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_POLICE_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			if (response)
			{
				if (listitem > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
				    ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);

					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_POLICE);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "TOTAL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
				    ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este policía porque es un rango superior al tuyo.", 3);
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", listitem, PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_POLICE);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"El nuevo rango de %s es: '%s'.", name, POLICE_RANKS[listitem]);

				if (listitem == 0)
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_POLICE);
					db_query(Database, DB_Query);
				}

				if (connected)
				{
					PLAYER_SKILLS[player_id][WORK_POLICE] = listitem;

					if (listitem == 0)
					{
						if (PLAYER_TEMP[player_id][py_WORKING_IN] == WORK_POLICE) EndPlayerJob(player_id);
						PLAYER_WORKS[player_id][WORK_POLICE] = false;
						SendClientMessageEx(player_id, COLOR_WHITE, "El %s %s te ha expulsado del cuerpo de policía.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][py_RP_NAME]);
					}
					else SendClientMessageEx(player_id, COLOR_WHITE, ""COL_WHITE"El %s %s ha modificado tu rango del cuerpo de policía a '%s'.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][py_RP_NAME], POLICE_RANKS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_POLICE_LIST);
			return 1;
		}
		case DIALOG_MAFIA_LIST:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_MAFIA);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_MAFIA);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if (PLAYER_SKILLS[playerid][WORK_MAFIA] >= 7)
					{
						PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_MAFIA_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_MAFIA_MODIFY:
		{
			if (response)
			{
				if (listitem > PLAYER_SKILLS[playerid][WORK_MAFIA])
				{
				    ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);

					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_MAFIA);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "TOTAL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank > PLAYER_SKILLS[playerid][WORK_MAFIA])
				{
				    ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este jugador porque es un rango superior al tuyo.", 3);
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", listitem, PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_MAFIA);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, 0xca3535FF, "[LCN] "COL_WHITE" El nuevo rango de %s es: %s.", name, MAFIA_RANKS[listitem]);

				if (listitem == 0)
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_MAFIA);
					db_query(Database, DB_Query);
				}

				if (connected)
				{
					PLAYER_SKILLS[player_id][WORK_MAFIA] = listitem;

					if (listitem == 0)
					{
						if (PLAYER_TEMP[player_id][py_WORKING_IN] == WORK_MAFIA) EndPlayerJob(player_id);
						PLAYER_WORKS[player_id][WORK_MAFIA] = false;
						SendClientMessageEx(player_id, 0xca3535FF, "[LCN] "COL_WHITE" El %s %s te ha expulsado de La cosa nostra.", MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_MAFIA] ], PLAYER_TEMP[playerid][py_RP_NAME]);
					}
					else SendClientMessageEx(player_id, 0xca3535FF, "[LCN] "COL_WHITE" El %s %s ha modificado tu rango a %s.", MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_MAFIA] ], PLAYER_TEMP[playerid][py_RP_NAME], MAFIA_RANKS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_MAFIA_LIST);
			return 1;
		}
		case DIALOG_ENEMY_MAFIA_LIST:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_ENEMY_MAFIA);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_ENEMY_MAFIA);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if (PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA] >= 5)
					{
						PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_ENEMY_MAFIA_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_ENEMY_MAFIA_MODIFY:
		{
			if (response)
			{
				if (listitem > PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA])
				{
				    ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);

					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_ENEMY_MAFIA);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "TOTAL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank > PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA])
				{
				    ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este jugador porque es un rango superior al tuyo.", 3);
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", listitem, PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_ENEMY_MAFIA);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, 0xff9b00FF, "[TCC] "COL_WHITE" El nuevo rango de %s es: %s.", name, ENEMY_MAFIA_RANKS[listitem]);

				if (listitem == 0)
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID], WORK_ENEMY_MAFIA);
					db_query(Database, DB_Query);
				}

				if (connected)
				{
					PLAYER_SKILLS[player_id][WORK_ENEMY_MAFIA] = listitem;

					if (listitem == 0)
					{
						if (PLAYER_TEMP[player_id][py_WORKING_IN] == WORK_ENEMY_MAFIA) EndPlayerJob(player_id);
						PLAYER_WORKS[player_id][WORK_ENEMY_MAFIA] = false;
						SendClientMessageEx(player_id, 0xff9b00FF, "[TCC] "COL_WHITE" El %s %s te ha expulsado de The Crew Criminals.", ENEMY_MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA] ], PLAYER_TEMP[playerid][py_RP_NAME]);
					}
					else SendClientMessageEx(player_id, 0xff9b00FF, "[TCC] "COL_WHITE" El %s %s ha modificado tu rango a %s.", ENEMY_MAFIA_RANKS[ PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA] ], PLAYER_TEMP[playerid][py_RP_NAME], ENEMY_MAFIA_RANKS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_ENEMY_MAFIA_LIST);
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_POLICE_WEAPONS);
					case 1: ShowDialog(playerid, DIALOG_POLICE_ARMOUR);
					case 2: ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];

				if (!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
				    ShowPlayerMessage(playerid, "~r~Esta arma no requiere de munición.", 3);
					return 1;
				}

				ShowDialog(playerid, DIALOG_POLICE_AMMO);
			}
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if (inputtext[0] <= 0 || inputtext[0] > 9999) return ShowPlayerMessage(playerid, "~r~Cantidad de munición incorrecta.", 3);

				new price = 2 * inputtext[0];
				if (price > CHARACTER_INFO[playerid][ch_CASH]) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

				if (PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					ShowPlayerMessage(playerid, "~r~Esta arma no le entra esa cantidad de munición.", 3);
					return 1;
				}

				GivePlayerCash(playerid, -price);
				GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);

				SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Has comprado "COL_RED"%s "COL_WHITE"de munición para tu "COL_RED"'%s' "COL_WHITE"por %s$.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
				ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false); // pagar
			}
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			if (response)
			{
				if (!PLAYER_WORKS[playerid][WORK_MAFIA])
				{
					if (POLICE_SHOP_WEAPONS[listitem][police_shop_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE])
					{
						ShowPlayerNotification(playerid, "No tienes rango para usar esta arma.", 3);
						return 1;
					}
				}

				if (CHARACTER_INFO[playerid][ch_CASH] >= POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_SLOT];
					if (PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						new str_text[128];
						format(str_text, sizeof(str_text), "Para usar esta arma debes dejar tu %s (%d).", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						ShowPlayerNotification(playerid, str_text, 3);
						return 1;
					}

					if (WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 1);
					else GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 1);

					RegisterNewPlayerWeapon(playerid, weapon_slot);
					ShowPlayerNotification(playerid, "Arma adquirida", 3);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				}
			}
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			if (response)
			{
				new caption[45], dialog[1800], work = listitem + 1;
				format(caption, sizeof caption, "Trabajo - %c%s", toupper(work_info[work][work_info_NAME][0]), work_info[work][work_info_NAME][1]);

				new header[350];
				if (work_info[work][work_info_TYPE] != WORK_TYPE_FAMILY)
				{
					if (work_info[work][work_info_EXTRA_PAY] > 0 && work_info[work][work_info_EXTRA_PAY_EXP] > 0) // con paga extra
					{
						if (!work_info[work][work_info_EXTRA_PAY_LIMIT]) // sin limite
						{
							format(header, sizeof header,

								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY])
							);
						}
						else // con limite
						{
							format(header, sizeof header,

								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra con un límite de %s$.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_LIMIT])
							);
						}
					}
					else
					{
						format(header, sizeof header,

							"\
								Trabajo: %s\n\
								Tipo: %s\n\
								Nivel necesario: %d\n\
								Puedes localizar donde adquirir este trabajo desde el GPS.\n\
							",
								work_info[work][work_info_NAME],
								(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
								work_info[work][work_info_LEVEL]
						);
					}
				}

				switch(work)
				{
					case WORK_TRUCK:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a cualquier camión de la empresa y ve a cargarlo en cualquier punto de carga.\n\
							Según tu experiencia en el trabajo podrás transportar diferentes productos de más valor.\n\
							\n\
							",
								header
						);
					}
					case WORK_MECHANIC:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para empezar a trabajar ve al taller para empezar a trabajar o dejar de trabajar.\n\
							Con este trabajo podrás reparar los vehículos dañados en el taller o ir a arreglarlos por San Andreas.\n\
							Las personas que hayan llamado al mecánico aparecerán marcados en el mapa.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un mecánico.\n\
							Para reparar o tunear un vehículo usa /vmenu tras elegir una opción se le ofrecerá al dueño del vehículo\n\
							en caso de ser un vehículo personal, si no se le ofrecerá al conductor o el último conductor del vehículo.\n\
							\n\
							Puedes utilizar los vehículos de tu trabajo o tu vehículo personal.\n\
							Para cualquier reparación o modificación necesitarás piezas que puedes comprar en el taller.\n\
							Para reparar o modificar un vehículo utiliza cerca del vehículo el comando /vmenu.\n\
							\n\
							Si el vehículo no está en el mecánico y se puede remolcar tendrás que remolcarlo hasta el mecánico\n\
							para repararlo, se usa el comando /remolcar.\n\
							\n\
							En el taller también podrás pintar los vehículos.\n\
							Para tunearlos o remover componentes tendrás que haber realizado al menos 100 reparaciones en vehículos ajenos.\n\
							\n\
							",
								header
						);
					}
					case WORK_HARVESTER:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a una cosechadora y empieza a cosechar.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRASH:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para este trabajo se necesitan 2 personas, uno que conduzca el camión y otro que recoja la basura.\n\
							Para empezar a trabajar sube a alguien a un camión y selecciona la ruta que queréis realizar.\n\
							\n\
							Dependiendo de tu experiencia recogerás más rápido la basura.\n\
							\n\
							",
								header
						);
					}
					case WORK_FARMER:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Necesitarás semillas para poder plantar que puedes comprar en la granja.\n\
							Dependiendo de tu experiencia tu velocidad plantando irá aumentando.\n\
							\n\
							Para plantar ve a la zona asignada con una bandera, y presione NUM 6.\n\
							Después de que la planta crezca tienes 5 minutos para recogerla si no la planta se secará y se destruirá.\n\
							Cuando termines de plantar espera a que la planta termine de crecer, para recogerla.\n\
							Una vez recogida puedes vender el producto adquirido o usarlo para consumo propio.\n\
							\n\
							Cuida tus plantas, la gente puede destuirlas si le disparan.\n\
							\n\
							",
								header
						);
					}
					case WORK_POLICE:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Los policías en servicio aparecerán de color azul.\n\
							Utiliza /policias para ver la lista de policías, los rangos altos podrán desde aquí\n\
							bajar, subir el rango de los policías, también pueden expulsarlos del cuerpo.\n\
							\n\
							Para asignar un BYC una persona utiliza el comando /abyc.\n\
							Usa /byc para ver los BYC de todos o de una persona, también para eliminarlos.\n\
							Utiliza /esposar para esposar o desesposar a alguien que tenga nivel de búsqueda.\n\
							Utiliza /revisar para ver las pertenencias del jugador esposado, utiliza /requisar para requisar las pertenencias ilegales.\n\
							Utiliza /arrestar en tu vehículo personal para detener a alguien que esté esposado.\n\
							En el AREA 51 encontrarás la base militar (En desarrollo)\n\
							Utiliza /multar para hacer una multa y utiliza /ref para pedir refuerzos.\n\
							Utiliza /callsing para asignar callsing al vehículo policial.\n\
							Usa ! para hablar IC.\n\
							Usa !! para hablar OCC.\n\
							Para utiliza el megáfono utiliza /m dentro de un vehículo policial.\n\
							Para entregar a alguien tiene que estar arrestado en un vehículo policial\n\
							y llevarlo a cualquiera de las 3 comisarías de San Andreas al parking y utilizar /entregar.\n\
							\n\
							Usa /control para añadir objetos como barreras etc.\n\
							\n\
							Para ponerte de servicio ve a cualquier comisaría y busca el vestuario.\n\
							Los policías pueden equiparse en la comisaría.\n\
							Para utilizar la radio debes estar de servicio, puedes seleccionar la frecuencia con /frecuencias, uso: !texto.\n\
							Puedes abrir cualquier puerta de la comisaría pulsando la tecla F cerca de la puerta.\n\
							Los policías recibirán la paga en el payday, su paga dependerá de su rango.\n\
							Los cargos se ponen con /cargo1, /cargo2, etc. Usa /cargo0 para sacar los cargos.\n\
							\n\
							",
								header
						);
					}
				}

				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Salir", "");
			}
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= 4)
					{
						PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_ADMIN_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			if (response)
			{
				if (listitem > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
				    ShowPlayerMessage(playerid, "~r~El rango que has seleccionado es superior al tuyo.", 3);
					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este admin porque es un rango superior al tuyo.", 3);
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", listitem, PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, COLOR_WHITE, "El nuevo rango de %s es: '%s'.", name, ADMIN_LEVELS[listitem]);

				if (connected)
				{
					ACCOUNT_INFO[player_id][ac_ADMIN_LEVEL] = listitem;
					SendClientMessageEx(player_id, COLOR_WHITE, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[listitem]);
					ShowPlayerMessage(player_id, "~g~Han cambiado tu rango administrativo.", 3);
				}
			}
			else ShowDialog(playerid, DIALOG_ADMIN_LIST);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			if (response)
			{
				if (!strlen(inputtext)) return ShowDialog(playerid, dialogid);

				new password[64 + 1];
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);

				if (!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_PASSWORD_PASS);
					PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] ++;
					if (PLAYER_TEMP[playerid][py_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return KickEx(playerid, 100);
					ShowPlayerMessage(playerid, "~r~CONTRASEÑA INCORRECTA.", 3);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			if (response)
			{
				if (strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);

				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);

				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q' `PASS` = '%q' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				ShowPlayerNotification(playerid, "~r~Importante~w~~n~¡Nunca compartas o muestres la contraseña de tu cuenta! Los administradores de "SERVER_NAME" nunca solicitan esta información.", 4);
				ShowPlayerMessage(playerid, "~g~Tu contraseña ha sido cambiada correctamente.", 3);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;

			if (response)
			{
				PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] = listitem;
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;

			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Enabled]) ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Enabled] = false;
						else ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Enabled] = true;
					}
					case 1: return ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY_DETECT);
					case 2:
					{
						if (ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Kick]) ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Kick] = false;
						else ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Kick] = true;
					}
				}
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT);
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;

			if (response)
			{
				new detections, seconds;
				if (sscanf(inputtext, "p<:>dd", detections, seconds))
				{
				    ShowPlayerMessage(playerid, "~r~Sintaxis no válida.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (detections < 1 || detections > 99999)
				{
				    ShowPlayerMessage(playerid, "~r~El número de detecciones debe ser 1 o mayor.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (seconds < 0 || seconds > 99999)
				{
				    ShowPlayerMessage(playerid, "~r~Los segundos no pueden ser un valor negativo.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Detections] = detections;
				ac_Info[ PLAYER_TEMP[playerid][py_SELECTED_AC_LISTITEM] ][ac_Interval] = seconds;

				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					ShowPlayerMessage(playerid, "Introduce un valor númerico.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0)
				{
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > 1000000000)
				{
					ShowPlayerMessage(playerid, "~r~El precio es muy alto.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "UPDATE `SHOP` SET `PRICE` = '%d' WHERE `ID` = '%d';", inputtext[0], PLAYER_TEMP[playerid][py_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);

				UpdatePlayerShop(playerid);
			    ShowPlayerMessage(playerid, "El precio de tu artículo ha sido actualizado.", 3);
			}
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_REMOVE:
		{
			if (response)
			{
				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][py_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);

				if (PLAYER_TEMP[playerid][py_SHOP_COME_FROM_MY_ADS])
				{
					PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
				else
				{
					PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
			    ShowPlayerMessage(playerid, "Tu producto se ha eliminado.", 2);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][py_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][py_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_OTHER;
						PLAYER_TEMP[playerid][py_SHOP_ADD_MODELID] = 1314;
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			if (response)
			{
				if (strlen(inputtext) > 24) return ShowDialog(playerid, dialogid);
				new text[24];
				if (sscanf(inputtext, "s[24]", text)) return ShowDialog(playerid, dialogid);
				if (!td_str_legal(text)) return ShowDialog(playerid, dialogid);

				format(PLAYER_TEMP[playerid][py_SHOP_ADD_TEXT], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_SHOP_ADD_PRICE);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					ShowPlayerMessage(playerid, "Introduce un valor númerico.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] < 0)
				{
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > 1000000000)
				{
					ShowPlayerMessage(playerid, "~r~El precio es muy alto.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (500 > CHARACTER_INFO[playerid][ch_CASH]) return ShowPlayerMessage(playerid, "~r~Necesitas 500$ para colocar un anuncio", 3);

				AddNewAd(playerid, PLAYER_TEMP[playerid][py_SHOP_ADD_TYPE], inputtext[0], PLAYER_TEMP[playerid][py_SHOP_ADD_TEXT], PLAYER_TEMP[playerid][py_SHOP_ADD_MODELID], PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL1], PLAYER_TEMP[playerid][py_SHOP_ADD_VCOL2]);
				GivePlayerCash(playerid, -500);
				ShowPlayerMessage(playerid, "~g~Tu anuncio se ha publicado correctamente.", 3);
			}
			return 1;
		}
		case DIALOG_SHOP_TOYS:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] >= Toys_Shop[listitem][shop_toy_price])
				{
					new slot = GetEmptyPlayerToySlot(playerid);
					if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						ShowPlayerMessage(playerid, "~r~No tienes más espacio para accesorios, elimina alguno si quieres comprar otro~n~o adquiere VIP.", 5);
						return 1;
					}

					if (slot == -1)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						ShowPlayerMessage(playerid, "~r~No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.", 5);
						return 1;
					}

					PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
					format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop[ listitem ][shop_toy_model]);
					PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
					PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop[ listitem ][shop_toy_modelid];
					PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
					RegisterNewPlayerToy(playerid, slot);

					GivePlayerCash(playerid, -Toys_Shop[ listitem ][shop_toy_price]);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Gracias por comprar aquí, vuelva pronto.", 3);
					SavePlayerToysData(playerid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 3);
				}
			}
			return 1;
		}
		case DIALOG_SHOP_SKINS:
		{
			if (response)
			{
				new clothe_info[3];
				switch(ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
				{
					case INTERIOR_BINCO:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Binco_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Binco_Shop_Female_Skins[listitem];
						}
					}
					case INTERIOR_SUBURBAN:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Suburban_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Suburban_Shop_Female_Skins[listitem];
						}
					}
					case INTERIOR_PROLAPS:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Prolaps_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Prolaps_Shop_Female_Skins[listitem];
						}
					}
					case INTERIOR_DIDIER_SACHS:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Didier_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Didier_Shop_Female_Skins[listitem];
						}
					}
					case INTERIOR_VICTIM:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Victim_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Victim_Shop_Female_Skins[listitem];
						}
					}
					case INTERIOR_ZIP:
					{
						switch(CHARACTER_INFO[playerid][ch_SEX])
						{
							case SEX_MALE: clothe_info = Zip_Shop_Male_Skins[listitem];
							case SEX_FEMALE: clothe_info = Zip_Shop_Female_Skins[listitem];
						}
					}
				}

				if (CHARACTER_INFO[playerid][ch_CASH] >= clothe_info[2])
				{
					GivePlayerCash(playerid, -clothe_info[2]);
					CHARACTER_INFO[playerid][ch_SKIN] = clothe_info[0];

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Gracias por comprar aquí, vuelva pronto.", 3);
					SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
					PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 3);
				}
			}
			return 1;
		}
		case DIALOG_CLOTH_STORE:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_SHOP_SKINS);
					case 1: ShowDialog(playerid, DIALOG_SHOP_TOYS);
				}
			}
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				new veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
				if (veh_money > CHARACTER_INFO[playerid][ch_CASH])
				{
					ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 4);
					return 1;
				}

				if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_OCCUPIED])
				{
				    ShowPlayerMessage(playerid, "~r~No se puede remolcar tu vehículo porque hay alguien conduciéndolo.", 3);
					return 1;
				}

				new crane_point = random(sizeof(CRANE_POINTS));
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_X] = CRANE_POINTS[crane_point][0];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Y] = CRANE_POINTS[crane_point][1];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Z] = CRANE_POINTS[crane_point][2];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_ANGLE] = CRANE_POINTS[crane_point][3];

				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_LAST_CLOSED_TIME] = gettime();
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_DOORS] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem]);
				SetVehicleToRespawnEx(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem]);
				RepairVehicleEx(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem]);

				GivePlayerCash(playerid, -veh_money);
				ShowPlayerNotification(playerid, "El vehículo ha sido remolcado hasta el depósito municipal.", 4);
			}
			return 1;
		}
		case DIALOG_USER_NOTIFICATIONS:
		{
			if (response)
			{
				return 1;
			}
			return 1;
		}
		case DIALOG_SEND_MONEY:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				GivePlayerCash(playerid, -inputtext[0]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], inputtext[0]);

				ShowPlayerMessage(playerid, "~g~Dinero enviado.", 3);
				SetPlayerChatBubble(playerid, "\n\n\n\n* saca dinero de su billetera y se lo da a alguien\n\n\n", 0xffcb90FF, 20.0, 5000);

				new str_text[32];
				format(str_text, 32, "~g~+%d$", inputtext[0]);
     			GameTextForPlayer(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], str_text, 5000, 1);

				ApplyAnimation(playerid, "DEALER", "SHOP_PAY", 4.1, false, false, false, false, 0, false);
			}
			else ShowDialog(playerid, DIALOG_RANGE_USER);
			return 1;
		}
		case DIALOG_SEND_REPORT:
		{
			if (response)
			{
				if (gettime() < PLAYER_TEMP[playerid][py_ANTIFLOOD_REPORT] + 5) return 1;
				PLAYER_TEMP[playerid][py_ANTIFLOOD_REPORT] = gettime();

				new reason[128];
				if (sscanf(inputtext, "s[128]", reason)) return ShowPlayerMessage(playerid, "~r~Formato incorrecto.", 3);
			    if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER])) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);

				ShowPlayerMessage(playerid, "~g~Tu reporte fue enviado a los administradores en línea.", 3);

				new str[145]; format(str, 145, "[REPORTE]"COL_WHITE" %s (%d) > %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ac_NAME], PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], reason);
				SendMessageToAdmins(COLOR_ORANGE, str);
			}
			else ShowDialog(playerid, DIALOG_RANGE_USER);
			return 1;
		}
		case DIALOG_RANGE_USER:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				switch(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem])
				{
					case 0:
					{
						ShowDialog(playerid, DIALOG_SEND_REPORT);
						return 1;
					}
					case 1:
					{
						if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Tienes que ser nivel 2.", 3);
						ShowDialog(playerid, DIALOG_SEND_MONEY);
						return 1;
					}
					case 3:
					{
						ShowPlayerMessage(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], "Estás siendo esposado", 3);
					    ShowPlayerMessage(playerid, "Estás esposando a esta persona", 3);

						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_CUFFED] = false;
						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_CUFFING] = true;
						KillTimer(PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_TIMERS][14]);
						TogglePlayerControllableEx(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], false);
						SetPlayerSpecialAction(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], SPECIAL_ACTION_HANDSUP);
						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_TIMERS][14] = SetTimerEx("CuffPlayer", 6000, false, "i", PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]);
						SendPoliceMark(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], 0x2DAA24FF);
						return 1;
					}
					case 2:
					{
						TogglePlayerControllableEx(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], true);
						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_CUFFED] = false;
						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_CUFFING] = false;
						SetPlayerSpecialAction(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], SPECIAL_ACTION_NONE);

						SetPlayerChatBubble(playerid, "\n\n\n\n* Le quita las esposas a alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
						SendPoliceMark(PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER], PLAYER_COLOR);
						return 1;
					}
					case 4:
					{
						if (PLAYER_TEMP[playerid][py_CUFFED]) return ShowPlayerMessage(playerid, "~r~No puedes hacer eso estando esposado.", 3);
						if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "~r~No puedes hacer eso estando herido.", 3);
						if (CHARACTER_INFO[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "~r~El jugador tiene que estar herido.", 3);

						KillTimer(PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_TIMERS][16]);
						PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_TIMERS][16] = SetTimerEx("StandUpBotikin", 7000, false, "ii", playerid, PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]);

						ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);
						SetPlayerChatBubble(playerid, "\n\n\n\n* Usa un botiquín.", 0xffcb90FF, 20.0, 2000);
						return 1;
					}
					case 5:
					{
						if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] >= 20) return ShowPlayerMessage(playerid, "~r~La banda ya está llena.", 3);
						if (PLAYER_WORKS[PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No se pueden invitar a policías.", 3);
						if (PLAYER_CREW[PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~Este ya tiene banda.", 3);
						if (PLAYER_TEMP[PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes invitar cuando la banda esta en combate.", 3);

						if (gettime() < PLAYER_TEMP[ PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER] ][py_LAST_GOT_CREW] + 600)
						{
							new time = 600 - (gettime() - PLAYER_TEMP[PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]][py_LAST_GOT_CREW]), str_text[128];
							format(str_text, sizeof(str_text), "La otra persona debe esperar ~r~%s minutos~w~ para volver a ser invitada.", TimeConvert(time));
							return 1;
						}

						PLAYER_TEMP[playerid][py_CREW_INVITE_PID] = PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER];
						PLAYER_TEMP[playerid][py_CREW_INVITE_AID] = ACCOUNT_INFO[PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]][ac_ID];
						ShowPlayerMessage(playerid, "Seleccione el rango." ,3);
						ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
						return 1;
					}
					case 6:
					{
						InviteToSAPD(playerid, PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]);
						return 1;
					}
					case 7:
					{
						InviteToLCN(playerid, PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]);
						return 1;
					}
					case 8:
					{
						InviteToTCC(playerid, PLAYER_TEMP[playerid][py_LAST_TARGET_PLAYER]);
						return 1;
					}
				}
			}
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			if (response)
			{
				if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2 para crear una banda.", 3);
				ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			if (response)
			{
				if (strlen(inputtext) >= 24)
				{
				    ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un nombre de 24 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_name[24];
				if (sscanf(inputtext, "s[24]", crew_name))
				{
				    ShowPlayerMessage(playerid, "Introduce un nombre para tu banda.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_TEMP[playerid][py_CREATE_CREW_NAME], 24, "%s", crew_name);
				ShowDialog(playerid, DIALOG_CREATE_CREW_COLOR);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			if (response)
			{
				PLAYER_TEMP[playerid][py_CREATE_CREW_COLOR] = listitem;
				ShowDialog(playerid, DIALOG_CREATE_CREW_CONFIRM);
			}
			else ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			if (response)
			{
				new index = GetAvaibleCrewIndex();
				if (index == -1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No se puede crear la banda porque no hay espacio disponible, el límite de CREWS es %d.", MAX_CREWS);
					ShowPlayerMessage(playerid, "~r~No se puede crear la crew porque no hay espacio disponible.", 3);
					return 1;
				}

				if (10000 > CHARACTER_INFO[playerid][ch_CASH])
				{
				    ShowPlayerMessage(playerid, "~r~Necesitas 10.000$ para crear la banda.", 3);
					return 1;
				}

				GivePlayerCash(playerid, -10000);
				CREW_INFO[index][crew_VALID] = true;
				format(CREW_INFO[index][crew_NAME], 32, "%s", PLAYER_TEMP[playerid][py_CREATE_CREW_NAME]);
				format(CREW_INFO[index][crew_DESCRIPTION], 32, "Banda de Hyaxe");
				CREW_INFO[index][crew_COLOR] = CrewColors[ PLAYER_TEMP[playerid][py_CREATE_CREW_COLOR] ];

				CREW_RANK_INFO[index][0][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[index][0][crew_rank_NAME], 32, "Fundador");

				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE] = 1;

				NewCrewRegister(index);

				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = CREW_INFO[index][crew_ID];
				PLAYER_CREW[playerid][player_crew_RANK] = 0;
				PLAYER_CREW[playerid][player_crew_INDEX] = index;
				SetPlayerGangZones(playerid);

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query,

						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);

				ShowPlayerNotification(playerid, "Banda creada", 3);
			}
			return 1;
		}
		case DIALOG_CREW_MENU_ONE:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_MENU);
					case 1:
					{
						new 
							dialog[232],
							caption[64],
							time = (gettime() - GraffitiGetTime);

						format(caption, sizeof caption, "{%06x}%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
					    format(dialog, sizeof dialog, ""COL_WHITE"Los graffitis son cada 45 minutos, han pasado %s minutos desde el último.\nLa banda actualmente tiene %d graffitis.", TimeConvert(time), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT]);
					    ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
					}
					case 2:
					{
						new 
							dialog[232],
							caption[64];

						format(caption, sizeof caption, "{%06x}%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
					    format(dialog, sizeof dialog, ""COL_WHITE"Las disputas de mercados son cada 7 dias, ha pasado %s desde el último.\nLa banda actualmente tiene %d mercados dominados.", ReturnTimelapse(MarketGetTime, gettime()), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT]);
					    ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 3);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				switch(PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem])
				{
					case CREW_RANK_SIZE: //Lista de miembros
					{
						HidePlayerDialog(playerid);
					}
					case CREW_RANK_CHANGE_NAME:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);
						if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede cambiar el nombre de la banda cuando la crew está en combate.", 3);
						ShowDialog(playerid, DIALOG_CREW_CHANGE_NAME);
					}
					case CREW_RANK_CAST_MEMBERS:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

						PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
					}

					case CREW_RANK_MODIFY_RANKS:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

						ShowDialog(playerid, DIALOG_CREW_RANKS);
					}
					case CREW_RANK_CHANGE_COLOR:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

						if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede cambiar el color de la banda cuando la banda está en combate.", 3);
						ShowDialog(playerid, DIALOG_CREW_MODIFY_COLOR);
					}
					case CREW_RANK_DELETE:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

						ShowDialog(playerid, DIALOG_CREW_DELETE);
					}
					case CREW_RANK_MODIFY_MEMBERS:
					{
						if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

						PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
					}
					case CREW_RANK_SIZE + 1: //Abandonar banda
					{
						if (PLAYER_CREW[playerid][player_crew_RANK] == 0)
						{
							new DB_Query[128], DBResult:Result_count, total;
							format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
							Result_count = db_query(Database, DB_Query);

							if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
							db_free_result(Result_count);

							if (total <= 1)
							{
								ShowPlayerMessage(playerid, "~r~No puedes abandonar la banda porque eres el único miembro con el rango principal.", 3);
								return 1;
							}
						}
						ShowDialog(playerid, DIALOG_CREW_LEAVE);
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede cambiar el nombre de la banda cuando la crew está en combate.", 3);
				if (strlen(inputtext) >= 32)
				{
					ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un nombre de 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_name[32];
				if (sscanf(inputtext, "s[32]", crew_name))
				{
					ShowPlayerMessage(playerid, "Introduce un nombre para la banda.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				ShowDialog(playerid, DIALOG_CREW_CHANGE_DESC);

				format(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], 32, "%s", crew_name);

				new DB_Query[164];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `NAME` = '%q' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				new 
					message[145],
					label_str[264],
					city[45],
					zone[45],
					saved_noti[364];

				format(saved_noti, sizeof saved_noti, "%s cambió el nombre de la banda a %s.", PLAYER_TEMP[playerid][py_RP_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				SaveNotificationToCrewMemeber(PLAYER_CREW[playerid][player_crew_ID], saved_noti);

				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) cambió el nombre de la banda a %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);

				ShowCrew(playerid);

				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if (!PROPERTY_INFO[i][property_VALID]) continue;
					if (!PROPERTY_INFO[i][property_CREW]) continue;
					if (PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;

					GetPointZone(PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], city, zone);
					format
					(
						label_str,
						sizeof label_str,
						""COL_WHITE"\
							Propiedad en %s (%d)\n\
							Banda: %s\n\
						", zone, PROPERTY_INFO[i][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xF7F7F700, label_str);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_DESC:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede cambiar el nombre de la banda cuando están en combate.", 3);
				if (strlen(inputtext) >= 32)
				{
					ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un algo de 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_description[32];
				if (sscanf(inputtext, "s[32]", crew_description))
				{
					ShowPlayerMessage(playerid, "Introduce una descripción para la banda.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_DESCRIPTION], 32, "%s", crew_description);

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `DESC` = '%q' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_DESCRIPTION], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				new 
					message[145],
					saved_noti[264];

				format(saved_noti, sizeof saved_noti, "%s cambió la descripción de la banda.", PLAYER_TEMP[playerid][py_RP_NAME]);
				SaveNotificationToCrewMemeber(PLAYER_CREW[playerid][player_crew_ID], saved_noti);

				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) cambió la descripción de la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);

				ShowCrew(playerid);

				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];

					new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
					format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
					Result = db_query(Database, DB_Query);

					if (db_num_rows(Result))
					{
						db_get_field_assoc(Result, "NAME", name, 24);
						current_rank = db_get_field_assoc_int(Result, "RANK");
						found = true;
					}
					else found = false;
					db_free_result(Result);

					if (!found) return 1;
					if (current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return ShowPlayerMessage(playerid, "~r~No puedes echar a este miembro porque es un rango superior al tuyo.", 3);
					if (current_rank == 0)
					{
						new DBResult:Result_count, total;
						format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
						Result_count = db_query(Database, DB_Query);

						if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
						db_free_result(Result_count);

						if (total <= 1)
						{
							ShowPlayerMessage(playerid, "~r~No se puede echar a este miembro ya que es el único miembro con el rango principal.", 3);
							return 1;
						}
					}

					ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return ShowPlayerMessage(playerid, "~r~No puedes echar a este miembro porque es un rango superior al tuyo.", 3);
				if (current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if (total <= 1)
					{
						ShowPlayerMessage(playerid, "~r~No se puede echar a este miembro ya que es el único miembro con el rango principal.", 3);
						return 1;
					}
				}

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) ha echado a %s de la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], name);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);

				ShowCrew(playerid);

				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);

				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				if (connected)
				{
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
					SetPlayerNormalColor(player_id);
					if (PLAYER_TEMP[playerid][py_LAST_TERRITORY] != INVALID_STREAMER_ID)
					{
						TextDrawHideForPlayer(player_id, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(player_id, TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_TEXTDRAW]);
					}
					PLAYER_CREW[player_id][player_crew_VALID] = false;
					PLAYER_CREW[player_id][player_crew_ID] = 0;
					PLAYER_CREW[player_id][player_crew_RANK] = 0;
					PLAYER_CREW[player_id][player_crew_INDEX] = 0;
					HidePlayerGangZones(player_id);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
				    ShowPlayerMessage(playerid, "~r~No puedes invitar con este rango.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_CREW_INVITE_PID])) return ShowPlayerMessage(playerid, "~r~El jugador no está conectado.", 2);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_CREW_INVITE_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
				if (PLAYER_WORKS[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~Esta persona es policía y no puede tener banda.", 3);
				if (PLAYER_CREW[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~Esta persona pertenece a otra banda.", 3);
				if (PLAYER_TEMP[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][py_GAME_STATE] != GAME_STATE_NORMAL) ShowPlayerMessage(playerid, "~r~No puedes invitar a este jugador ahora, prueba despues.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_CREW_INVITE_AID]) return ShowPlayerMessage(playerid, "~r~El jugador no está conectado.", 2);

				ShowPlayerMessage(playerid, "~g~Invitación enviada.", 3);

				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][py_CREW_INVITE_INFO][0] = PLAYER_CREW[playerid][player_crew_ID];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][py_CREW_INVITE_INFO][1] = PLAYER_CREW[playerid][player_crew_INDEX];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][py_CREW_INVITE_INFO][2] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][py_CREW_INVITE_PID] ][py_CREW_INVITE_INFO][3] = gettime();
				ShowDialog(PLAYER_TEMP[playerid][py_CREW_INVITE_PID], DIALOG_CREW_INVITE_ACCEPT);
			}
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			if (response)
			{
				if (!CREW_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~Esta banda ya no existe.", 2);
				if (!CREW_RANK_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][2] ][crew_rank_VALID]) return ShowPlayerMessage(playerid, "~r~El rango que te ofrecieron ya no existe.", 2);
				if (gettime() > PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][3] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en responder.", 2);
				if (CREW_INFO[ PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No puedes unirte a la banda cuando la banda está en combate.", 2);

				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][0];
				PLAYER_CREW[playerid][player_crew_RANK] = PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][2];
				PLAYER_CREW[playerid][player_crew_INDEX] = PLAYER_TEMP[playerid][py_CREW_INVITE_INFO][1];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] ++;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] ++;
				PLAYER_TEMP[playerid][py_LAST_GOT_CREW] = gettime();
				SetPlayerGangZones(playerid);

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query,

						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);
			}
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La crew ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (listitem < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) ShowPlayerMessage(playerid, "~r~No puedes modificar este rango porque es un rango superior al tuyo.", 3);
					else ShowPlayerMessage(playerid, "~r~No puedes crear un rango en este puesto porque es superior al tuyo.", 3);
					return 1;
				}

				PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] = listitem;
				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
				else ShowDialog(playerid, DIALOG_CREW_RANK_CREATE);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_NAME);
					case 1:
					{
						if (PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] == 0)
						{
							ShowPlayerMessage(playerid, "~r~No se pueden modificar los permisos de este rango porque es el rango principal.", 3);
							return 1;
						}

						ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_PERMISS);
					}
					case 2:
					{
						if (PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] == 0)
						{
							ShowPlayerMessage(playerid, "~r~No se puede eliminar este rango porque es el rango principal.", 3);
							return 1;
						}

						ShowPlayerNotification(playerid, "Selecciona un nuevo rango para los miembros actuales.", 3);
						ShowDialog(playerid, DIALOG_CREW_RANK_DELETE);
					}
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (strlen(inputtext) >= 32)
				{
				    ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un nombre de 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if (sscanf(inputtext, "s[32]", rank_name))
				{
				    ShowPlayerMessage(playerid, "Introduce el nuevo nombre para el rango.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				ShowCrew(playerid);
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				new DB_Query[145];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW_RANKS` SET `RANK_NAME` = '%q' WHERE `ID` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_ID]);
				db_query(Database, DB_Query);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (strlen(inputtext) >= 32)
				{
					ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un nombre de 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if (sscanf(inputtext, "s[32]", rank_name))
				{
					ShowPlayerMessage(playerid, "Introduce el nombre para el rango.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_VALID])
				{
					ShowPlayerMessage(playerid, "~r~Ya hay un rango en este slot.", 3);
					return 1;
				}


				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE] = 0;
				RegisterNewCrewRank(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK]);

				ShowCrew(playerid);
				ShowPlayerMessage(playerid, "~g~Rango creado.", 3);
				ShowDialog(playerid, DIALOG_CREW_RANKS);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][listitem])
				{
					ShowPlayerMessage(playerid, "~r~No puedes cambiar este permiso porque tu no tienes este permiso.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem]) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = false;
				else CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = true;

				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `RANK_PERMISSIONS` SET `SET` = '%d' WHERE `ID_RANK` = '%d' AND `PERMISSION` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_ID], listitem);
				db_query(Database, DB_Query);

				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					ShowPlayerMessage(playerid, "~r~No puedes seleccionar este rango porque es superior al tuyo.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_CREW_SELECTED_NEW_RANK] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_CREW_RANK_DELETE_CONFIRM);
			}
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query,
					"\
						DELETE FROM `CREW_RANKS` WHERE `ID` = '%d';\
						UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_CREW` = '%d' AND `RANK` = '%d';\
					",
						CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_ID],

						PLAYER_TEMP[playerid][py_CREW_SELECTED_NEW_RANK],
						PLAYER_CREW[playerid][player_crew_ID],
						PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK]
				);
				db_query(Database, DB_Query);

				ShowCrew(playerid);

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]);
				
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if (PLAYER_CREW[i][player_crew_VALID])
						{
							if (PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								if (PLAYER_CREW[i][player_crew_RANK] == PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK])
								{
									PLAYER_CREW[i][player_crew_RANK] = PLAYER_TEMP[playerid][py_CREW_SELECTED_NEW_RANK];
									SendClientMessage(i, COLOR_WHITE, message);
								}
							}
						}
					}
				}

				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_VALID] = false;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_ID] = 0;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_NAME][0] = EOS;
				for(new i = 0; i != CREW_RANK_SIZE; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] = 0;

			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede cambiar el color cuando la banda está en combate.", 3);

				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] = CrewColors[listitem];


				new r, g, b, a, new_territory_color;
				hy_HexToRGBA(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
				new_territory_color = hy_RGBAToHex(r, g, b, 135);
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if (!TERRITORIES[i][territory_VALID]) continue;
					if (!TERRITORIES[i][territory_OCCUPIED]) continue;

					if (TERRITORIES[i][territory_CREW_ID] == PLAYER_CREW[playerid][player_crew_ID])
					{
						TERRITORIES[i][territory_COLOR] = new_territory_color;
						UpdateGangZoneColor(i);
					}
				}

				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `COLOR` = '%d' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				new saved_noti[264];
				format(saved_noti, sizeof saved_noti, "%s cambió el color de la banda.", PLAYER_TEMP[playerid][py_RP_NAME]);
				SaveNotificationToCrewMemeber(PLAYER_CREW[playerid][player_crew_ID], saved_noti);

				ShowPlayerMessage(playerid, "El color de la banda se ha cambiado.", 3);

				ShowCrew(playerid);

				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No se puede borrar la banda cuando está en combate.", 3);

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) ha eliminado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);

				new saved_noti[264];
				format(saved_noti, sizeof saved_noti, "%s ha eliminado la banda.", PLAYER_TEMP[playerid][py_RP_NAME]);
				SaveNotificationToCrewMemeber(PLAYER_CREW[playerid][player_crew_ID], saved_noti);

				HideInventory(playerid);

				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW` WHERE `ID` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);

				new tmp_CREW_INFO[enum_CREW_INFO], old_crew_id = PLAYER_CREW[playerid][player_crew_ID];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ] = tmp_CREW_INFO;

				new tmp_CREW_RANK_INFO[enum_CREW_RANK_INFO];
				for(new i = 0; i != MAX_CREW_RANKS; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i] = tmp_CREW_RANK_INFO;

				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if (PLAYER_CREW[i][player_crew_VALID])
						{
							if (PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								SetPlayerNormalColor(i);
								HidePlayerGangZones(i);
								if (PLAYER_TEMP[i][py_LAST_TERRITORY] != INVALID_STREAMER_ID)
								{
									TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
									TextDrawHideForPlayer(i, TERRITORIES[ PLAYER_TEMP[i][py_LAST_TERRITORY] ][territory_TEXTDRAW]);
								}
								PLAYER_CREW[i] = tmp_PLAYER_CREW;
								SendClientMessage(i, COLOR_WHITE, message);
							}
						}
					}
				}

				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if (!TERRITORIES[ i ][territory_VALID]) continue;
					if (!TERRITORIES[ i ][territory_OCCUPIED]) continue;
					if (TERRITORIES[ i ][territory_CREW_ID] != old_crew_id) continue;

					TERRITORIES[ i ][territory_OCCUPIED] = false;
					TERRITORIES[ i ][territory_CREW_ID] = 0;
					TERRITORIES[ i ][territory_CREW_INDEX] = 0;
					TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
					UpdateGangZoneColor(i);
				}

				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if (!PROPERTY_INFO[i][property_VALID]) continue;
					if (!PROPERTY_INFO[i][property_CREW]) continue;
					if (PROPERTY_INFO[i][property_CREW_ID] != old_crew_id) continue;

					PROPERTY_INFO[ i ][property_SOLD] = false;
					PROPERTY_INFO[ i ][property_CREW] = false;
					PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
					PROPERTY_INFO[ i ][property_CREW_ID] = 0;

					new city[45], zone[45];
					GetPointZone(PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], city, zone);
					format(PROPERTY_INFO[ i ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ i ][property_ID]);

					new info[3];
					UpdateUnnocupiedPropertyLabel(i);

					DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = i; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[i][property_ID]);
					db_query(Database, DB_Query);
				}

			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);

			if (response)
			{
				new DB_Query[128];
				if (PLAYER_CREW[playerid][player_crew_RANK] == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if (total <= 1)
					{
						ShowPlayerMessage(playerid, "~r~No puedes abandonar la banda porque eres el único miembro con el rango principal.", 3);
						return 1;
					}
				}

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);

				new saved_noti[264];
				format(saved_noti, sizeof saved_noti, "%s ha abandonado la banda.", PLAYER_TEMP[playerid][py_RP_NAME]);
				SaveNotificationToCrewMemeber(PLAYER_CREW[playerid][player_crew_ID], saved_noti);

				HideInventory(playerid);

				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				SetPlayerNormalColor(playerid);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
				HidePlayerGangZones(playerid);

				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
			}
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBER);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;

				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					ShowPlayerMessage(playerid, "~r~No puedes dar este rango porque es un rango superior al tuyo.", 3);
					return 1;
				}

				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if (!found) return 1;
				if (current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return ShowPlayerMessage(playerid, "~r~No puedes modificar el rango de este miembro porque es un rango superior al tuyo.", 3);
				if (current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if (total <= 1)
					{
						ShowPlayerMessage(playerid, "~r~No se puede modificar el rango de este miembro ya que es el único miembro con el rango principal.", 3);
						return 1;
					}
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem], PLAYER_TEMP[playerid][py_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);

				new message[145];
				if (connected)
				{
					PLAYER_CREW[player_id][player_crew_RANK] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
					format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
					SendClientMessage(player_id, COLOR_WHITE, message);
				}

				ShowCrew(playerid);
			}
			else ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (!TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_VALID]) return ShowPlayerMessage(playerid, "~r~La propiedad no está dentro de un territorio de tu banda.", 3);
				if (!TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED]) return ShowPlayerMessage(playerid, "~r~La propiedad no está dentro de un territorio de tu banda.", 3);
				if (TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return ShowPlayerMessage(playerid, "~r~La propiedad no está dentro de un territorio de tu banda.", 3);
				if (!IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z])) return SendClientMessage(playerid, COLOR_WHITE, "La propiedad no está dentro de un territorio de tu crew.");
				if (PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Esta no es tu propiedad.", 3);


				new index = PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED];
				PROPERTY_INFO[ index ][property_CREW] = true;
				PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ index ][property_CREW_ID] = PLAYER_CREW[playerid][player_crew_ID];
				new label_str[256], city[45], zone[45];
				GetPointZone(PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], city, zone);
				format(PROPERTY_INFO[ index ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ index ][property_ID]);

				format
				(
					label_str,
					sizeof label_str,
					""COL_WHITE"\
						Propiedad en %s (%d)\n\
						Banda: %s\n\
					", zone, PROPERTY_INFO[index][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xF7F7F700, label_str);

				new DB_Query[350];

				format(DB_Query, sizeof(DB_Query), "INSERT INTO `PROPERTY_TERRITORY` (`ID_PROPERTY`, `ID_TERRITORY`) VALUES ('%d', '%d');", PROPERTY_INFO[ index ][property_ID], TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
				db_query(Database, DB_Query);

				new message[145];
				format(message, sizeof message, "{%06x}[BANDA] "COL_WHITE"%s (%s) ha añadido una nueva propiedad en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][py_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], COLOR_WHITE, message);
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_AREA])) return ShowPlayerMessage(playerid, "~r~No estas dentro de un territorio de tu banda.", 3);
				if (TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return ShowPlayerMessage(playerid, "~r~No estas dentro de un territorio de tu banda.", 3);
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No puedes abandonar territorios mientras tu banda está en combate.", 3);
				if (TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_WAR]) return ShowPlayerMessage(playerid, "~r~No se puede abandonar este territorio cuando está siendo conquistado.", 3);

				TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED] = false;
				TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_CREW_INDEX] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_COLOR] = 0xCCCCCC55;
				UpdateGangZoneColor(PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO]);

				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_TERRITORIES` WHERE `ID_TERRITORY` = '%d';", TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);

				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if (!PROPERTY_INFO[i][property_VALID]) continue;
					if (!PROPERTY_INFO[i][property_CREW]) continue;
					if (PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;

					if (IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
					{
						PROPERTY_INFO[ i ][property_SOLD] = false;
						PROPERTY_INFO[ i ][property_CREW] = false;
						PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
						PROPERTY_INFO[ i ][property_CREW_ID] = 0;
						new city[45], zone[45];
						GetPointZone(PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], city, zone);
						format(PROPERTY_INFO[ i ][property_NAME], 24, "%s (%d)", PROPERTY_INFO[ i ][property_ID]);

						new info[3];
						UpdateUnnocupiedPropertyLabel(i);

						DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
						info[0] = PICKUP_TYPE_PROPERTY;
						info[1] = i; // Index
						info[2] = 2; // Pickup Exterior
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

						format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ i ][property_ID]);
						db_query(Database, DB_Query);
					}
				}

				new message[145];
				format(message, sizeof message, "%s ha abandonado un territorio en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], TERRITORIES[ PLAYER_TEMP[playerid][py_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if (IsPlayerConnected(i))
					{
						if (PLAYER_CREW[i][player_crew_VALID])
						{
							ShowPlayerNotification(i, message, 4);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew.", 2);
			if (!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return ShowPlayerMessage(playerid, "~r~La banda ya no existe.", 2);
			if (!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return ShowPlayerMessage(playerid, "~r~No tienes permisos.", 2);

			if (response)
			{
				if (!PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_CREW]) return ShowPlayerMessage(playerid, "~r~Esta no es una propiedad de tu banda.", 3);
				if (PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return ShowPlayerMessage(playerid, "~r~Esta no es una propiedad de tu banda.", 3);
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return ShowPlayerMessage(playerid, "~r~No puedes liberar una propiedad cuando tu banda está en combate.", 3);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] = 0;
				new city[45], zone[45];
				GetPointZone(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], city, zone);
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]);

				DestroyDynamicPickup(PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				db_query(Database, DB_Query);

				ShowPlayerMessage(playerid, "La propiedad ha sido liberada.", 3);
			}
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			if (response)
			{
				if (gettime() > PLAYER_TEMP[playerid][py_POLICE_PEN_TIME] + 20) return ShowPlayerMessage(playerid, "~r~Tardaste mucho en aceptar.", 3);
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_POLICE_PEN_PID])) return ShowPlayerMessage(playerid, "~r~El policía no está conectado.", 3);
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_POLICE_PEN_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_POLICE_PEN_AID]) return ShowPlayerMessage(playerid, "~r~El policía no está conectado.", 3);

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][py_POLICE_PEN_PID], pos[0], pos[1], pos[2]);
				if (!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El policía no estpa cerca tuya.", 3);

				if (PLAYER_TEMP[playerid][py_POLICE_PEN_IM] > CHARACTER_INFO[playerid][ch_CASH])
				{
					ShowPlayerMessage(playerid, "~r~No tienes dinero para pagar la multa.", 3);
					ShowPlayerMessage(PLAYER_TEMP[playerid][py_POLICE_PEN_PID], "~r~La persona ha aceptado la multa pero no tiene dinero para pagarla.", 3);
					return 1;
				}

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][py_POLICE_PEN_IM]);
				GivePlayerCash(PLAYER_TEMP[playerid][py_POLICE_PEN_PID], PLAYER_TEMP[playerid][py_POLICE_PEN_IM]/2);

			    ShowPlayerMessage(playerid, "~g~La multa fue pagada..", 3);
				ShowPlayerMessage(PLAYER_TEMP[playerid][py_POLICE_PEN_PID], "~g~La persona ha pagado la multa, la mitad del importe es para ti.", 3);

			}
			else
			{
				if (gettime() > PLAYER_TEMP[playerid][py_POLICE_PEN_TIME] + 20) return 1;
				if (!IsPlayerConnected(PLAYER_TEMP[playerid][py_POLICE_PEN_PID])) return 1;
				if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_POLICE_PEN_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_POLICE_PEN_AID]) return 1;

			    ShowPlayerMessage(PLAYER_TEMP[playerid][py_POLICE_PEN_PID], "~r~La persona se niega a pagar la multa.", 3);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if (response)
			{
				PLAYER_TEMP[playerid][py_DIALOG_ECO_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_SERVER_ECO_MODIFY);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if (response)
			{
				new Float:multiplier;
				if (sscanf(inputtext, "f", multiplier))
				{
				    ShowPlayerMessage(playerid, "~r~Sintaxis no válida.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(PLAYER_TEMP[playerid][py_DIALOG_ECO_SELECTED])
				{
					case 0: MULTIPLIER_PROPERITES = multiplier;
					case 1: MULTIPLIER_VEHICLES = multiplier;
					case 2: MULTIPLIER_TOYS = multiplier;
					case 3: MULTIPLIER_SKINS = multiplier;
					case 4: MULTIPLIER_WEAPONS = multiplier;
					case 5: SU_SD_PRICE = floatround(multiplier);
				}

				WriteEconomyMultipliers();
				UpdateEconomy(PLAYER_TEMP[playerid][py_DIALOG_ECO_SELECTED]);
				ShowDialog(playerid, DIALOG_SERVER_ECO);
			}
			else ShowDialog(playerid, DIALOG_SERVER_ECO);
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			if (response)
			{
				if (SU_SD_PRICE > ACCOUNT_INFO[playerid][ac_SD])
				{
					ShowPlayerNotification(playerid, "No tienes los "SERVER_COIN" suficientes.", 3);
					return 1;
				}

				SetPlayerVip(playerid, 1, SU_SD_PRICE, 30);
			}
			return 1;
		}
		case DIALOG_SU:
		{
			if (!response)
			{
				if (SU_SD_PRICE > ACCOUNT_INFO[playerid][ac_SD])
				{
					ShowPlayerNotification(playerid, "No tienes los "SERVER_COIN" suficientes.", 3);
					return 1;
				}

				ACCOUNT_INFO[playerid][ac_SD] -= SU_SD_PRICE;

				new DB_Query[128], DBResult:Result;
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '%d', `SU_EXPIRE_DATE` = DATETIME(`SU_EXPIRE_DATE`, '+30 day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SU], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if (db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
				db_free_result(Result);

				ShowPlayerNotification(playerid, "Has renovado tu VIP.", 3);
				ShowPlayerMessage(playerid, "Puedes utilizar ~y~/vip ~w~para ver el tiempo restante o renovar.", 4);
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
						if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (slot == -1)
						{
						    ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][py_TUNING_GARAGE_SHOP] = true;

						new Float:p[6];
						GetPlayerCameraPos(playerid, p[0], p[1], p[2]);
						GetPlayerCameraLookAt(playerid, p[3], p[4], p[5]);
						InterpolateCameraPos(playerid, p[0], p[1], p[2], 1566.0983, -2179.3677, 16.1297, 2000);
						InterpolateCameraLookAt(playerid, p[3], p[4], p[5], 1565.2498, -2178.8325, 15.7447, 2000);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
						//PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] = 0;

						UpdateTuningShop(playerid);

						ShowPlayerMessage(playerid, "Pulsa ~y~ESCAPE ~w~si quieres salir del menú", 2);
						SelectTextDrawEx(playerid, 0xe8d08fFF);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
						if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if (slot == -1)
						{
							ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (500 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					        ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						GivePlayerCash(playerid, -500);

						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19327;
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Texto");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;

						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_TEXT], 32, "Texto");
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT], 24, "Arial");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_SIZE] = 24;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_BOLD] = false;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;

						RegisterNewVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot, true);

						ShowPlayerMessage(playerid, "El objeto de texto fue añadido.", 2);
						PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] = slot;
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
						if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if (slot == -1)
						{
							ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
					        ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][py_COUNTRY_TYPE] = 0;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 4:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
						if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if (slot == -1)
						{
							ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if (2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					        ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][py_COUNTRY_TYPE] = 1;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
				}
			}
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if (response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					ShowObjTuning(playerid);
					return 1;
				}
				if (slot == -1)
				{
					ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					ShowObjTuning(playerid);
					return 1;
				}

				if (2000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					ShowObjTuning(playerid);
					return 1;
				}

				GivePlayerCash(playerid, -2000);

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				if (PLAYER_TEMP[playerid][py_COUNTRY_TYPE] == 0)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19307;
				}
				else if (PLAYER_TEMP[playerid][py_COUNTRY_TYPE] == 1)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 2661;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Pais");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_COLORS][0] = listitem;

				RegisterNewVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot, true);

				ShowPlayerMessage(playerid, "El objeto fue añadido.", 3);
				PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] = slot;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowObjTuning(playerid);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if (response)
			{
				if (listitem == MAX_SU_VOBJECTS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if (!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][listitem][vobject_VALID])
				{
				    ShowPlayerMessage(playerid, "~r~Este slot está vacío, puedes comprar un objeto nuevo.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowObjTuning(playerid);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
						    ShowPlayerMessage(playerid, "Objeto guardado", 2);
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else
						{
						    ShowPlayerMessage(playerid, "Objeto colocado.", 2);
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if (!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
						    ShowPlayerMessage(playerid, "~r~Primero debes colocar el nombre.", 2);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						EditVehicleObject(playerid, PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if (!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
								    ShowPlayerMessage(playerid, "~r~Primero debes colocar el objeto.", 2);
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if (!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									ShowPlayerMessage(playerid, "~r~Primero debes colocar el objeto.", 2);
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}

			}
			else
			{
				UpdateVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if (response)
			{
				if (!strlen(inputtext) || strlen(inputtext) > 32)
				{
				    ShowPlayerMessage(playerid, "~r~El nombre del objeto debe contener de 1 a 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if (response)
			{
				PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT] ] = 0;
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
				        ShowPlayerMessage(playerid, "Color actualizado.", 2);
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT] ] = hy_RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
						ShowPlayerMessage(playerid, "Color actualizado.", 2);
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT] ] = hy_RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
						ShowPlayerMessage(playerid, "Color actualizado.", 2);
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if (response)
			{
				if (strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);

				new hexcolor;
				if (sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][py_TUNING_EDIT_COLOR_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
				ShowPlayerMessage(playerid, "Color actualizado.", 2);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if (response)
			{
				if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID` = '%d';", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;

				ShowPlayerMessage(playerid, "Objeto eliminado.", 2);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if (response)
			{
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][player_vehicle_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
				{
					if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][i] = temp_VEHICLE_OBJECTS;
				}

				ShowPlayerMessage(playerid, "Todos los objetos de este vehículo han sido eliminados.", 2);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if (VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = false;
					        ShowPlayerMessage(playerid, "Negrita ~r~deshabilitada", 2);
						}
						else
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = true;
							ShowPlayerMessage(playerid, "Negrita ~g~habilitada", 2);
						}
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
						ShowDialog(playerid, dialogid);
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if (response)
			{
				if (strlen(inputtext) >= 32)
				{
				    ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir un texto de 32 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (sscanf(inputtext, "s[32]", inputtext))
				{
				    ShowPlayerMessage(playerid, "Introduce un texto.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
			    ShowPlayerMessage(playerid, "Texto actualizado.", 2);
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if (response)
			{
				if (strlen(inputtext) >= 24)
				{
				    ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir una fuente de 24 caracteres.", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if (sscanf(inputtext, "s[24]", inputtext))
				{
					ShowPlayerMessage(playerid, "Introduce un texto.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
				ShowPlayerMessage(playerid, "Fuente actualizada.", 2);
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
				    ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0 || inputtext[0] >= 255)
				{
				    ShowPlayerMessage(playerid, "Introduce un valor entre 1 y 255.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
				ShowPlayerMessage(playerid, "Tamaño de letra actualizado.", 2);
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if (response)
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_text_FONT_COLOR] = hy_RGBAToARGB(CrewColors[listitem]);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT], true);
				ShowPlayerMessage(playerid, "Color de letra actualizado.", 2);
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
					}
					case 1:
					{
						ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
					}
					case 2:
					{
						if (PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER])
						{
							PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = false;
							ShowDialog(playerid, dialogid);
						}
						else
						{
							PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
							ShowDialog(playerid, dialogid);
						}
					}
					case 3:
					{
						if (ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL])
						{
							ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = false;
							ShowDialog(playerid, dialogid);
						}
						else
						{
							ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
							ShowDialog(playerid, dialogid);
						}
					}
					case 4:
					{
						if (PLAYER_MISC[playerid][MISC_CONFIG_HUD])
						{
							PLAYER_MISC[playerid][MISC_CONFIG_HUD] = false;
							ShowDialog(playerid, dialogid);
							HidePlayerHud(playerid);
						}
						else
						{
							PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
							ShowDialog(playerid, dialogid);
							SetPlayerHud(playerid);
						}
					}
					case 5:
					{
						if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
						{
							PLAYER_MISC[playerid][MISC_CONFIG_FP] = false;
							ShowDialog(playerid, dialogid);
							SetFirstPerson(playerid, false);
						}
						else
						{
							PLAYER_MISC[playerid][MISC_CONFIG_FP] = true;
							ShowDialog(playerid, dialogid);
							SetFirstPerson(playerid, true);
						}
					}
					case 6:
					{
						if (CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
						{
							CHARACTER_INFO[playerid][ch_SEX] = SEX_FEMALE;
							ShowDialog(playerid, dialogid);
						}
						else
						{
							CHARACTER_INFO[playerid][ch_SEX] = SEX_MALE;
							ShowDialog(playerid, dialogid);
						}
					}
					case 7:
					{
						ShowDialog(playerid, DIALOG_CONFIG_VOICE);
					}
					case 8:
					{
						Streamer_Update(playerid);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_ALL);
					}
					case 1: ShowDialog(playerid, DIALOG_POLICE_BYC_NAME_FIND);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			if (response)
			{
				new name[24];
				if (sscanf(inputtext, "s[24]", name)) return ShowDialog(playerid, dialogid);

				new DBResult:Result, DB_Query[128], bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", name);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result))
				{
					PLAYER_TEMP[playerid][py_SELECTED_BYC_USER_ID] = db_get_field_int(Result, 0);
					found = true;
				}
				db_free_result(Result);

				if (found)
				{
					PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
					PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_PLAYER);
				}
				else ShowPlayerMessage(playerid, "~r~No se encontró a esa persona.", 3);
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `POLICE_HISTORY`;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `POLICE_HISTORY`;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][py_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			if (response)
			{
				if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_BYC_USER_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if (PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_BYC_USER_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][py_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][py_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			if (response)
			{
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `POLICE_HISTORY` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][py_SELECTED_BYC_ID]);
				db_query(Database, DB_Query);

				ShowPlayerMessage(playerid, "~r~Registro borrado del historial policial.", 3);
			}
			return 1;
		}
		case DIALOG_EMISORAS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Hip-Hop");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/hiphop.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Hip-Hop ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://192.96.205.59:7660/listen.pls");
					}
					case 1:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}EDM");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/edm.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~EDM ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://uk4.internet-radio.com:8049/listen.pls");
					}
					case 2:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Rock and Roll");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/rock.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Rock and Roll ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://uk2.internet-radio.com:8054/listen.pls");
					}
					case 3:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Pop");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/pop.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Pop ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://uk7.internet-radio.com:8040/listen.pls");
					}
					case 4:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Country");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/country.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Country ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://us3.internet-radio.com:8297/listen.pls");
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Jazz");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}rex-net.rf.gd/jazz.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Jazz ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://uk3.internet-radio.com:8021/listen.pls");
					}
					case 6:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Drum And Bass");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/dab.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Drum And Bass ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://radio.drumandbass.fm/listen128.pls");
					}
					case 7:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Trap rap");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/trap.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Trap Rap ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://162.252.57.90:9336/listen.pls");
					}
					case 8:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Heavy Metal");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/metal.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Heavy Metal ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://5.135.154.69:11590/listen.pls");
					}
					case 9:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, " ");
						SendClientMessageEx(playerid, COLOR_WHITE, "Emisora de: {ec3c3c}Techno");
						SendClientMessageEx(playerid, COLOR_WHITE, "Url: {ec3c3c}http://rex-net.rf.gd/techno.html");
						ShowPlayerMessage(playerid, "~w~Emisora de ~g~Techno ~w~sintonizada", 2);
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "http://uk5.internet-radio.com:8306/listen.pls");
					}
					case 10:
					{
						StopAudioStreamForPlayer(playerid);
						ShowPlayerMessage(playerid, "Emisora detenida", 2);
					}
				}
			}
			return 1;
		}
		case DIALOG_GIFT:
		{
			if (response)
			{
				new DBResult:Result, DB_Query[140];
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `GIFTS_CODES` WHERE `CODE` = '%s';", inputtext);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result) == 0) ShowPlayerMessage(playerid, "~r~El código no existe.", 4);
				else
				{
					new 
						str_text[128],
						code[24],
						type,
						extra,
						used;

					db_get_field_assoc(Result, "CODE", code, 24);
					type = db_get_field_assoc_int(Result, "TYPE");
					extra = db_get_field_assoc_int(Result, "EXTRA");
					used = db_get_field_assoc_int(Result, "USED");

					if (used == 0)
					{
						switch(type)
						{
							case 0:
							{
								format(str_text, sizeof(str_text), "~g~[DINERO]~w~ Has canjeado %d$", extra);
								ShowPlayerMessage(playerid, str_text, 4);
								GivePlayerCash(playerid, extra, false);
							}
							case 1:
							{
								CHARACTER_INFO[playerid][ch_SKIN] = extra;
    							SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
    							PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
    							format(str_text, sizeof(str_text), "~g~[SKIN]~w~ Has canjeado la skin %d", extra);
								ShowPlayerMessage(playerid, str_text, 4);
							}
							case 2:
							{
								SetPlayerVip(playerid, 1, 0, extra);
							}
							case 3:
							{
								ACCOUNT_INFO[playerid][ac_SD] += extra;

								format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
								db_query(Database, DB_Query);

								format(str_text, sizeof(str_text), "~g~[HYCOINS]~w~ Has canjeado %d Hycoins", extra);
								ShowPlayerMessage(playerid, str_text, 4);
							}
						}

						format(DB_Query, sizeof DB_Query, "UPDATE `GIFTS_CODES` SET `USED` = '1' WHERE `CODE` = '%s';", inputtext);
						db_query(Database, DB_Query);
						return 1;
					}
					else ShowPlayerMessage(playerid, "~r~El código ya fue usado.", 4);
				}
				db_free_result(Result);
			}
			return 1;
		}
		case DIALOG_DRUG_MARKET:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 250) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);

						PLAYER_MISC[playerid][MISC_CANNABIS] += 5;
						ShowPlayerNotification(playerid, "Has comprado 5 gramos de Marihuana.", 3);
						SavePlayerMisc(playerid);
						GivePlayerCash(playerid, -250, false);
					}
					case 1:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 400) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente", 2);

						PLAYER_MISC[playerid][MISC_CRACK] += 5;
						ShowPlayerNotification(playerid, "Has comprado 5 gramos de Crack.", 3);
						SavePlayerMisc(playerid);
						GivePlayerCash(playerid, -400, false);
					}
				}
			}
			return 1;
		}
		case DIALOG_BUY_ROD:
		{
			if (response)
			{
				if (CHARACTER_INFO[playerid][ch_CASH] <= 455) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

				if (IsFullInventory(playerid)) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

				PLAYER_MISC[playerid][MISC_ROD] ++;
            	GivePlayerCash(playerid, -455, false);
     			GameTextForPlayer(playerid, "~r~-455$", 5000, 1);
			}
			return 1;
		}
		case DIALOG_SELL_FISH:
		{
			if (response)
			{
				new 
					str_text[32],
					payment = (PLAYER_MISC[playerid][MISC_FISH] * 300),
					vip_payment = 0;

	    		if (ACCOUNT_INFO[playerid][ac_SU])
				{
					vip_payment = (PLAYER_MISC[playerid][MISC_FISH] * 150);				
				}

				payment = (payment + vip_payment);

				PLAYER_MISC[playerid][MISC_FISH] = 0;
            	GivePlayerCash(playerid, payment, true);

            	format(str_text, 32, "~g~+%d$", payment);
     			GameTextForPlayer(playerid, str_text, 5000, 1);
			}
			return 1;
		}
		case DIALOG_CONFIG_VOICE:
		{
			if (response)
			{
				PLAYER_MISC[playerid][MISC_VOICE_KEY] = listitem;
				sv_set_key(playerid, ReturnKeyHex(listitem));
				ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
				SavePlayerMisc(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
			return 1;
		}
		case DIALOG_CHANGE_MHZ:
		{
			if (response)
			{
				new mhz;
				if (sscanf(inputtext, "d", mhz)) return ShowPlayerMessage(playerid, "~r~Ingrese un número del 1 al 1000.", 3);
				if (mhz > 1000) return ShowPlayerMessage(playerid, "~r~Ingrese un número del 1 al 1000.", 3);
				if (!PLAYER_WORKS[playerid][WORK_POLICE] && mhz >= 990) return ShowPlayerMessage(playerid, "~r~Las frecuencias superiores a 990~n~solo son para policías.", 4);
				ShowPlayerMessage(playerid, "~g~Frecuencia cambiada", 3);
				ShowPlayerNotification(playerid, "Si quiere apagar la radio use la frecuencia 0", 4);
				PLAYER_MISC[playerid][MISC_MHZ] = mhz;
			}
			return 1;
		}
		case DIALOG_BUY_VOBJECT:
		{
			if (response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
				if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
					return 1;
				}
				if (slot == -1)
				{
				    ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
					return 1;
				}

				if (Tuning_Shop_Objects[listitem][tuning_object_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
					return 1;
				}

				GivePlayerCash(playerid, -Tuning_Shop_Objects[listitem][tuning_object_PRICE]);

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[listitem][tuning_object_MODELID];
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[listitem][tuning_object_NAME]);
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);

				RegisterNewVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowObjTuning(playerid);
			return 1;
		}
		case DIALOG_RADIO_STATIONS:
		{
			if (response)
			{
				new index = (listitem - 1);
				if (listitem == 0)
				{
					PLAYER_MISC[playerid][MISC_RADIO_STATION] = 100;
					StopAudioStreamForPlayer(playerid);
					ShowPlayerMessage(playerid, "Radio ~r~apagada", 2);
				}
				else
				{
					PLAYER_MISC[playerid][MISC_RADIO_STATION] = index;
					PlayAudioStreamForPlayer(playerid, RADIO_STATIONS[index][r_URL]);
					ShowPlayerMessage(playerid, "Emisora ~g~cambiada", 2);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_OPTIONS);
			return 1;
		}
		case DIALOG_VEHICLE_OPTIONS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetEngineAction(playerid);
					}
					case 1:
					{
						SetVehicleLightsAction(playerid);
						ShowDialog(playerid, DIALOG_VEHICLE_OPTIONS);
					}
					case 2:
					{
						ShowDialog(playerid, DIALOG_RADIO_STATIONS);
					}
					case 3:
					{
						if (PLAYER_TEMP[playerid][py_GPS_MAP]) HidePlayerGpsMap(playerid);
						else ShowPlayerGpsMap(playerid);
					}
					case 4:
					{
						SetPlayerVehiclePark(playerid);
					}
				}
			}
			return 1;
		}
		case DIALOG_MINER_STORE:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						if (CHARACTER_INFO[playerid][ch_CASH] <= 150) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

						if (IsFullInventory(playerid)) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

						PLAYER_MISC[playerid][MISC_MALLET] ++;
		            	GivePlayerCash(playerid, -150, false);
		     			GameTextForPlayer(playerid, "~r~-150$", 5000, 1);
					}
				}
			}
		}
		case DIALOG_SELL_HYCOIN:
		{
			if (response)
			{
				if (sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor numérico.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "Introduce un valor positivo.", 2);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if (inputtext[0] > ACCOUNT_INFO[playerid][ac_SD])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerMessage(playerid, "~r~No tienes esa cantidad", 3);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new
					DB_Query[140],
					str_text[32]
				;

				ACCOUNT_INFO[playerid][ac_SD] -= inputtext[0];

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				GivePlayerCash(playerid, 150000 * inputtext[0], true);
				format(str_text,sizeof(str_text), "~g~+%d$", (150000 * inputtext[0]));
				GameTextForPlayer(playerid, str_text, 5000, 1);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
		}
	}
	return 0;
}

GetDatabasePages(const query_[], limit)
{
    new DBResult:pages;
	pages = db_query(Database, query_);

	new Float:tpages = floatdiv(floatround(db_get_field_int(pages, 0)), limit);
	db_free_result(pages);
	return floatround(tpages, floatround_ceil);
}

AddNewAd(playerid, type, price, const text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4];
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}

	new DB_Query[450];
	format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `SHOP` (`ID_USER`, `TYPE`, `PRICE`, `TEXT`, `MODELID`, `RX`, `RY`, `RZ`, `ZOOM`, `VCOL1`, `VCOL2`) VALUES ('%d', '%d', '%d', '%q', '%d', '%f', '%f', '%f', '%f', '%d', '%d');\
			DELETE FROM `SHOP` WHERE `ID` NOT IN (SELECT `ID` FROM `SHOP` ORDER BY `DATE` DESC LIMIT 300);\
		",
			ACCOUNT_INFO[playerid][ac_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2
	);
	db_query(Database, DB_Query);
	return 1;
}

CALLBACK: OnPlayerSongFound(index, response_code, data[])
{
	if (!PLAYER_TEMP[index][py_PLAYER_WAITING_MP3_HTTP]) return 1;

	if (response_code == 200)
	{
		if (data[0] == '|' && data[1] == '[')
		{
			new start_song_pos = -1, end_song_pos = -1, delimiter_pos_info = -1, counter, tmp[yt_result];
			for(new i = 0; i != sizeof RESULT_YOUTUBE; i ++) RESULT_YOUTUBE[i] = tmp;

			start_song_pos = strfind(data, "|[");
			while(start_song_pos != -1)
			{
				start_song_pos = strfind(data, "|[");
				if (start_song_pos == -1) break;
				delimiter_pos_info = strfind(data, "||");
				strmid(RESULT_YOUTUBE[counter][videoID], data, start_song_pos + 2, delimiter_pos_info, 11 + 1);

				end_song_pos = strfind(data, "]|");
				strmid(RESULT_YOUTUBE[counter][yt_title], data, delimiter_pos_info + 2, end_song_pos, 100 + 1);
				strdel(data, 0, end_song_pos + 2);
				counter ++;
			}

			if (counter == 0) return ShowPlayerMessage(index, "~r~No se encontró resultados.", 3);

			new dialog_title[50], dialog[120 * MAX_RESULTS], dialog_counter;

			for(new i = 0; i != counter; i ++)
			{
				if (isnull(RESULT_YOUTUBE[i][yt_title])) continue;
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][videoID], 11 + 1, "%s", RESULT_YOUTUBE[i][videoID]);
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][yt_title], 100 + 1, "%s", RESULT_YOUTUBE[i][yt_title]);
				format(dialog, sizeof dialog, "%s"COL_WHITE"%d. %s\n", dialog, dialog_counter + 1, RESULT_YOUTUBE[i][yt_title]);
				dialog_counter ++;
			}
			format(dialog_title, sizeof dialog_title, ""COL_WHITE"Se han encontado '%d' resultados", dialog_counter);
			ShowPlayerDialog(index, DIALOG_PLAYER_MP3_RESULTS, DIALOG_STYLE_LIST, dialog_title, dialog, "Reproducir", "Salir");
			PLAYER_TEMP[index][py_DIALOG_RESPONDED] = false;
		}
		else ShowPlayerMessage(index, "~r~El resultado obtenido no puede ser comprendido.", 3);
	}
	else ShowPlayerMessage(index, "~r~La búsqueda falló, inténtelo de nuevo más tarde.", 3);

	PLAYER_TEMP[index][py_PLAYER_WAITING_MP3_HTTP] = false;
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if (!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)//spgps
{
	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]);
    	CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);
  	StartTracing(playerid, x, y, z);

	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	SetPlayerChatBubble(playerid, "\n\n\n\n* Configura su GPS.\n\n\n", 0xffcb90FF, 20.0, 5000);
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	printf("onaplayer enter dynamic area %d %d",playerid, areaid); // debug juju
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if (areaid == Mechanic_Area)
			{
				if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
				{
					PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
					DisablePlayerMechanicMark(playerid);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if (TERRITORIES[index][territory_VALID])
			{
				PLAYER_TEMP[playerid][py_LAST_TERRITORY] = index;
				if (TERRITORIES[index][territory_WAR])//territorio conquista
				{
					new str_text[164];
					format(str_text, sizeof(str_text), "Este territorio está siendo atacado por la banda %s, es mejor alejarse.", CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
					ShowPlayerNotification(playerid, str_text, 6);
				}
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	printf("OnPlayerLeaverDynamicArea %d %d",playerid, areaid); // debug juju
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if (areaid == Farmer_Area)
			{
				if (PLAYER_TEMP[playerid][py_WORKING_IN] == WORK_FARMER) EndPlayerJob(playerid);
			}
			else if (areaid == Harvest_Area)
			{
				if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if (PLAYER_TEMP[playerid][py_WORKING_IN] == WORK_HARVESTER)
					{
						ShowPlayerNotification(playerid, "Has abandonado el trabajo de cosechador porque te has alejado de la zona.", 3);
						EndPlayerJob(playerid);
					}
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if (TERRITORIES[index][territory_VALID])
			{
				if (PLAYER_CREW[playerid][player_crew_VALID])
				{
					SetPlayerNormalColor(playerid);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	printf("OnPlayerEnterDynamicCp %d %d",playerid, checkpointid); // debug juju
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]);
	 		CancelTracing(playerid);
			PLAYER_TEMP[playerid][py_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if (!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRUCK) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Solo aceptaremos la carga del conductor de este camión.", 3);

			DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]);
	 		CancelTracing(playerid);
			PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;

			PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] = 5;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][7]);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
			PLAYER_TEMP[playerid][py_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if (!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRUCK) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if (!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Solo le pagaremos al conductor que entregó la mercancía.", 3);

			DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]);
	 		CancelTracing(playerid);
			PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			new work_extra_payment;
			if (work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRUCK], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if (work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if (work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];

				if (ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			GivePlayerCash(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment);
			PLAYER_SKILLS[playerid][WORK_TRUCK] ++;
			SavePlayerSkills(playerid);

			new str_text[20];
			format(str_text,sizeof(str_text), "~g~+%s$", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment));
			GameTextForPlayer(playerid, str_text, 5000, 1);
			SetVehicleToRespawnEx(vehicleid);
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if (!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if (!PLAYER_TEMP[playerid][py_TRASH_PASSENGER]) return 1;

			new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			ShowPlayerMessage(driver, "Espera mientras tu ~y~compañero~w~ recoge la basura.", 4);

			new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
			if (offset > 30.0) offset = 30.0;

			PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] = 5;
			UpdatePlayerTrashRecycleSize(playerid);

			TogglePlayerControllableEx(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][10]);
			PLAYER_TEMP[playerid][py_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if (!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if (!PLAYER_TEMP[playerid][py_TRASH_DRIVER]) return 1;

			new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];

			new driver_work_extra_payment, passenger_work_extra_payment;
			if (work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if (work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if (driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if (ACCOUNT_INFO[playerid][ac_SU]) driver_work_extra_payment += SU_WORK_EXTRA_PAY;

				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if (work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if (passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if (ACCOUNT_INFO[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][ac_SU]) passenger_work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			GivePlayerCash(playerid, money + driver_work_extra_payment + 1000);
			new str_text[20];
			format(str_text,sizeof(str_text), "~g~+%s$", number_format_thousand(money + driver_work_extra_payment));
			GameTextForPlayer(playerid, str_text, 5000, 1);
			SavePlayerSkills(playerid);
			PLAYER_SKILLS[playerid][WORK_TRASH] ++;
			SavePlayerSkills(playerid);

			GivePlayerCash(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment);
			GameTextForPlayer(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], str_text, 5000, 1);
			PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH] ++;
			SavePlayerSkills(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID]);

			CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
		}
		/*case CHECKPOINT_TYPE_CLEANER:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][py_CLEANER_CHECKPOINT]);
			PLAYER_TEMP[playerid][py_CLEANER_FINAL] = CreateDynamicCP(1633.112792, -1885.244140, 13.278512, 7.0, 0, 0, playerid, 9999999999.0);
			StartTracing(playerid, 1633.112792, -1885.244140, 13.278512);

			new n_info[1];
			n_info[0] = CHECKPOINT_TYPE_FINISH_CLEANER;
			Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_CLEANER_FINAL], E_STREAMER_EXTRA_ID, n_info);

			ShowPlayerMessage(playerid, "Vuelve a recibir la paga.", 4);
		}
		case CHECKPOINT_TYPE_FINISH_CLEANER:
		{
			if (PLAYER_TEMP[playerid][py_CLEANER_INDEX] == 99) return 0;

			new 
				Float:distance = GetPlayerDistanceFromPoint(playerid, CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][0], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][1], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][2]),
				payment = (floatround(distance) * 2),
				str_text[64];

			DestroyDynamicCP(PLAYER_TEMP[playerid][py_CLEANER_FINAL]);
			GivePlayerCash(playerid, payment);
			format(str_text, sizeof(str_text), "~g~+%d$", payment);
			GameTextForPlayer(playerid, str_text, 4000, 1);
			RemovePlayerFromVehicle(playerid);
			PLAYER_TEMP[playerid][py_CLEANER_INDEX] = 99;
		}*/
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_GPS`\
		(\
			`ID_USER`, `NAME`, `X`, `Y`, `Z`, `WORLD`, `INTERIOR`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `PLAYER_GPS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PLAYER_GPS[playerid][slot][player_gps_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);

	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if (i >= MAX_NU_TOYS && !ACCOUNT_INFO[playerid][ac_SU]) break;

		if (PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if (PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}

	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid,
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	SavePlayerToysData(playerid);
	return 1;
}

EditPlayerToy(playerid)
{
	if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);

	SetPlayerAttachedObject
	(
		playerid,
		PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);

	EditAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	printf("OnPlayerEditAttaObject %d %d", playerid, response); // debug juju
	if (index != PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]) return 0;

	if (response)
	{
		if (fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
		{
			ShowPlayerMessage(playerid, "~r~El tamaño del accesorio es demasiado grande.", 3);

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
			if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
					);
			}
			return 1;
		}

		if ((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
		{
			ShowPlayerMessage(playerid, "~r~La posición del objeto está demasiado lejos de ti.", 3);

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
			if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
					);
			}

			return 1;
		}

		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;

		if (!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;

		SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Accesorio "COL_RED"'%s' "COL_WHITE"actualizado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_NAME]);
		ShowPlayerMessage(playerid, "Accesorio actualizado", 2);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT]);
		if (PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid,
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
		}
		ShowPlayerMessage(playerid, "Has cancelado la edición", 2);
	}
	return 1;
}

RegisterBankAccountTransaction(account_id, transaction_type, ammount, extra = -1)
{
	new DB_Query[215];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `BANK_TRANSACTIONS`\
		(\
			`ID_ACCOUNT`, `TRANSACTION_TYPE`, `AMMOUNT`, `EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
	", account_id, transaction_type, ammount, extra);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayer(playerid)
{
	if (PLAYER_TEMP[playerid][py_USER_EXIT]) return 0;

	new DBResult:Result, DB_Query[900];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CUENTA`\
		(\
			`IP`, `NAME`, `EMAIL`, `SALT`, `PASS`, `CONNECTED`, `PLAYERID`, `TIME_FOR_REP`\
		)\
		VALUES\
		(\
			'%q', '%q', '%q', '%q', '%q', '1', '%d', '%d'\
		);\
		SELECT `ID`, `LAST_CONNECTION` FROM `CUENTA` WHERE `NAME` = '%s';\
	", ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], playerid, TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_NAME]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 24);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
	}
	db_free_result(Result);

	DB_Query[0] = EOS;
	new DBResult:Result_reg;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `REGISTRO`\
		(\
			`ID_USER`, `IP`, `NAME`, `EMAIL`, `SALT`, `PASS`\
		)\
		VALUES\
		(\
			'%d', '%q', '%q', '%q', '%q', '%q'\
		);\
		SELECT `DATE` FROM `REGISTRO` WHERE `ID_USER` = '%d';\
	", ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
	Result_reg = db_query(Database, DB_Query);

	if (db_num_rows(Result_reg)) db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
	db_free_result(Result_reg);


	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PERSONAJE`\
		(\
			`ID_USER`, `SKIN`, `CASH`, `POS_X`, `POS_Y`, `POS_Z`, `ANGLE`, `SEX`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d'\
		);\
	", ACCOUNT_INFO[playerid][ac_ID], CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_SEX]);
	db_query(Database, DB_Query);

	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_OBJECT` (`ID_USER`) VALUES ('%d');", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);


	new DBResult:Result_pnumber, phone_number;
	Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `PHONE_NUMBER` FROM `PHONE`) LIMIT 1;");
	if (db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
	db_free_result(Result_pnumber);

	if (phone_number)
	{
		PLAYER_PHONE[playerid][player_phone_VALID] = true;
		PLAYER_PHONE[playerid][player_phone_NUMBER] = phone_number;
		PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
		RegisterNewPlayerPhone(playerid);
	}

	new slot;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policia");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Banco");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 6740;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Aseguradora");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 38350;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Mecanico");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 570;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_TEMP[playerid][py_USER_EXIT] = true;
	return 1;
}

SaveUserData(playerid)
{
	if (!PLAYER_TEMP[playerid][py_USER_EXIT] || !PLAYER_TEMP[playerid][py_USER_LOGGED]) return 0;

	new DB_Query[1800];
	format(DB_Query, sizeof(DB_Query), "\
		UPDATE `CUENTA` SET \
		`IP` = '%q',\
		`NAME` = '%q',\
		`EMAIL` = '%q',\
		`SALT` = '%q',\
		`PASS` = '%q',\
		`LAST_CONNECTION` = CURRENT_TIMESTAMP,\
		`TIME-PLAYING` = '%d',\
		`LEVEL` = '%d',\
		`REP` = '%d',\
		`STATE` = '%d',\
		`DOUBT_CHANNEL` = '%d',\
		`TIME_FOR_REP` = '%d',\
		`ADMIN_LEVEL` = '%d',\
		`PAYDAY_REP` = '%d' \
		WHERE `ID` = '%d';\
		\
		UPDATE `PERSONAJE` SET \
		`SKIN` = '%d',\
		`CASH` = '%d',\
		`POS_X` = '%f',\
		`POS_Y` = '%f',\
		`POS_Z` = '%f',\
		`ANGLE` = '%f',\
		`STATE` = '%d',\
		`INTERIOR` = '%d',\
		`LOCAL_INTERIOR` = '%d',\
		`FIGHT_STYLE` = '%d',\
		`HEALTH` = '%f',\
		`ARMOUR` = '%f',\
		`SEX` = '%d',\
		`HUNGRY` = '%f',\
		`THIRST` = '%f',\
		`BLACK_MARKET_LEVEL` = '%d',\
		`POLICE_JAIL_TIME` = '%d',\
		`POLICE_JAIL_ID` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `BANK_ACCOUNTS` SET\
		`BALANCE` = '%d' \
		WHERE `ID_ACCOUNT` = '%d';\
		\
		UPDATE `PHONE` SET\
		`PHONE_NUMBER` = '%d',\
		`PHONE_STATE` = '%d',\
		`VISIBLE_NUMBER` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `PLAYER_OBJECT` SET\
		`GPS` = '%d',\
		`MP3` = '%d',\
		`PHONE_RESOLVER` = '%d' \
		WHERE `ID_USER` = '%d';\
		",
		ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], ACCOUNT_INFO[playerid][ac_STATE], ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL], ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL], ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID],
		CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_STATE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_FIGHT_STYLE], CHARACTER_INFO[playerid][ch_HEALTH], CHARACTER_INFO[playerid][ch_ARMOUR],  CHARACTER_INFO[playerid][ch_SEX], CHARACTER_INFO[playerid][ch_HUNGRY], CHARACTER_INFO[playerid][ch_THIRST], CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL], CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME], CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID], ACCOUNT_INFO[playerid][ac_ID],
		BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
		PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_STATE], PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER], ACCOUNT_INFO[playerid][ac_ID],
		PLAYER_OBJECT[playerid][po_GPS], PLAYER_OBJECT[playerid][po_MP3], PLAYER_OBJECT[playerid][po_PHONE_RESOLVER], ACCOUNT_INFO[playerid][ac_ID]
		);
	db_query(Database, DB_Query);

	if (BANK_ACCOUNT[playerid][bank_account_ID] != 0)
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query,

			"DELETE FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' AND `ID_TRANSACTION` NOT IN (SELECT `ID_TRANSACTION` FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d);",

			BANK_ACCOUNT[playerid][bank_account_ID], BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG
			);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}

	if (PLAYER_PHONE[playerid][player_phone_VALID])
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query,

			"DELETE FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 10);\
			DELETE FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 10);",

			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER]
			);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}
	return 1;
}

SendClientMessageEx(playerid, color, const form[], {Float, _}: ...)
{
    #pragma unused form

    static
	   tmp[145]
    ;
    new
	   t1 = playerid,
	   t2 = color
    ;
    const
	   n4 = -4,
	   n16 = -16,
	   size = sizeof tmp
    ;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16

    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}

TimeConvert(seconds)
{
	new tmp[16];
	new minutes = floatround(seconds/60);
	seconds -= minutes*60;
	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
	return tmp;
}

/*TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
	return 1;
}*/

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5, div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;

	if (div)
	{
		format(line1_str, div + 1, "%s", string);
		if (strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);

	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (!IsPlayerConnected(i)) continue;
		if (!PLAYER_TEMP[i][py_USER_LOGGED]) continue;
		if (GetPlayerVirtualWorld(i) != current_vw) continue;
		if (GetPlayerInterior(i) != current_int) continue;

		if (IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col1, line1_str);
			if (div && line2_used) SendClientMessage(i, col1, line2_str);
		}
		else if (IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col2, line1_str);
			if (div && line2_used) SendClientMessage(i, col2, line2_str);
		}
		else if (IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col3, line1_str);
			if (div && line2_used) SendClientMessage(i, col3, line2_str);
		}
		else if (IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col4, line1_str);
			if (div && line2_used) SendClientMessage(i, col4, line2_str);
		}
		else if (IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col5, line1_str);
			if (div && line2_used) SendClientMessage(i, col5, line2_str);
		}
	}
	return 1;
}

SendResponsiveMessage(playerid, color, const string[], div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;

	if (div)
	{
		format(line1_str, div + 1, "%s", string);
		if (strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);

	SendClientMessage(playerid, color, line1_str);
	if (div && line2_used) SendClientMessage(playerid, -1, line2_str);
	return 1;
}

/*NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, const string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (!IsPlayerConnected(i)) continue;
		if (!PLAYER_TEMP[i][py_USER_LOGGED]) continue;
		if (GetPlayerVirtualWorld(i) != current_vw) continue;
		if (GetPlayerInterior(i) != current_int) continue;

		if (IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}*/

IsValidRPName(const string[])
{
    new Regex:reg_exp = Regex_New("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*"); 
    new result = Regex_Check(string, reg_exp); 
    Regex_Delete(reg_exp); 
    return result; 
}

StringContainsIP(const string[])
{
    new Regex:reg_exp = Regex_New("([0-9]{1,3}[\\.]){3}[0-9]{1,3}"), RegexMatch:results, pos;
    new result = Regex_Search(string, reg_exp, results, pos);
    Regex_Delete(reg_exp); 
    return result; 
}

KickEx(playerid, time = 0)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return 0;
	PLAYER_TEMP[playerid][py_KICKED] = true;
	
	if (!time) Kick(playerid);
	else
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][0]);
		PLAYER_TEMP[playerid][py_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

CALLBACK: KickPlayer(playerid)
{
	return Kick(playerid);
}

SetRolePlayNames(playerid)
{
	if (isnull(PLAYER_TEMP[playerid][py_NAME])) return 0;

	new name[24], bool:underscore;
	format(name, 24, "%s", PLAYER_TEMP[playerid][py_NAME]);
	format(PLAYER_TEMP[playerid][py_RP_NAME], 24, "%s", name);
	for(new i = 0; i < 24; i++)
	{
		if (name[i] == '_')
		{
			PLAYER_TEMP[playerid][py_RP_NAME][i] = ' ';
			if (!underscore)
			{
				strmid(PLAYER_TEMP[playerid][py_FIRST_NAME], name, 0, i);
				strmid(PLAYER_TEMP[playerid][py_SUB_NAME], name, i + 1, 24);
				underscore = true;
			}
		}
	}
	return 1;
}

LoadCharacterData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[80];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PERSONAJE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		CHARACTER_INFO[playerid][ch_SKIN] = db_get_field_assoc_int(Result, "SKIN");
		CHARACTER_INFO[playerid][ch_CASH] = db_get_field_assoc_int(Result, "CASH");
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = db_get_field_assoc_int(Result, "FIGHT_STYLE");
		CHARACTER_INFO[playerid][ch_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		CHARACTER_INFO[playerid][ch_ARMOUR] = db_get_field_assoc_float(Result, "ARMOUR");
		CHARACTER_INFO[playerid][ch_SEX] = db_get_field_assoc_int(Result, "SEX");
		CHARACTER_INFO[playerid][ch_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		CHARACTER_INFO[playerid][ch_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL] = db_get_field_assoc_int(Result, "BLACK_MARKET_LEVEL");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = db_get_field_assoc_int(Result, "POLICE_JAIL_TIME");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = db_get_field_assoc_int(Result, "POLICE_JAIL_ID");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerBankAccountData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
		BANK_ACCOUNT[playerid][bank_account_BALANCE] = db_get_field_assoc_int(Result, "BALANCE");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerObjectsData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_OBJECT` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		PLAYER_OBJECT[playerid][po_GPS] = db_get_field_assoc_int(Result, "GPS");
		PLAYER_OBJECT[playerid][po_MP3] = db_get_field_assoc_int(Result, "MP3");
		PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = db_get_field_assoc_int(Result, "PHONE_RESOLVER");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerPhoneData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[100];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		PLAYER_PHONE[playerid][player_phone_VALID] = true;
		PLAYER_PHONE[playerid][player_phone_NUMBER] = db_get_field_assoc_int(Result, "PHONE_NUMBER");
		PLAYER_PHONE[playerid][player_phone_STATE] = db_get_field_assoc_int(Result, "PHONE_STATE");
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = db_get_field_assoc_int(Result, "VISIBLE_NUMBER");
	}
	db_free_result(Result);


	DB_Query[0] = EOS;
	new DBResult:Result_phonebook;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' LIMIT %d;", PLAYER_PHONE[playerid][player_phone_NUMBER], MAX_PHONE_CONTACTS);
	Result_phonebook = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result_phonebook); i++ )
	{
		if (index >= MAX_PHONE_CONTACTS)
		{
			printf("[debug]  Límite superado en array 'PB' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_VALID] = true;

		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_ID] = db_get_field_assoc_int(Result_phonebook, "CONTACT_ID");
		db_get_field_assoc(Result_phonebook, "NAME", PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_NAME], 24);
		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_PHONE_NUMBER] = db_get_field_assoc_int(Result_phonebook, "PHONE_NUMBER");

		index ++;
		db_next_row(Result_phonebook);
	}
	db_free_result(Result_phonebook);
	return 1;
}

RegisterNewPlayerPhone(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[200];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE`\
		(\
			`PHONE_NUMBER`, `ID_USER`\
		)\
		VALUES\
		(\
			'%d', '%d'\
		);\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	new DBResult:Result, DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_BOOK`\
		(\
			`PHONE_ID`, `NAME`, `PHONE_NUMBER`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d'\
		);\
		SELECT MAX(`CONTACT_ID`) FROM `PHONE_BOOK`;\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

RegisterPhoneMessage(from, to, message[], offline = 0)
{
	new DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_MESSAGES`\
		(\
			`FROM`, `TO`, `MESSAGE`, `OFFLINE`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d'\
		);\
	", from, to, message, offline);
	db_query(Database, DB_Query);
	return 1;
}

CALLBACK: NoCallResponse(playerid)
{
	if (!PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return 0;
	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;

	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if (!PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) return 0;

	if (PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][py_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if (PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;

	new to_playerid = PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID];
	switch(PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][6]);

			PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
		    ShowPlayerMessage(playerid, "~r~No respondieron el teléfono.", 2);
			KillTimer(PLAYER_TEMP[to_playerid][py_TIMERS][6]);

			PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
		    ShowPlayerMessage(to_playerid, "Llamada finalizada.", 2);
			PLAYER_TEMP[to_playerid][py_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][py_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}

	PLAYER_TEMP[playerid][py_PLAYER_IN_CALL] = false;
	PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	PLAYER_TEMP[playerid][py_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if (!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if (number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if (!exists) format(f_string, sizeof f_string, "%d", number);
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if (!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

/*RegisterNewPlayerPocketObject(playerid, slot)
{
	new DBResult:Result, DB_Query[350];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_POCKET`\
		(\
			`ID_USER`, `NAME`, `HUNGRY`, `THIRST`, `DRUNK`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `PLAYER_POCKET`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}*/

LoadPlayerPocketData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_POCKET_OBJECTS);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (index >= MAX_PLAYER_POCKET_OBJECTS)
		{
			printf("[debug]  Límite superado en array 'PP' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_POCKET[playerid][index][player_pocket_VALID] = true;

		PLAYER_POCKET[playerid][index][player_pocket_object_ID] = db_get_field_assoc_int(Result, "ID_OBJECT");
		db_get_field_assoc(Result, "NAME", PLAYER_POCKET[playerid][index][player_pocket_object_NAME], 24);
		PLAYER_POCKET[playerid][index][player_pocket_object_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		PLAYER_POCKET[playerid][index][player_pocket_object_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		PLAYER_POCKET[playerid][index][player_pocket_object_DRUNK] = db_get_field_assoc_int(Result, "DRUNK");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	new DB_Query[130];
	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_POCKET` SET `ID_USER` = '%d' WHERE `ID_OBJECT` = '%d';", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	db_query(Database, DB_Query);

	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];

	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	new DB_Query[140];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_OBJECT` = '%d' AND `ID_USER` = '%d';", PLAYER_POCKET[playerid][slot][player_pocket_object_ID], ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if (!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_GPS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_GPS_SAVES);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (index >= MAX_PLAYER_GPS_SAVES)
		{
			printf("[debug]  Límite superado en array 'P_GPS' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_GPS[playerid][index][player_gps_VALID] = true;

		PLAYER_GPS[playerid][index][player_gps_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", PLAYER_GPS[playerid][index][player_gps_NAME], 24);
		PLAYER_GPS[playerid][index][player_gps_X] = db_get_field_assoc_float(Result, "X");
		PLAYER_GPS[playerid][index][player_gps_Y] = db_get_field_assoc_float(Result, "Y");
		PLAYER_GPS[playerid][index][player_gps_Z] = db_get_field_assoc_float(Result, "Z");
		PLAYER_GPS[playerid][index][player_gps_WORLD] = db_get_field_assoc_int(Result, "WORLD");
		PLAYER_GPS[playerid][index][player_gps_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerToysData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_ATTACHED_OBJECTS);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (index >= MAX_PLAYER_ATTACHED_OBJECTS)
		{
			printf("[debug]  Límite superado en array 'PTOYS' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_TOYS[playerid][index][player_toy_VALID] = true;

		PLAYER_TOYS[playerid][index][player_toy_ID] = db_get_field_assoc_int(Result, "ID_TOY");
		db_get_field_assoc(Result, "NAME", PLAYER_TOYS[playerid][index][player_toy_NAME], 24);
		PLAYER_TOYS[playerid][index][player_toy_ATTACHED] = db_get_field_assoc_int(Result, "ATTACHED");
		PLAYER_TOYS[playerid][index][player_toy_MODELID] = db_get_field_assoc_int(Result, "MODELID");
		PLAYER_TOYS[playerid][index][player_toy_BONE] = db_get_field_assoc_int(Result, "BONE");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_X] = db_get_field_assoc_float(Result, "OFFSET_X");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Y] = db_get_field_assoc_float(Result, "OFFSET_Y");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Z] = db_get_field_assoc_float(Result, "OFFSET_Z");
		PLAYER_TOYS[playerid][index][player_toy_ROT_X] = db_get_field_assoc_float(Result, "ROT_X");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Y] = db_get_field_assoc_float(Result, "ROT_Y");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Z] = db_get_field_assoc_float(Result, "ROT_Z");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_X] = db_get_field_assoc_float(Result, "SCALE_X");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Y] = db_get_field_assoc_float(Result, "SCALE_Y");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Z] = db_get_field_assoc_float(Result, "SCALE_Z");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_1] = db_get_field_assoc_int(Result, "COLOR_1");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_2] = db_get_field_assoc_int(Result, "COLOR_2");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerToysData(playerid)
{
  if (!PLAYER_TEMP[playerid][py_USER_EXIT] || !PLAYER_TEMP[playerid][py_USER_LOGGED]) return 0;

  for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
  {
    if (!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;

    new DB_Query[1000];
    format(DB_Query, sizeof(DB_Query), "\
	UPDATE `PLAYER_TOYS` SET \
	   `NAME` = '%q',\
	   `ATTACHED` = '%d',\
	   `MODELID` = '%d',\
	   `BONE` = '%d',\
	   `OFFSET_X` = '%f',\
	   `OFFSET_Y` = '%f',\
	   `OFFSET_Z` = '%f',\
	   `ROT_X` = '%f',\
	   `ROT_Y` = '%f',\
	   `ROT_Z` = '%f',\
	   `SCALE_X` = '%f',\
	   `SCALE_Y` = '%f',\
	   `SCALE_Z` = '%f',\
	   `COLOR_1` = '%d',\
	   `COLOR_2` = '%d' \
	 WHERE `ID_TOY` = '%d';\
    ",
	 PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED],
	 PLAYER_TOYS[playerid][i][player_toy_MODELID], PLAYER_TOYS[playerid][i][player_toy_BONE],
	 PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z],
	 PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y], PLAYER_TOYS[playerid][i][player_toy_ROT_Z],
	 PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y], PLAYER_TOYS[playerid][i][player_toy_SCALE_Z],
	 PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],

	 PLAYER_TOYS[playerid][i][player_toy_ID]
    );

    db_query(Database, DB_Query);
  }
  return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if (!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

minrand(min, max)
{
	return random(max - min) + min;
}

SetIntroCamera(playerid)
{
	new RandomSelectCamera = random(10);
    switch (RandomSelectCamera)
    {
		case 0:
		{
			InterpolateCameraPos(playerid, -2660.130859, -822.659790, 136.446411, -2611.390380, -686.361816, 165.962738, 60000);
			InterpolateCameraLookAt(playerid, -2656.694580, -819.039733, 136.743118, -2607.226562, -687.254577, 168.582824, 60000);
		}
		case 1: 
		{
			InterpolateCameraPos(playerid, -1679.979980, -1775.283691, 56.716926, -1853.400146, -1824.519042, 100.916595, 60000);
			InterpolateCameraLookAt(playerid, -1684.683959, -1774.074584, 57.904682, -1858.136840, -1823.652587, 102.263046, 60000);
		}
		case 2: 
		{
			InterpolateCameraPos(playerid, 1591.815185, -1115.056884, 119.295173, 1439.414184, -874.669006, 80.175354, 60000);
			InterpolateCameraLookAt(playerid, 1588.953247, -1111.129394, 118.118804, 1437.802734, -869.947998, 79.835777, 60000);
		}
		case 3: 
		{
			InterpolateCameraPos(playerid, 1466.130371, -1581.777221, 113.383575, 1507.682983, -1675.064086, 47.379180, 60000);
			InterpolateCameraLookAt(playerid, 1468.099609, -1584.432495, 109.632331, 1511.618774, -1674.838745, 44.303730, 60000);
		}
		case 4: 
		{
			InterpolateCameraPos(playerid, 2293.646240, -1346.074829, 70.114646, 2286.889892, -1107.267944, 31.274965, 60000);
			InterpolateCameraLookAt(playerid, 2293.507080, -1341.204345, 68.992675, 2286.883789, -1102.290527, 30.800329, 60000);
		}
		case 5: 
		{
			InterpolateCameraPos(playerid, 1265.077026, -167.904785, 75.483680, 1092.124267, -100.201278, 39.923648, 60000);
			InterpolateCameraLookAt(playerid, 1261.488891, -164.707916, 74.103401, 1087.231933, -100.790519, 39.076194, 60000);
		}
		case 6: 
		{
			InterpolateCameraPos(playerid, -529.037841, 1502.432128, 88.230163, -456.719818, 1582.549560, 111.548538, 60000);
			InterpolateCameraLookAt(playerid, -525.377136, 1505.816772, 88.608711, -453.534912, 1586.216430, 112.736297, 60000);
		}
		case 7:
		{
			InterpolateCameraPos(playerid, 1531.179443, -916.917053, 132.871566, 1214.361450, -1138.021850, 121.748977, 60000);
    		InterpolateCameraLookAt(playerid, 1526.842895, -915.223449, 131.047775, 1214.939086, -1133.209594, 120.520698, 60000);
		}
		case 8:
		{
			InterpolateCameraPos(playerid, 374.915130, -249.654998, 15.901206, 249.922134, -275.371459, 8.744587, 60000);
			InterpolateCameraLookAt(playerid, 372.745666, -254.149063, 15.590115, 245.886047, -278.271087, 8.194919, 60000);
		}
		case 9:
		{
			InterpolateCameraPos(playerid, 2172.368896, -1287.245483, 36.977825, 2273.769042, -1213.726806, 32.226184, 60000);
			InterpolateCameraLookAt(playerid, 2176.187500, -1284.248535, 35.778999, 2275.271728, -1218.398315, 31.267627, 60000);
		}
    }

    SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
	SetPlayerWeather(playerid, SERVER_WEATHER);
    return 1;
}

RandomMaleSkin(playerid)
{
    new RandomMaleSelect = random(5);
    switch (RandomMaleSelect)
    {
        case 0: CHARACTER_INFO[playerid][ch_SKIN] = 250;
        case 1: CHARACTER_INFO[playerid][ch_SKIN] = 15;
        case 2: CHARACTER_INFO[playerid][ch_SKIN] = 14;
        case 3: CHARACTER_INFO[playerid][ch_SKIN] = 60;
        case 4: CHARACTER_INFO[playerid][ch_SKIN] = 170;
    }
    return 1;
}

RandomFemaleSkin(playerid)
{
    new RandomFemaleSelect = random(5);
    switch (RandomFemaleSelect)
    {
        case 0: CHARACTER_INFO[playerid][ch_SKIN] = 56;
        case 1: CHARACTER_INFO[playerid][ch_SKIN] = 69;
        case 2: CHARACTER_INFO[playerid][ch_SKIN] = 93;
        case 3: CHARACTER_INFO[playerid][ch_SKIN] = 151;
        case 4: CHARACTER_INFO[playerid][ch_SKIN] = 192;
    }
    return 1;
}

CheckBlockedWeapon(playerid)
{
  	new weaponID = GetPlayerWeapon(playerid);
  	if (weaponID == 31 || weaponID == 29 || weaponID == 23 || weaponID == 34 || weaponID == 24 || weaponID == 27 || weaponID == 30 || weaponID == 23 || weaponID == 29)
  	if (!PLAYER_WORKS[playerid][WORK_POLICE] && !PLAYER_WORKS[playerid][WORK_MAFIA])
  	{
    	AddPlayerBadHistory(ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_KICK, "Armas del PD sin serlo");

    	new str[145];
    	format(str, 145, "[ANTI-CHEAT] Kick sobre %s (%d): Armas del PD sin serlo", ACCOUNT_INFO[playerid][ac_NAME], playerid);
    	SendMessageToAdmins(COLOR_ANTICHEAT, str);
    
    	SendClientMessageEx(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuiste expulsado - Razón: Tener armas prohibidas");
    	KickEx(playerid, 500);
  	}
 	return 1;
}

CALLBACK: UpdateWorldTime()
{
	gettime(SERVER_TIME[0], SERVER_TIME[1]);

	SetWorldTime(SERVER_TIME[0]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD)
			{
				new p_int = GetPlayerInterior(i);
				SetPlayerTime(i, SERVER_TIME[0], SERVER_TIME[1]);

				switch(p_int)
				{
					case 25..27: SetPlayerTime(i, 2, 2);
				}
			}
		}
	}
	return 1;
}

/*ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
	return 1;
}*/

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if (clickedid == Text:INVALID_TEXT_DRAW)
    {
		PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW] = false;

		if (PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}

		if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM]) HideBankMenu(playerid);

		if (PLAYER_TEMP[playerid][py_PLAYER_IN_PHONE])
		{
			HidePhone(playerid);

			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ShowPlayerSpeedoMeter(playerid);
		}

		if (PLAYER_TEMP[playerid][py_SHOP]) HidePlayerShop(playerid);

		if (PLAYER_TEMP[playerid][py_TUNING_GARAGE_SHOP])
		{
			CancelPlayerTuningShop(playerid);
			ShowObjTuning(playerid);
		}
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_SHOP] && (PLAYER_TEMP[playerid][py_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || PLAYER_TEMP[playerid][py_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if (clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if (!PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i]) return ShowPlayerMessage(playerid, "~r~El anuncio no está disponible.", 3);

				new DBResult:Result, DB_Query[64], bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i]);
				Result = db_query(Database, DB_Query);

				if (db_num_rows(Result)) found = true;
				db_free_result(Result);

				if (!found) return ShowPlayerMessage(playerid, "~r~El anunció no está disponible.", 3);
				PLAYER_TEMP[playerid][py_SHOP_SELECTED_ARTICLE_ID] = PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i];
				PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_AD;

				UpdatePlayerShop(playerid);
				break;
			}
		}
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_TUNING_GARAGE_SHOP])
	{
		if (clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID]);
			if (!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más objetos.", 4);
				return 1;
			}
			if (slot == -1)
			{
			    ShowPlayerMessage(playerid, "~r~No hay más espacio para objetos en este vehículo.", 3);
				return 1;
			}

			if (Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "~r~Dinero insuficiente.", 2);
				return 1;
			}

			GivePlayerCash(playerid, -Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_PRICE]);

			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_MODELID];
			format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_NAME]);
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
			UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);

			RegisterNewVehicleObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
			CancelPlayerTuningShop(playerid);

			ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			//EditVehicleObject(playerid, PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], slot);
			return 1;
		}
		else if (clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if (PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] == (sizeof(Tuning_Shop_Objects) - 1)) PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] = 0;
			else PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if (clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if (PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] == 0) PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] = sizeof(Tuning_Shop_Objects) - 1;
			else PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_IN_PHONE] == true)
	{
		if (clickedid == Textdraws[textdraw_PHONE_MENU][12]) ShowDialog(playerid, DIALOG_PHONE);
		else if (clickedid == Textdraws[textdraw_PHONE_MENU][13]) ShowDialog(playerid, DIALOG_PHONE_MESSAGE_LIST);
		else if (clickedid == Textdraws[textdraw_PHONE_MENU][14]) ShowDialog(playerid, DIALOG_PHONE_BOOK);
		else if (clickedid == Textdraws[textdraw_PHONE_MENU][15])
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
			if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes sacarte fotos.", 3);

			HidePhone(playerid);
			PLAYER_TEMP[playerid][py_SELFIE] = true;

			new Float:pos[3],
				Float:angle,
				Float:cam[2];

			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(playerid, angle);

			if (angle >= 360.0) angle = 0.0;
			angle += 1.25;
			cam[0] = pos[0] + 1.4 * floatcos(angle, degrees);
			cam[1] = pos[1] + 1.4 * floatsin(angle, degrees);
			SetPlayerCameraPos(playerid, cam[0], cam[1], pos[2] + 1.0);
			SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2] + 1);
			SetPlayerFacingAngle(playerid, angle - 90.0);
			TogglePlayerControllableEx(playerid, false);
			ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
			SetPlayerChatBubble(playerid, "\n\n\n\n* Saca su celular para sacarse una selfie.\n\n\n", 0xffcb90FF, 20.0, 5000);
			ShowPlayerMessage(playerid, "Presiona ~r~ALT~w~ para salir.", 2);
		}
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if (playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if (PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if (PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		return 1;
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_IN_INV])
	{
		if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][0])
		{
			HideInventory(playerid);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][1])
		{
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1], COLOR_RED);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40], COLOR_WHITE);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40]);
			HideCrew(playerid);
			ShowInventory(playerid);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][2])
		{
			if (!PLAYER_CREW[playerid][player_crew_VALID])
			{
				if (PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~Los policías no pueden tener banda.", 3);

				new index = GetAvaibleCrewIndex();
				if (index == -1)
				{
				    ShowPlayerMessage(playerid, "~r~No perteneces a ninguna crew y no se puede crear una porque~n~no hay espacio disponible.", 5);
					return 1;
				}

				ShowDialog(playerid, DIALOG_CREATE_CREW);
				return 1;
			}

			ShowCrew(playerid);

			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2], COLOR_RED);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40], COLOR_WHITE);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40]);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][3])
		{
			HideCrew(playerid);
			ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][40])
		{
			ShowHelpMenu(playerid);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3], COLOR_WHITE);
			PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40], COLOR_RED);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][40]);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][37])
		{
			HideInventory(playerid);
			ShowRangeUser(playerid);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][5])
		{
			if (PLAYER_TOYS[playerid][0][player_toy_VALID])
			{
				HideInventory(playerid);
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 0;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][6])
		{
			if (PLAYER_TOYS[playerid][1][player_toy_VALID])
			{
				HideInventory(playerid);
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 1;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][7])
		{
			if (PLAYER_TOYS[playerid][2][player_toy_VALID])
			{
				HideInventory(playerid);
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 2;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][8])
		{
			if (PLAYER_TOYS[playerid][3][player_toy_VALID])
			{
				HideInventory(playerid);
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 3;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][9])
		{
			if (PLAYER_TOYS[playerid][4][player_toy_VALID])
			{
				HideInventory(playerid);
				PLAYER_TEMP[playerid][py_SELECTED_TOY_SLOT] = 4;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV_CREW][9])
		{
			if (PLAYER_CREW[playerid][player_crew_RANK] == 0)
			{
				new DB_Query[128], DBResult:Result_count, total;
				format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
				Result_count = db_query(Database, DB_Query);

				if (db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
				db_free_result(Result_count);

				if (total <= 1)
				{
					ShowPlayerMessage(playerid, "~r~No puedes abandonar la banda porque eres el~n~único miembro con el rango principal.", 3);
					return 1;
				}
				PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			}

			ShowDialog(playerid, DIALOG_CREW_LEAVE);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV_CREW][10])
		{
			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV_CREW][11])
		{
			new 
				dialog[664],
				time = (gettime() - GraffitiGetTime);

			format(dialog, sizeof dialog, "\
				"COL_WHITE"Los graffitis son cada 45 minutos, el último fue hace %s.\n\
				Los mercados son cada 7 días, el último fue hace %d.", TimeConvert(time), ReturnTimelapse(MarketGetTime, gettime()));

			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Disputas", dialog, "Cerrar", "");
			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][41])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Bienvenido a Hyaxe");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~La idea de Hyaxe surgió en 2018, pero no fue hasta mediados de 2019 que comenzó a desarrollarse, con tiempos más activos y otros no tanto, pasó por varios cambios, primero fue un juego de roles y luego de supervivencia, nos quedamos con la primera opción porque la encontramos más rentable en SA:MP. Con el tiempo ampliamos nuestras fronteras a nuevos juegos como GTA:V, Rust, entre otros, las personas que trabajan en Hyaxe son pocas, pero esperamos que en el futuro aumente el número de miembros del equipo."));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][42])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Trabajos");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~Los trabajos es un sistema en el que los jugadores pueden obtener recompensas, como dinero, hycoins, entre otros. Llevando a cabo diversas tareas, como picar, recoger basura, transportar cargas, etc. Esto dependerá del trabajo que elija, puede ser basurero, cosechador, pescador, minero o un trabajo especial como la policía, pero para esto debe postularse en ~r~foro.hyaxe.com~w~, solo cuando las aplicaciones estén abiertas. Cuando consigas un trabajo, renunciarás automáticamente a todos los otros, a menos que sean especiales (como policía), cuanto más trabajes, más experiencia tendrás, con más experiencia podrás desbloquear pagos más altos. También puedes comprar una membresía VIP en ~r~www.hyaxe.com/store~w~ con la cual vas a desbloquear pagas extras."));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][43])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Las bandas");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~Las bandas son una forma para que los jugadores formen grupos sociales con sistemas del servidor, lo que también brinda nuevas posibilidades de rol y nuevas formas de obtener ganancias. Para las bandas hemos desarrollado un sistema de particular, Las Disputas, hay dos tipos, la disputa de graffiti, donde las pandillas luchan por quien pinta primero el graffiti, y las disputas de Mercados Negros, que es casi lo mismo, solo que es un poco más complicado para ganarlos. Para crear una banda, haga clic en ~r~Banda~w~, debe tener el nivel 2 y tener 10,000. Puede poner una descripción, administrar, crear roles y configurar sus permisos, todo a través de una interfaz fácil de entender."));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][44])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Vehiculos");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~Puede comprar un vehículo en cualquier concesionario, puede ubicar uno haciendo click en ~r~Mapa~w~ o usar uno gratuito como los que aparecen en el lobby.~n~~n~Teclas:~n~Abrir puertas ~r~>~w~ Espacio + Y~n~Encender/apagar luces ~r~>~w~ Espacio + N~n~Administrar ~r~>~w~ 2"));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][45])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Propiedades");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~Una propiedad te servirá para esconderse de la policía, hacer fiestas y muchos más. Por ahora, este sistema no esta muy avanzado en comparación con todo lo demás en el servidor, pero en el futuro se va a poder decorar el interior, colocar almacenes, dar la llave a amigos y mucho más."));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][46])
		{
			/* Header */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47], "Hyaxe Client");
			
			/* Body */
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48], TextToSpanish("~w~Hyaxe Client es un cliente personalizado que incluye nuevas características al servidor, como por ejemplo, un chat de voz. Es muy fácil instalarlo, solo visite ~r~www.hyaxe.com/client~w~, si se le dificulta busque en YouTube: ~r~Chat de voz Hyaxe tutorial~w~. Muchos usuarios hicieron tutoriales, aprovéchelo."));
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][47]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INV][48]);

			PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			return 1;
		}

		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][10]) ClickInventorySlot(playerid, 10);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][11]) ClickInventorySlot(playerid, 11);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][12]) ClickInventorySlot(playerid, 12);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][13]) ClickInventorySlot(playerid, 13);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][14]) ClickInventorySlot(playerid, 14);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][15]) ClickInventorySlot(playerid, 15);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][16]) ClickInventorySlot(playerid, 16);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][17]) ClickInventorySlot(playerid, 17);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][18]) ClickInventorySlot(playerid, 18);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][19]) ClickInventorySlot(playerid, 19);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][20]) ClickInventorySlot(playerid, 20);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][21]) ClickInventorySlot(playerid, 21);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][38]) DropItemSlot(playerid);
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_INV][39]) UseItemSlot(playerid);
		return 1;
	}

    if (PLAYER_TEMP[playerid][py_PLAYER_IN_ATM])
    {
        if (playertextid == PlayerTextdraws[playerid][ptextdraw_BANK_MENU][3]) //depositar
        {
            HideBankMenu(playerid);
            ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
        }

        if (playertextid == PlayerTextdraws[playerid][ptextdraw_BANK_MENU][4]) //retirar
        {
            HideBankMenu(playerid);
            ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
        }

        if (playertextid == PlayerTextdraws[playerid][ptextdraw_BANK_MENU][5]) //transferir
        {
            HideBankMenu(playerid);
            ShowDialog(playerid, DIALOG_BANK_TRANSFER);
        }

        if (playertextid == PlayerTextdraws[playerid][ptextdraw_BANK_MENU][6]) //transacciones
        {
            HideBankMenu(playerid);
            ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
        }
        return 1;
    }

	if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL) return 0;

	if (PLAYER_TEMP[playerid][py_SHOP])
	{
		HidePlayerDialog(playerid);
		if (playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if (ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return ShowPlayerMessage(playerid, "~r~Debes ser nivel 2", 3);

					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_RED, "Aviso:"COL_WHITE" Estás enviando mensajes demasiado rápido.");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					new DBResult:Result, DB_Query[80], total_ads;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);

					if (db_num_rows(Result)) total_ads = db_get_field_int(Result, 0);
					db_free_result(Result);

					if (total_ads >= MAX_ADS_PER_PLAYER) return ShowPlayerMessage(playerid, "~r~No puedes publicar más de 4 anuncios, borra alguno.", 3);

					HidePlayerShop(playerid);
					ShowDialog(playerid, DIALOG_SHOP_ADD);
				}
			}
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					PLAYER_TEMP[playerid][py_SHOP_COME_FROM_MY_ADS] = true;
					PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][py_SHOP_COME_FROM_MY_ADS] = false;
					PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] ++;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if (playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP]);
					if (interval < 500) return SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
					PLAYER_TEMP[playerid][py_ANTIFLOOD_SHOP] = GetTickCount();

					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

					if (PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] --;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if (PLAYER_TEMP[playerid][py_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
    return 1;
}

CALLBACK: AddPlayerReputation(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if (ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
	{
		ACCOUNT_INFO[playerid][ac_REP] ++;

		if (ACCOUNT_INFO[playerid][ac_REP] >= neccessary_rep) NextLevel(playerid);

		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] ++;
		if (ACCOUNT_INFO[playerid][ac_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = 0;
		}


		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][py_TIME_PLAYING];
		PLAYER_TEMP[playerid][py_TIME_PLAYING] = gettime();
		new DB_Query[256];
		format(DB_Query, sizeof DB_Query,

			"\
				UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
			",
				ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
		);
		db_query(Database, DB_Query);

		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP] = gettime() * 1000;

		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][2]);
		PLAYER_TEMP[playerid][py_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][2]);
	return 0;
}

ResetGraffitiTextdraw()
{
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][1]);
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][3]);
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][4]);

	Textdraws[textdraw_GRAFFITI_PLUS][1] = TextDrawCreate(501.500000, 140.766708, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][1], 0.206498, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][1], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][1], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][1], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);

	Textdraws[textdraw_GRAFFITI_PLUS][3] = TextDrawCreate(501.500000, 156.322280, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][3], 0.206497, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][3], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][3], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][3], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][3], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);

	Textdraws[textdraw_GRAFFITI_PLUS][4] = TextDrawCreate(501.500000, 171.877853, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][4], 0.206497, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][4], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][4], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][4], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][4], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	return 1;
}

SetMarketTextdraw()
{
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][1]);
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][3]);
	TextDrawDestroy(Textdraws[textdraw_GRAFFITI_PLUS][4]);

	Textdraws[textdraw_GRAFFITI_PLUS][1] = TextDrawCreate(501.500000, 140.766708, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][1], 0.206498, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][1], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][1], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][1], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][1], 0);

	Textdraws[textdraw_GRAFFITI_PLUS][3] = TextDrawCreate(501.500000, 167.522293, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][3], 0.206497, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][3], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][3], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][3], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][3], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][3], 0);

	Textdraws[textdraw_GRAFFITI_PLUS][4] = TextDrawCreate(501.500000, 194.277877, "_");
	TextDrawLetterSize(Textdraws[textdraw_GRAFFITI_PLUS][4], 0.206497, 1.211886);
	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][4], 610.000000, 0.409999);
	TextDrawAlignment(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][4], -1);
	TextDrawUseBox(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][4], 0x000000EE);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GRAFFITI_PLUS][4], 0x000000EE);
	TextDrawFont(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_GRAFFITI_PLUS][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_GRAFFITI_PLUS][4], 0);
	return 1;
}

NextLevel(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if (ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep) return 0;
	GivePlayerCash(playerid, (ACCOUNT_INFO[playerid][ac_LEVEL] * 150));

	ACCOUNT_INFO[playerid][ac_REP] = 1;
	ACCOUNT_INFO[playerid][ac_LEVEL] ++;
	//UpdateReputationTextDraws(playerid);
	SetPlayerSkillLevels(playerid);

	SendClientMessageEx(playerid, COLOR_WHITE, ""COL_RED"¡Felicidades! "COL_WHITE"Has subido al nivel %d.", ACCOUNT_INFO[playerid][ac_LEVEL]);
	GameTextForPlayer(playerid, "SUBISTE DE NIVEL", 6000, 0);
	SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);

	ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP] = gettime() * 1000;


	ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][py_TIME_PLAYING];
	PLAYER_TEMP[playerid][py_TIME_PLAYING] = gettime();
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query,

		"\
			UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
		",
			ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][2]);
	PLAYER_TEMP[playerid][py_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
	return 1;
}

CMD:comprar(playerid, params[])
{
	CheckAndBuyProperty(playerid);
	return 1;
}

CMD:comprarnivjajael(playerid, params[])
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if (ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep) return ShowPlayerMessage(playerid, "~r~Aún no tienes la suficiente reputación para subir de nivel.", 3);
	if (ACCOUNT_INFO[playerid][ac_LEVEL] * 150 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para subir de nivel, te faltan {2AD2FF}%s$ "COL_WHITE"para poder comprarlo.", number_format_thousand((ACCOUNT_INFO[playerid][ac_LEVEL] * 150) - CHARACTER_INFO[playerid][ch_CASH]));
	GivePlayerCash(playerid, -(ACCOUNT_INFO[playerid][ac_LEVEL] * 150));

	ACCOUNT_INFO[playerid][ac_REP] = 1;
	ACCOUNT_INFO[playerid][ac_LEVEL] ++;
	//UpdateReputationTextDraws(playerid);
	SetPlayerSkillLevels(playerid);

	SendClientMessageEx(playerid, COLOR_WHITE, ""COL_RED"¡Felicidades! "COL_WHITE"Has subido al nivel %d.", ACCOUNT_INFO[playerid][ac_LEVEL]);
	ShowPlayerMessage(playerid, "~g~HAS SUBIDO A UN NUEVO NIVEL.", 3);
	SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);

	ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[playerid][py_TIME_PASSED_LAST_REP] = gettime() * 1000;


	ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][py_TIME_PLAYING];
	PLAYER_TEMP[playerid][py_TIME_PLAYING] = gettime();
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query,

		"\
			UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
		",
			ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][2]);
	PLAYER_TEMP[playerid][py_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
	return 1;
}

SetPlayerCash(playerid, ammount, bool:update = true)
{
	CHARACTER_INFO[playerid][ch_CASH] = ammount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);

	if (update)
	{
		new DB_Query[160];
		format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	return 1;
}

GivePlayerCash(playerid, ammount, bool:update = true)
{
	CHARACTER_INFO[playerid][ch_CASH] += ammount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);

	if (update)
	{
		new DB_Query[160];
		format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}

	SavePlayerSkills(playerid);
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		if (ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], COLOR_WHITE, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if (ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], COLOR_WHITE, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		format(label_str, sizeof(label_str), "{ffffff}%s", ENTER_EXIT[total_enterexits][ee_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xEAE9E900, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(19902, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] - 0.7, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(19902, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] - 0.7, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);

		total_enterexits ++;
	}

	printf("[debug] Lugares cargados: %d", total_enterexits);
	return 1;
}

LoadProperties()//cargado propiedes
{
	new DBResult:Result;
	Result = db_query(Database, "SELECT `PROPERTY`.*, `PROPERTY_INFO`.* FROM `PROPERTY`, `PROPERTY_INFO` WHERE `PROPERTY_INFO`.ID_PROPERTY = `PROPERTY`.ID;");

	new total_houses, total_houses_free, city[45], zone[45];
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if (total_houses >= MAX_PROPERTIES)
		{
			printf("[debug]  Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
			break;
		}

		PROPERTY_INFO[total_houses][property_VALID] = true;
		PROPERTY_INFO[total_houses][property_ID] = db_get_field_assoc_int(Result, "ID");

		PROPERTY_INFO[total_houses][property_EXT_X] = db_get_field_assoc_float(Result, "EXT_X");
		PROPERTY_INFO[total_houses][property_EXT_Y] = db_get_field_assoc_float(Result, "EXT_Y");
		PROPERTY_INFO[total_houses][property_EXT_Z] = db_get_field_assoc_float(Result, "EXT_Z");
		PROPERTY_INFO[total_houses][property_EXT_ANGLE] = db_get_field_assoc_float(Result, "EXT_ANGLE");
		PROPERTY_INFO[total_houses][property_EXT_INTERIOR] = db_get_field_assoc_int(Result, "EXT_INTERIOR");
		PROPERTY_INFO[total_houses][property_EXT_FREEZE] = db_get_field_assoc_int(Result, "EXT_FREEZE");
		PROPERTY_INFO[total_houses][property_ID_INTERIOR] = db_get_field_assoc_int(Result, "ID_INTERIOR");

		PROPERTY_INFO[total_houses][property_PRICE] = db_get_field_assoc_int(Result, "PRICE");
		PROPERTY_INFO[total_houses][property_PRICE_BASE] = PROPERTY_INFO[total_houses][property_PRICE];
		PROPERTY_INFO[total_houses][property_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		PROPERTY_INFO[total_houses][property_EXTRA] = db_get_field_assoc_int(Result, "EXTRA");
		PROPERTY_INFO[total_houses][property_VIP_LEVEL] = db_get_field_assoc_int(Result, "VIP_LEVEL");

		if (PROPERTY_INFO[total_houses][property_EXTRA]) PROPERTY_INFO[total_houses][property_PRICE] = 0;
		if (PROPERTY_INFO[total_houses][property_VIP_LEVEL]) PROPERTY_INFO[total_houses][property_LEVEL] = 1;

		new DBResult:Result_info_owner, DB_Query[600], owner[24], info[3], label_str[256], pickup_modelid;
		format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PROPERTY_OWNER`.`ID_USER`, `PROPERTY_OWNER`.`PROPERTY_NAME` FROM `CUENTA`, `PROPERTY_OWNER` WHERE `PROPERTY_OWNER`.`ID_PROPERTY` = '%d' AND `CUENTA`.`ID` = `PROPERTY_OWNER`.`ID_USER`;", PROPERTY_INFO[total_houses][property_ID]);
		Result_info_owner = db_query(Database, DB_Query);

		if (db_num_rows(Result_info_owner))
		{
			pickup_modelid = 1272;
			PROPERTY_INFO[total_houses][property_SOLD] = true;
			PROPERTY_INFO[total_houses][property_CREW] = false;
			db_get_field_assoc(Result_info_owner, "NAME", owner, 24);
			PROPERTY_INFO[total_houses][property_OWNER_ID] = db_get_field_assoc_int(Result_info_owner, "ID_USER");
			PROPERTY_INFO[total_houses][property_CREW_ID] = 0;
			db_get_field_assoc(Result_info_owner, "PROPERTY_NAME", PROPERTY_INFO[total_houses][property_NAME], 24);
			GetPointZone(PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], city, zone);

			format
			(
				label_str,
				sizeof label_str,
				""COL_WHITE"\
					Propiedad en %s (%d)\n\
					Propietario:{35A7FF} %s\n\
				", zone, PROPERTY_INFO[total_houses][property_ID], owner
			);
		}
		else
		{
			new DBResult:Result_info_crew, crew_name[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CREW`.`ID`, `CREW`.`NAME` FROM `PROPERTY_TERRITORY`, `CREW` WHERE `PROPERTY_TERRITORY`.`ID_PROPERTY` = '%d' AND `CREW`.`ID` = (SELECT `CREW_TERRITORIES`.`ID_CREW` FROM `CREW_TERRITORIES` WHERE `CREW_TERRITORIES`.`ID_TERRITORY` = `PROPERTY_TERRITORY`.`ID_TERRITORY`);", PROPERTY_INFO[total_houses][property_ID]);
			Result_info_crew = db_query(Database, DB_Query);

			if (db_num_rows(Result_info_crew))
			{
				pickup_modelid = 1272;
				PROPERTY_INFO[total_houses][property_SOLD] = true;
				PROPERTY_INFO[total_houses][property_CREW] = true;
				db_get_field_assoc(Result_info_crew, "NAME", crew_name, 24);
				PROPERTY_INFO[total_houses][property_CREW_ID] = db_get_field_assoc_int(Result_info_crew, "ID");
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				GetPointZone(PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], city, zone);
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[total_houses][property_ID]);

				format
				(
					label_str,
					sizeof label_str,
					""COL_WHITE"\
						Propiedad en %s (%d)\n\
						Banda: %s\n\
					", zone, PROPERTY_INFO[total_houses][property_ID], crew_name
				);
			}
			else
			{
				pickup_modelid = 1273;
				PROPERTY_INFO[total_houses][property_SOLD] = false;
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				GetPointZone(PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], city, zone);
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[total_houses][property_ID]);

				format(label_str, sizeof label_str, ""COL_WHITE"Propiedad en %s (%d)\n"COL_GREEN"En venta", zone, PROPERTY_INFO[total_houses][property_ID]);
				total_houses_free ++;
			}
			db_free_result(Result_info_crew);
		}
		db_free_result(Result_info_owner);


		PROPERTY_INFO[total_houses][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xF7F7F700, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z], 0, PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_INT_PICKUP_ID] = CreateDynamicPickup(19902, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[total_houses][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_INTERIOR]);


		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		TOTAL_PROPERTIES_LOADED ++;
		total_houses ++;
		db_next_row(Result);
	}
	db_free_result(Result);

    printf("[debug] Propiedades libres: %d.", total_houses_free);
	printf("[debug] Propiedades totales: %d.", total_houses);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if (CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

RecalculeCrewGraffitis(crew_id)
{
	new DBResult:Result, DB_Query[140];

	format(DB_Query, sizeof DB_Query, "SELECT * FROM `GRAFFITIS` WHERE `ID_CREW` = '%d'", CREW_INFO[crew_id][crew_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result) == 0) CREW_INFO[crew_id][crew_GRAFFITIS_COUNT] = 0;
	else
	{
		CREW_INFO[crew_id][crew_GRAFFITIS_COUNT] = db_num_rows(Result);
	}
	return 1;
}

RecalculeCrewMarkets(crew_id)
{
	new DBResult:Result, DB_Query[140];

	format(DB_Query, sizeof DB_Query, "SELECT * FROM `BLACK_MARKETS` WHERE `ID_CREW` = '%d'", CREW_INFO[crew_id][crew_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result) == 0) CREW_INFO[crew_id][crew_MARKET_COUNT] = 0;
	else
	{
		CREW_INFO[crew_id][crew_MARKET_COUNT] = db_num_rows(Result);
	}
	return 1;
}

LoadCrews()
{
	new DBResult:Result, DB_Query[140];
	Result = db_query(Database, "SELECT * FROM `CREW`;");

	new total_crews;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if (total_crews >= MAX_CREWS)
		{
			printf("[debug]  Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
			break;
		}

		CREW_INFO[total_crews][crew_VALID] = true;
		CREW_INFO[total_crews][crew_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", CREW_INFO[total_crews][crew_NAME], 32);
		db_get_field_assoc(Result, "DESC", CREW_INFO[total_crews][crew_DESCRIPTION], 32);
		CREW_INFO[total_crews][crew_COLOR] = db_get_field_assoc_int(Result, "COLOR");
		CREW_INFO[total_crews][crew_GRAFFITIS_COUNT] = db_get_field_assoc_int(Result, "GRAFFITIS_COUNT");
		CREW_INFO[total_crews][crew_MARKET_COUNT] = db_get_field_assoc_int(Result, "MARKETS_COUNT");
		CREW_INFO[total_crews][crew_ONLINE_MEMBERS] = 0;

		if (CREW_INFO[total_crews][crew_GRAFFITIS_COUNT] < 0)
		{
			CREW_INFO[total_crews][crew_GRAFFITIS_COUNT] = 0;
		}

		if (CREW_INFO[total_crews][crew_GRAFFITIS_COUNT] > 54)
		{
			CREW_INFO[total_crews][crew_GRAFFITIS_COUNT] = 0;
		}

		if (CREW_INFO[total_crews][crew_MARKET_COUNT] < 0)
		{
			CREW_INFO[total_crews][crew_MARKET_COUNT] = 0;
		}

		if (CREW_INFO[total_crews][crew_MARKET_COUNT] > 3)
		{
			CREW_INFO[total_crews][crew_MARKET_COUNT] = 0;
		}

		RecalculeCrewGraffitis(total_crews);
		RecalculeCrewMarkets(total_crews);

		new DBResult:Result_members;
		format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[total_crews][crew_ID]);
		Result_members = db_query(Database, DB_Query);

		if (db_num_rows(Result_members)) CREW_INFO[total_crews][crew_MEMBERS] = db_get_field_int(Result_members, 0);
		db_free_result(Result_members);


		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query, "SELECT * FROM `CREW_RANKS` WHERE `ID_CREW` = '%d' LIMIT %d;", CREW_INFO[total_crews][crew_ID], MAX_CREW_RANKS);
		Result_ranks = db_query(Database, DB_Query);
		for(new x = 0; x < db_num_rows(Result_ranks); x ++)
		{
			new pos = db_get_field_assoc_int(Result_ranks, "RANK_POS");
			if (pos < 0 || pos > MAX_CREW_RANKS) continue;

			CREW_RANK_INFO[total_crews][pos][crew_rank_VALID] = true;
			CREW_RANK_INFO[total_crews][pos][crew_rank_ID] = db_get_field_assoc_int(Result_ranks, "ID");
			db_get_field_assoc(Result_ranks, "RANK_NAME", CREW_RANK_INFO[total_crews][pos][crew_rank_NAME], 32);

			new DBResult:Result_ranks_permissions;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `RANK_PERMISSIONS` WHERE `ID_RANK` = '%d' LIMIT %d;", CREW_RANK_INFO[total_crews][pos][crew_rank_ID], CREW_RANK_SIZE);
			Result_ranks_permissions = db_query(Database, DB_Query);
			for(new z = 0; z < db_num_rows(Result_ranks_permissions); z ++)
			{
				new permission = db_get_field_assoc_int(Result_ranks_permissions, "PERMISSION");
				if (permission < 0 || permission > CREW_RANK_SIZE) continue;

				CREW_RANK_INFO[total_crews][pos][crew_rank_PERMISSION][permission] = db_get_field_assoc_int(Result_ranks_permissions, "SET");
				db_next_row(Result_ranks_permissions);
			}
			db_free_result(Result_ranks_permissions);
			db_next_row(Result_ranks);
		}
		db_free_result(Result_ranks);

		total_crews ++;
		db_next_row(Result);
	}

	printf("[debug] Bandas cargadas: %d", total_crews);
	db_free_result(Result);
	return 1;
}

LoadGangZones()
{
	new DBResult:Result, DB_Query[320];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `SA_ZONES` WHERE `GANG_ZONE` = '1' LIMIT %d;", MAX_TERRITORIES);
	Result = db_query(Database, DB_Query);

	new total_territories;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if (total_territories >= MAX_TERRITORIES)
		{
			printf("[debug]  Límite superado en array 'TERRITORIES' al intentar cargar de la base de datos.");
			break;
		}

		TERRITORIES[total_territories][territory_VALID] = true;
		TERRITORIES[total_territories][territory_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", TERRITORIES[total_territories][territory_NAME], 32);
		TERRITORIES[total_territories][territory_MIN_X] = db_get_field_assoc_float(Result, "MIN_X");
		TERRITORIES[total_territories][territory_MIN_Y] = db_get_field_assoc_float(Result, "MIN_Y");
		TERRITORIES[total_territories][territory_MIN_Z] = db_get_field_assoc_float(Result, "MIN_Z");
		TERRITORIES[total_territories][territory_MAX_X] = db_get_field_assoc_float(Result, "MAX_X");
		TERRITORIES[total_territories][territory_MAX_Y] = db_get_field_assoc_float(Result, "MAX_Y");
		TERRITORIES[total_territories][territory_MAX_Z] = db_get_field_assoc_float(Result, "MAX_Z");
		TERRITORIES[total_territories][territory_WAR] = false;
		TERRITORIES[total_territories][territory_ATTACKER_CREW_INDEX] = 0;

		new DBResult:Result_territory_crew;
		format(DB_Query, sizeof DB_Query, "SELECT `CREW_TERRITORIES`.`ID_CREW`, `CREW`.`COLOR` FROM `CREW_TERRITORIES`, `CREW` WHERE `ID_TERRITORY` = '%d' AND `CREW`.`ID` = `CREW_TERRITORIES`.`ID_CREW`;", TERRITORIES[total_territories][territory_ID]);
		Result_territory_crew = db_query(Database, DB_Query);
		if (db_num_rows(Result_territory_crew))
		{
			TERRITORIES[total_territories][territory_OCCUPIED] = true;
			TERRITORIES[total_territories][territory_CREW_ID] = db_get_field_assoc_int(Result_territory_crew, "ID_CREW");
			new gang_color = db_get_field_assoc_int(Result_territory_crew, "COLOR");

			new r, g, b, a;
			hy_HexToRGBA(gang_color, r, g, b, a);
			TERRITORIES[total_territories][territory_COLOR] = hy_RGBAToHex(r, g, b, 135);

			for(new x = 0; x != MAX_CREWS; x ++)
			{
				if (!CREW_INFO[x][crew_VALID]) continue;

				if (CREW_INFO[x][crew_ID] == TERRITORIES[total_territories][territory_CREW_ID])
				{
					TERRITORIES[total_territories][territory_CREW_INDEX] = x;
					break;
				}
			}
		}
		else
		{
			TERRITORIES[total_territories][territory_OCCUPIED] = false;
			TERRITORIES[total_territories][territory_CREW_ID] = 0;
			TERRITORIES[total_territories][territory_CREW_INDEX] = 0;
			TERRITORIES[total_territories][territory_COLOR] = 0xCCCCCC55;
		}
		db_free_result(Result_territory_crew);


		TERRITORIES[total_territories][territory_AREA] =  CreateDynamicCube
															(
																TERRITORIES[total_territories][territory_MIN_X],
																TERRITORIES[total_territories][territory_MIN_Y],
																TERRITORIES[total_territories][territory_MIN_Z],
																TERRITORIES[total_territories][territory_MAX_X],
																TERRITORIES[total_territories][territory_MAX_Y],
																TERRITORIES[total_territories][territory_MAX_Z],
																0, 0
															);

		new info[2];
		info[0] = AREA_TYPE_GANGZONE;
		info[1] = total_territories;
		Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIES[total_territories][territory_AREA], E_STREAMER_EXTRA_ID, info);


		TERRITORIES[total_territories][territory_GANG_ZONE] =  GangZoneCreate
																(
																	TERRITORIES[total_territories][territory_MIN_X],
																	TERRITORIES[total_territories][territory_MIN_Y],
																	TERRITORIES[total_territories][territory_MAX_X],
																	TERRITORIES[total_territories][territory_MAX_Y]
																);

		TERRITORIES[total_territories][territory_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Progreso de conquista:_0");
		TextDrawLetterSize(TERRITORIES[total_territories][territory_TEXTDRAW], 0.286000, 1.276444);
		TextDrawAlignment(TERRITORIES[total_territories][territory_TEXTDRAW], 2);
		TextDrawColor(TERRITORIES[total_territories][territory_TEXTDRAW], -76);
		TextDrawSetShadow(TERRITORIES[total_territories][territory_TEXTDRAW], 0);
		TextDrawSetOutline(TERRITORIES[total_territories][territory_TEXTDRAW], 0);
		TextDrawBackgroundColor(TERRITORIES[total_territories][territory_TEXTDRAW], 255);
		TextDrawFont(TERRITORIES[total_territories][territory_TEXTDRAW], 1);
		TextDrawSetProportional(TERRITORIES[total_territories][territory_TEXTDRAW], 1);
		TextDrawSetShadow(TERRITORIES[total_territories][territory_TEXTDRAW], 0);

		total_territories ++;
		db_next_row(Result);
	}

	printf("[debug] Territorios totales: %d", total_territories);
	db_free_result(Result);
	return 1;
}

LoadBlackMarkets()
{
	for(new i = 0; i < sizeof BLACK_MARKET_OBJ; i ++)
	{
		new DB_Query[140],
			DBResult:Result,
			str_text[128];

		format(DB_Query, sizeof DB_Query, "SELECT * FROM `BLACK_MARKETS` WHERE `MARKET_ID` = '%d'", i);
		Result = db_query(Database, DB_Query);
				
		new crew_id = getCrewIndexWithId(db_get_field_assoc_int(Result, "ID_CREW"));
		if (CREW_INFO[crew_id][crew_VALID])
		{
			format(str_text, sizeof(str_text), "\n"COL_WHITE"Dominado por: {%06x}%s",  CREW_INFO[crew_id][crew_COLOR] >>> 8, CREW_INFO[crew_id][crew_NAME]);
		}
		else
		{
			format(str_text, sizeof(str_text), "\n"COL_WHITE"Dominado por: Nadie");
		}

		BLACK_MARKET_OBJ[i][bm_LABEL] = CreateDynamic3DTextLabel(str_text, 0xF7F7F700, BLACK_MARKET_OBJ[i][bm_EXTERIOR_X], BLACK_MARKET_OBJ[i][bm_EXTERIOR_Y], BLACK_MARKET_OBJ[i][bm_EXTERIOR_Z] + 0.25, 20.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	printf("OnPlayerPickUpDynamicPickup %d %d",playerid, pickupid); // debug juju
    PLAYER_TEMP[playerid][py_LAST_PICKUP_ID] = pickupid;
    return 1;
}

SendGraffitiNotification(const ann[])
{
	KillTimer(GraffitiGlobalTime);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if (IsPlayerConnected(i))
        {
        	if (PLAYER_CREW[i][player_crew_VALID])
			{
                ShowPlayerNotification(i, ann, 6);
                RecalculeCrewGraffitis(PLAYER_CREW[i][player_crew_INDEX]);
            }
        }
    }
    return 1;
}

CheckMarketProgress(playerid)
{
	if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_PROGRESS] > 98)
	{
		new str_text[128];

		ClearAnimations(playerid);
		ShowPlayerMessage(playerid, "Conquistando...~n~~r~100 %", 2);

		for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
		{
			if (IsPlayerConnected(x))
			{
				if (PLAYER_CREW[x][player_crew_VALID])
				{
					CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_MARKET_PROGRESS] = 0;
					CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_IN_GRAFFITI] = false;
				}

				TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][0]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][1]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][2]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][3]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][4]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][5]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][6]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][7]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][8]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][9]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][10]);

				KillTimer(PLAYER_TEMP[x][py_TIMERS][41]);
				PLAYER_TEMP[x][py_IN_MARKET] = false;
				RemovePlayerMapIcon(x, 0);
			}
		}

		for(new i = 0; i < sizeof BLACK_MARKET_OBJ; i ++)
		{
			if (BLACK_MARKET_OBJ[i][bm_ACTIVATED] == true)
			{
				BLACK_MARKET_OBJ[i][bm_ACTIVATED] = false;
				//TextDrawColor(Textdraws[textdraw_GRAFFITI][0], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				format(str_text, sizeof(str_text), "%s ahora domina el mercado de %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], BLACK_MARKET_OBJ[i][bm_ZONE_NAME]);
				SendGraffitiNotification(str_text);
				SendDiscordWebhook(str_text, 3);

				new str[145]; format(str, 145, "[MERCADO] %s ha ganado el mercado en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], BLACK_MARKET_OBJ[i][bm_ZONE_NAME]);
    			SendMessageToAdmins(COLOR_ANTICHEAT, str);

    			format(str_text, sizeof(str_text), "\n"COL_WHITE"Dominado por: {%06x}%s",  CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
    			UpdateDynamic3DTextLabelText(BLACK_MARKET_OBJ[i][bm_LABEL], 0xF7F7F700, str_text);

				new DB_Query[140];

				/* UPDATE OLD CREW DATE */
				new DBResult:Result;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BLACK_MARKETS` WHERE `MARKET_ID` = '%d'", i);
				Result = db_query(Database, DB_Query);
				
				new crew_id = db_get_field_assoc_int(Result, "ID_CREW");

				new tmp_old = (CREW_INFO[getCrewIndexWithId(crew_id)][crew_MARKET_COUNT] - 1);
				CREW_INFO[getCrewIndexWithId(crew_id)][crew_MARKET_COUNT] = tmp_old;
				if (tmp_old < 0) tmp_old = 0;

				if (CREW_INFO[getCrewIndexWithId(crew_id)][crew_VALID])
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `MARKETS_COUNT` = '%d' WHERE `ID` = '%d';", tmp_old, getCrewIndexWithId(crew_id));
					db_query(Database, DB_Query);
				}

				/* UPDATE NEW CREW DATE */
				new tmp_new = (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT] + 1);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT] = tmp_new;

				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `MARKETS_COUNT` = '%d' WHERE `ID` = '%d';", tmp_new, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				/* UPDATE GRAFFITI DATE */
				format(DB_Query, sizeof DB_Query, "UPDATE `BLACK_MARKETS` SET `MARKET_ID` = '%d', `ID_CREW` = '%i', `LAST_START` = '%i' WHERE `MARKET_ID` = '%d';", i, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID], gettime(), i);
				db_query(Database, DB_Query);

				/* RESET OTHER CREW's */
				BLACK_MARKET_OBJ[i][bm_CREW_ONE] = 0;
				BLACK_MARKET_OBJ[i][bm_CREW_TWO] = 0;
				BLACK_MARKET_OBJ[i][bm_CREW_THREE] = 0;
			}
		}
	}
	return 1;
}

CheckGraffitiProgress(playerid)
{
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if (IsPlayerConnected(x))
		{
			if (PLAYER_TEMP[playerid][py_DEBUG])
			{
				SendClientMessageEx(playerid, -1, "[%d] %s (%i) - %s (%d): %d", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], PLAYER_TEMP[playerid][py_NAME], playerid, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], PLAYER_CREW[playerid][player_crew_INDEX], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			}
		}
	}

	if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] > 98)
	{
		new CrewColorGraffiti_ARGB = hy_RGBAToARGB(getPlayerCrewColor(playerid));
		new str_text[128];

		for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
		{
			if (IsPlayerConnected(x))
			{
				if (PLAYER_CREW[x][player_crew_VALID])
				{
					CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] = 0;
					CREW_INFO[ PLAYER_CREW[x][player_crew_INDEX] ][crew_IN_GRAFFITI] = false;
				}

				TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][0]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][1]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][2]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][3]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][4]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][5]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][6]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][7]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][8]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][9]);
                TextDrawHideForPlayer(x, Textdraws[textdraw_GRAFFITI_PLUS][10]);

				KillTimer(PLAYER_TEMP[x][py_TIMERS][41]);
				PLAYER_TEMP[x][py_IN_MARKET] = false;
				RemovePlayerMapIcon(x, 0);
			}
		}

		for(new i = 0; i < sizeof GRAFFITIS_OBJ; i ++)
		{
			if (GRAFFITIS_OBJ[i][g_ACTIVATED] == true)
			{
				GRAFFITIS_OBJ[i][g_ACTIVATED] = false;
				KillTimer(GraffitiCancelTimer);
				SetTimer("FirstGraffitiAnnounce", 1500000, false);

				format(str_text, sizeof(str_text), "%s ha ganado el graffiti en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], GRAFFITIS_OBJ[i][g_ZONE_NAME]);
				SendGraffitiNotification(str_text);
				SendDiscordWebhook(str_text, 2);

				new str[145]; format(str, 145, "[GRAFFITI] %s ha ganado el graffiti en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], GRAFFITIS_OBJ[i][g_ZONE_NAME]);
    			SendMessageToAdmins(COLOR_ANTICHEAT, str);

				SetDynamicObjectMaterialText(GRAFFITIS_OBJ[i][g_ID], 0, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[i][g_FONT], 60, 0, CrewColorGraffiti_ARGB, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

				new DB_Query[140];

				/* UPDATE OLD CREW DATE */
				new DBResult:Result;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `GRAFFITIS` WHERE `GRAFF_ID` = '%d'", i);
				Result = db_query(Database, DB_Query);
				
				new crew_id = db_get_field_assoc_int(Result, "ID_CREW");

				new tmp_old = (CREW_INFO[getCrewIndexWithId(crew_id)][crew_GRAFFITIS_COUNT] - 1);
				if (tmp_old < 0) tmp_old = 0;


				CREW_INFO[getCrewIndexWithId(crew_id)][crew_GRAFFITIS_COUNT] = tmp_old;

				if (CREW_INFO[getCrewIndexWithId(crew_id)][crew_VALID])
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `GRAFFITIS_COUNT` = '%d' WHERE `ID` = '%d';", tmp_old, getCrewIndexWithId(crew_id));
					db_query(Database, DB_Query);
				}

				/* UPDATE NEW CREW DATE */
				new tmp_new = (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT] + 1);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT] = tmp_new;

				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `GRAFFITIS_COUNT` = '%d' WHERE `ID` = '%d';", tmp_new, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				/* UPDATE GRAFFITI DATE */
				format(DB_Query, sizeof DB_Query, "UPDATE `GRAFFITIS` SET `GRAFF_ID` = '%d', `ID_CREW` = '%i' WHERE `GRAFF_ID` = '%d';", i, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID], i);
				db_query(Database, DB_Query);

				/* RESET OTHER CREW's */
				GRAFFITIS_OBJ[i][g_CREW_ONE] = 0;
				GRAFFITIS_OBJ[i][g_CREW_TWO] = 0;
				GRAFFITIS_OBJ[i][g_CREW_THREE] = 0;

				if (GRAFFITIS_OBJ[i][g_OBJ_CREW_ONE] != INVALID_STREAMER_ID) DestroyDynamicObject(GRAFFITIS_OBJ[i][g_OBJ_CREW_ONE]);
				if (GRAFFITIS_OBJ[i][g_OBJ_CREW_TWO] != INVALID_STREAMER_ID) DestroyDynamicObject(GRAFFITIS_OBJ[i][g_OBJ_CREW_TWO]);
				if (GRAFFITIS_OBJ[i][g_OBJ_CREW_THREE] != INVALID_STREAMER_ID) DestroyDynamicObject(GRAFFITIS_OBJ[i][g_OBJ_CREW_THREE]);
			}
		}
	}
	return 1;
}

CALLBACK: UpdateGraffitiProgress(playerid)
{
	if (IsPlayerPaused(playerid)) return 1;

	//Strings
	new crew_one[64],
		crew_two[64],
		crew_three[64],
		symbol[2] = "%";

	for(new x = 0; x < sizeof GRAFFITIS_OBJ; x ++)
	{
		if (GRAFFITIS_OBJ[x][g_ACTIVATED] == true)
		{
			//Give crew text slot
			if (GRAFFITIS_OBJ[x][g_CREW_ONE] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] == false)
				{
					GRAFFITIS_OBJ[x][g_CREW_ONE] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] = true;

					new CrewColorGraffiti_ARGB = hy_RGBAToARGB(getPlayerCrewColor(playerid));
					GRAFFITIS_OBJ[x][g_OBJ_CREW_ONE] = CreateDynamicObject(GRAFFITIS_OBJ[x][g_MODELID], GRAFFITIS_OBJ[x][g_X], GRAFFITIS_OBJ[x][g_Y], GRAFFITIS_OBJ[x][g_Z], GRAFFITIS_OBJ[x][g_RX], GRAFFITIS_OBJ[x][g_RY], GRAFFITIS_OBJ[x][g_RZ], 0, 0);
					SetDynamicObjectMaterialText(GRAFFITIS_OBJ[x][g_OBJ_CREW_ONE], 0, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[x][g_FONT], 60, 0, CrewColorGraffiti_ARGB, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

					format(crew_one, sizeof(crew_one), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], crew_one);
				}
			}

			if (GRAFFITIS_OBJ[x][g_CREW_TWO] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] == false)
				{
					GRAFFITIS_OBJ[x][g_CREW_TWO] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] = true;

					new CrewColorGraffiti_ARGB = hy_RGBAToARGB(getPlayerCrewColor(playerid));
					GRAFFITIS_OBJ[x][g_OBJ_CREW_TWO] = CreateDynamicObject(GRAFFITIS_OBJ[x][g_MODELID], GRAFFITIS_OBJ[x][g_X], GRAFFITIS_OBJ[x][g_Y], GRAFFITIS_OBJ[x][g_Z], GRAFFITIS_OBJ[x][g_RX], GRAFFITIS_OBJ[x][g_RY], GRAFFITIS_OBJ[x][g_RZ], 0, 0);
					SetDynamicObjectMaterialText(GRAFFITIS_OBJ[x][g_OBJ_CREW_TWO], 0, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[x][g_FONT], 60, 0, CrewColorGraffiti_ARGB, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

					format(crew_two, sizeof(crew_two), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][3], crew_two);
				}
			}

			if (GRAFFITIS_OBJ[x][g_CREW_THREE] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] == false)
				{
					GRAFFITIS_OBJ[x][g_CREW_THREE] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_GRAFFITI] = true;

					new CrewColorGraffiti_ARGB = hy_RGBAToARGB(getPlayerCrewColor(playerid));
					GRAFFITIS_OBJ[x][g_OBJ_CREW_THREE] = CreateDynamicObject(GRAFFITIS_OBJ[x][g_MODELID], GRAFFITIS_OBJ[x][g_X], GRAFFITIS_OBJ[x][g_Y], GRAFFITIS_OBJ[x][g_Z], GRAFFITIS_OBJ[x][g_RX], GRAFFITIS_OBJ[x][g_RY], GRAFFITIS_OBJ[x][g_RZ], 0, 0);
					SetDynamicObjectMaterialText(GRAFFITIS_OBJ[x][g_OBJ_CREW_THREE], 0, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], OBJECT_MATERIAL_SIZE_512x64, GRAFFITIS_OBJ[x][g_FONT], 60, 0, CrewColorGraffiti_ARGB, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

					format(crew_three, sizeof(crew_three), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][4], crew_three);
				}
			}

			//Check initial crew text slot
			if (GRAFFITIS_OBJ[x][g_CREW_ONE] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				format(crew_one, sizeof(crew_one), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], crew_one);
			}

			if (GRAFFITIS_OBJ[x][g_CREW_TWO] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][3], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				
				format(crew_two, sizeof(crew_two), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][3], crew_two);
			}

			if (GRAFFITIS_OBJ[x][g_CREW_THREE] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][4], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				
				format(crew_three, sizeof(crew_three), "%s %d %s", TextToSpanish(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]), CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITI_PROGRESS], symbol);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][4], crew_three);
			}

			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if (IsPlayerConnected(i))
				{
					if (PLAYER_CREW[i][player_crew_VALID])
					{
						TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][0]);

						if (GRAFFITIS_OBJ[x][g_CREW_ONE] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][1]);
						}

						if (GRAFFITIS_OBJ[x][g_CREW_TWO] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][3]);
						}

						if (GRAFFITIS_OBJ[x][g_CREW_THREE] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][4]);
						}

						TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][2]);
					}
				}
			}
		}
	}
    
	CheckGraffitiProgress(playerid);
    return 1;
}

UpdateSizeBarMarket(crew_index, init)
{
	new Float:size = 502.0 + (floatround(CREW_INFO[crew_index][crew_MARKET_PROGRESS]) + 5.0),
		td_bg = init,
		td_bar = (init + 1);

	TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][td_bar], 606.000000, 0.000000);

	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][td_bg], AdjustDarkness(CREW_INFO[crew_index][crew_COLOR], 1.75));
	TextDrawBoxColor(Textdraws[textdraw_GRAFFITI_PLUS][td_bar], CREW_INFO[crew_index][crew_COLOR]);

	if (size < 606.0)
	{
		TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][td_bar], size, 0.000000);
	}
	else
	{
		TextDrawTextSize(Textdraws[textdraw_GRAFFITI_PLUS][td_bar], 606.000000, 0.000000);
	}
	return 1;
}

CALLBACK: UpdateMarketProgress(playerid)
{
	if (IsPlayerPaused(playerid)) return 1;

	//Strings
	new crew_one[64],
		crew_two[64],
		crew_three[64],
		player_str[128];

	for(new x = 0; x < sizeof BLACK_MARKET_OBJ; x ++)
	{
		if (BLACK_MARKET_OBJ[x][bm_ACTIVATED] == true)
		{
			//Give crew text slot
			if (BLACK_MARKET_OBJ[x][bm_CREW_ONE] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] == false)
				{
					BLACK_MARKET_OBJ[x][bm_CREW_ONE] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] = true;

					format(crew_one, sizeof(crew_one), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], crew_one);
					UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 5);
				}
			}

			if (BLACK_MARKET_OBJ[x][bm_CREW_TWO] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] == false)
				{
					BLACK_MARKET_OBJ[x][bm_CREW_TWO] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] = true;

					format(crew_two, sizeof(crew_two), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][3], crew_two);
					UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 7);
				}
			}

			if (BLACK_MARKET_OBJ[x][bm_CREW_THREE] == 0)
			{
				if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] == false)
				{
					BLACK_MARKET_OBJ[x][bm_CREW_THREE] = CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID];
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_IN_MARKET] = true;

					format(crew_three, sizeof(crew_three), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
					TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][4], crew_three);
					UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 9);
				}
			}

			//Check initial crew text slot
			if (BLACK_MARKET_OBJ[x][bm_CREW_ONE] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][1], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				
				format(crew_one, sizeof(crew_one), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][1], crew_one);
				UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 5);
			}

			if (BLACK_MARKET_OBJ[x][bm_CREW_TWO] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][3], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				
				format(crew_two, sizeof(crew_two), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][3], crew_two);
				UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 7);
			}

			if (BLACK_MARKET_OBJ[x][bm_CREW_THREE] == CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID])
			{
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_PROGRESS] ++;

				TextDrawColor(Textdraws[textdraw_GRAFFITI_PLUS][4], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR]);
				
				format(crew_three, sizeof(crew_three), "%s~n~ _", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				TextDrawSetString(Textdraws[textdraw_GRAFFITI_PLUS][4], crew_three);
				UpdateSizeBarMarket(PLAYER_CREW[playerid][player_crew_INDEX], 9);
			}

			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if (IsPlayerConnected(i))
				{
					if (PLAYER_CREW[i][player_crew_VALID])
					{
						TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][0]);

						if (BLACK_MARKET_OBJ[x][bm_CREW_ONE] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][1]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][5]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][6]);
						}

						if (BLACK_MARKET_OBJ[x][bm_CREW_TWO] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][3]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][7]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][8]);
						}

						if (BLACK_MARKET_OBJ[x][bm_CREW_THREE] > 0)
						{
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][4]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][9]);
							TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][10]);
						}

						TextDrawShowForPlayer(i, Textdraws[textdraw_GRAFFITI_PLUS][2]);
					}
				}
			}
		}
	}

	ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_NOD", 4.1, true, false, false, false, 0, false);
	format(player_str, sizeof(player_str), "Conquistando...~n~~r~%d %", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_PROGRESS]);
	ShowPlayerMessage(playerid, player_str, 3);
	CheckMarketProgress(playerid);
    return 1;
}

CMD:dropitem(playerid, params[])
{
	new type, ammount;
	if (sscanf(params, "dd", type, ammount)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /dropitem <tipo> <cantidad>");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0, 1000);
	CreateDropItem(GetItemObjectByType(type), pos[0], pos[1], pos[2] - 1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetItemNameByType(type), PLAYER_TEMP[playerid][py_NAME], type, ammount);
	return 1;
}

CALLBACK: UpdateEasing(playerid)
{
	initial_ease_pos = initial_ease_pos * 1.7;

	printf("%f", initial_ease_pos);
	PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE]);

	PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE] = CreatePlayerTextDraw(playerid, initial_ease_pos, 166.977783, "Hola vengo a mostrar mi easing JOJO bueno chau");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 0.341500, 1.487998);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 193.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 731);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE]);

	if (initial_ease_pos > 181.0)
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][44]);
	}
	return 1;
}

CMD:testeasing(playerid, params[])
{
	initial_ease_pos = 0.500000;
	PLAYER_TEMP[playerid][py_TIMERS][44] = SetTimerEx("UpdateEasing", 50, true, "i", playerid);
	return 1;
}

CMD:enablefps(playerid, params[])
{
	SetFirstPerson(playerid, true);
	return 1;
}

CMD:disablefps(playerid, params[])
{
	SetFirstPerson(playerid, false);
	return 1;
}

CMD:testexit(playerid, params[])
{
	ExitSite(playerid);
	return 1;
}

CMD:testbaul(playerid)
{
	ShowSecondaryInventory(playerid);
	return 1;
}

CMD:testphone(playerid, params[])
{
	ShowPhone(playerid);
	return 1;
}

CMD:testno(playerid, params[])
{
	ShowPlayerNotification(playerid, "Testttt", 5);
	PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	return 1;
}

CMD:testno1(playerid, params[])
{
	ShowPlayerNotification(playerid, TextToSpanish("Masoquismo: Conducta sexual en la que se obtiene la excitación y la satisfacción sexual a través del propio dolor físico o psíquico, la humillación, la dominación y el sometimiento."), 4);
	return 1;
}

CMD:testno2(playerid, params[])
{
	ShowPlayerNotification(playerid, "~r~Encarcelado~n~~w~5:40 minutos", 5);
	return 1;
}

CMD:testno3(playerid, params[])
{
	ShowPlayerNotification(playerid, "Hola bienvenido yahir kozel a hyaxe", 5);
	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

CMD:gift(playerid, params[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				GivePlayerCash(i, 10000, false);
				ShowPlayerMessage(i, "~r~[REGALO]~w~ Te han dado 10.000$", 4);
			}
		}
	}
	return 1;
}

CMD:giftvip(playerid, params[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (ACCOUNT_INFO[i][ac_SU])
			{
				GivePlayerCash(i, 10000, false);
				ShowPlayerMessage(i, "~r~[REGALO PARA VIPS]~w~ Te han dado 10.000$", 4);
			}
		}
	}
	return 1;
}

CMD:setpd(playerid, params[])
{
	new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setpd <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

    PlayerPayday(to_player);
	SendCmdLogToAdmins(playerid, "setpd", params);
	return 1;
}

CMD:notificaciones(playerid, params[])
{
	ShowDialog(playerid, DIALOG_USER_NOTIFICATIONS);
	return 1;
}
alias:notificaciones("not");

CMD:addcode(playerid, params[])
{
	new code[24],
		type,
		extra;

	if (sscanf(params, "s[24]dd", code, type, extra)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /addcode <code> <type> <extra>");

	new DB_Query[160];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `GIFTS_CODES`\
			(\
				`CODE`, `TYPE`, `EXTRA`, `USED`\
			)\
			VALUES\
			(\
				'%s', '%i', '%d', '0'\
			);\
		",
		code,
		type,
		extra
	);
	db_query(Database, DB_Query);

	SendClientMessageEx(playerid, COLOR_WHITE, "Nuevo gift code agregado: %s (type: %d, extra: %d)", code, type, extra);
	return 1;
}

CMD:canjear(playerid, params[])
{
	ShowDialog(playerid, DIALOG_GIFT);
	return 1;
}
alias:canjear("code", "giftcode");

CMD:pnot(playerid, params[])
{
	new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pnot <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	new dialog[2675];

	new DBResult:Result, DB_Query[140];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `PLAYER_NOTIFICATIONS` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT 40;", ACCOUNT_INFO[to_player][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result) == 0) strcat(dialog, ""COL_WHITE"No hay notificaciones.");
	else
	{
		for(new i; i < db_num_rows(Result); i++ )
		{
			new 
				line_str[125],
				message[264],
				date;

			date = db_get_field_assoc_int(Result, "DATE");
			db_get_field_assoc(Result, "MESSAGE", message, 264);

			format(line_str, sizeof line_str, ""COL_WHITE"%s\t%s\n", message, ReturnTimelapse(date, gettime()));
			strcat(dialog, line_str);

			db_next_row(Result);
		}
		db_free_result(Result);
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST, ""COL_RED"Notificaciones", dialog, "Cerrar", "");
	SendCmdLogToAdmins(playerid, "pnot", params);
	return 1;
}

CheckMarketAttack(playerid)
{
	if (PLAYER_CREW[playerid][player_crew_VALID])
	{
		if (!PLAYER_WORKS[playerid][WORK_POLICE])
		{
			for(new i = 0; i < sizeof BLACK_MARKET_OBJ; i ++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 1.5, BLACK_MARKET_OBJ[i][bm_EXTERIOR_X], BLACK_MARKET_OBJ[i][bm_EXTERIOR_Y], BLACK_MARKET_OBJ[i][bm_EXTERIOR_Z]))
				{
					if (GetPlayerInterior(playerid) == 0)
					{
						if (BLACK_MARKET_OBJ[i][bm_ACTIVATED] == true)
						{
							if (PLAYER_TEMP[playerid][py_IN_MARKET] == true) return 0;

							PLAYER_TEMP[playerid][py_IN_MARKET] = true;
							ShowPlayerMessage(playerid, "Conquistando...~n~~r~0 %", 3);
							ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_NOD", 4.1, true, false, false, false, 0, false);
							PLAYER_TEMP[playerid][py_TIMERS][41] = SetTimerEx("UpdateMarketProgress", 1500, 1, "i", playerid);
							return 1;
						}
					}
				}
			}
		}
	}
	return 1;
}

CALLBACK: CheckCrunchAnimation(playerid)
{
	if (!IsPlayerConnected(playerid)) return 0;
	if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
	{
		new anim = GetPlayerAnimationIndex(playerid);
		if (anim != 1274 &&
			anim != 1159 &&
			anim != 1158 &&
			anim != 1365 &&
			anim != 640 &&
			anim != 361 &&
			anim != 1274 &&
			anim != 1070 &&
			anim != 1069)
		{
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][40]);
			SetFirstPerson(playerid, true);
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	//printf("OnPlayerKeyState %d %d %d",playerid, newkeys, oldkeys); // debug juju
    if (PRESSED(  KEY_SECONDARY_ATTACK  ))
    {
    	if (PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE] == true) PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE] = false;

        EnterSite(playerid);

        if (IsPlayerInRangeOfPoint(playerid, 2.0, 3854.231933, -1265.252319, 7547.983398))
	    {
	    	SetPlayerPosEx(playerid, 2770.574462, -1628.717163, 12.177460, 358.490142, 0, 0, false);
	        return 1;
	    }

        if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if (PLAYER_TEMP[playerid][py_INTERIOR_INDEX] != -1)
			{
				if (ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
				{
					if (IsPlayerInRangeOfPoint(playerid, 1.5, 1208.744140, -34.261119, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 1213.738037, -33.667881, 1000.953125))
		            {
		                if (CHARACTER_INFO[playerid][ch_CASH] <= 50) return ShowPlayerMessage(playerid, "~r~No tienes dinero suficiente.", 3);

            			ApplyAnimation(playerid, "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 0, 0, 0, 0, 0);
            		    GivePlayerCash(playerid, -random(25), false);
            		    SetPlayerChatBubble(playerid, "\n\n\n\n* le pone billetes en la tanga de una puta\n\n\n", 0xffcb90FF, 20.0, 5000);
            		    return 1;
		            }
			    }
			}

			if (PLAYER_WORKS[playerid][WORK_POLICE])
			{
				for(new i = 0; i != sizeof POLICE_DOORS; i ++)
				{
					if (GetPlayerInterior(playerid) != POLICE_DOORS[i][police_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != POLICE_DOORS[i][police_door_WORLD]) continue;
					if (IsDynamicObjectMoving(POLICE_DOORS[i][police_door_OBJECT_ID]) || !POLICE_DOORS[i][police_door_CLOSED]) continue;

					new Float:pos[4];

					pos[0] = POLICE_DOORS[i][police_door_X] + (1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[1] = POLICE_DOORS[i][police_door_Y] + (1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[2] = POLICE_DOORS[i][police_door_X] + (-1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[3] = POLICE_DOORS[i][police_door_Y] + (-1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));

					if (IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y] - 1.4, POLICE_DOORS[i][police_door_Z] + 0.01, 2.0, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
					else if (IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y] + 1.4, POLICE_DOORS[i][police_door_Z] + 0.01, 2.0, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
				}
			}

			for(new i = 0; i != sizeof JAIL_DOORS; i ++)
			{
				if (GetPlayerInterior(playerid) != JAIL_DOORS[i][jail_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != JAIL_DOORS[i][jail_door_WORLD]) continue;
				if (IsDynamicObjectMoving(JAIL_DOORS[i][jail_door_OBJECT_ID]) || !JAIL_DOORS[i][jail_door_CLOSED]) continue;

				new Float:pos[4];

				pos[0] = JAIL_DOORS[i][jail_door_X] + (1.0 * floatsin(-JAIL_DOORS[i][jail_door_RZ], degrees));
				pos[1] = JAIL_DOORS[i][jail_door_Y] + (1.0 * floatcos(-JAIL_DOORS[i][jail_door_RZ], degrees));
				pos[2] = JAIL_DOORS[i][jail_door_X] + (-1.0 * floatsin(-JAIL_DOORS[i][jail_door_RZ], degrees));
				pos[3] = JAIL_DOORS[i][jail_door_Y] + (-1.0 * floatcos(-JAIL_DOORS[i][jail_door_RZ], degrees));

				if (IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], JAIL_DOORS[i][jail_door_Z]))
				{
					KillTimer(JAIL_DOORS[i][jail_door_TIMER]);
					JAIL_DOORS[i][jail_door_TIMER] = SetTimerEx("CloseJailDoor", 3000, false, "i", i);
					MoveDynamicObject(JAIL_DOORS[i][jail_door_OBJECT_ID], JAIL_DOORS[i][jail_door_X], JAIL_DOORS[i][jail_door_Y] - 1.3, JAIL_DOORS[i][jail_door_Z] + 0.01, 1.0, 0.0, 0.0, JAIL_DOORS[i][jail_door_RZ]);
					JAIL_DOORS[i][jail_door_CLOSED] = false;
					break;
				}
				else if (IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], JAIL_DOORS[i][jail_door_Z]))
				{
					KillTimer(JAIL_DOORS[i][jail_door_TIMER]);
					JAIL_DOORS[i][jail_door_TIMER] = SetTimerEx("CloseJailDoor", 3000, false, "i", i);
					MoveDynamicObject(JAIL_DOORS[i][jail_door_OBJECT_ID], JAIL_DOORS[i][jail_door_X], JAIL_DOORS[i][jail_door_Y] + 1.3, JAIL_DOORS[i][jail_door_Z] + 0.01, 1.0, 0.0, 0.0, JAIL_DOORS[i][jail_door_RZ]);
					JAIL_DOORS[i][jail_door_CLOSED] = false;
					break;
				}
			}

			if (IsPlayerInRangeOfPoint(playerid, 2.0, 1881.801635, -1688.519531, 5216.709960))
		    {
		    	SetPlayerPosEx(playerid, 1555.400390, -1675.611694, 16.195312, 180.0, 0, 0, false);
		    }

		    if (IsPlayerInRangeOfPoint(playerid, 2.0, 1881.341674, -1727.080688, 5216.709960))
		    {
		    	SetPlayerPosEx(playerid, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, false);
		    }
		}

		UpdateKeyPressed(playerid);
        return 1;
    }

	if (PRESSED( KEY_YES ))
    {
    	if (PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT] != 9999) UseItemSlot(playerid);

    	CheckPlayerDoors(playerid);
    	CheckRodShop(playerid);
    	CheckMinerShop(playerid);
    	CheckFishSell(playerid);
    	CheckBlackMarket(playerid);
    	CheckDrugBlackMarket(playerid);
    	CheckBlackMarketAmmo(playerid);
		CheckWorkSite(playerid);
		CheckClothShop(playerid);
        CheckAtmPlayerAndExecute(playerid);
        CheckShopAndExecute(playerid);
        CheckAndExecuteHospitalShop(playerid);
        CheckAndExecuteGasoline(playerid);
        CheckFoodShop(playerid);
        CheckPoliceEquipeSite(playerid);
        CheckMafiaEquipeSite(playerid);
        CheckPlayerHouseDoor(playerid);
        CheckFarmerShop(playerid);
        CheckBallonAction(playerid);

        for(new i = 0; i != sizeof TELE_MIRRORS; i ++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.0, TELE_MIRRORS[i][teleview_X], TELE_MIRRORS[i][teleview_Y], TELE_MIRRORS[i][teleview_Z]))
			{
				if (GetPlayerVirtualWorld(playerid) == TELE_MIRRORS[i][teleview_WORLD])
				{
					if (GetPlayerInterior(playerid) == TELE_MIRRORS[i][teleview_INTERIOR])
					{
						SetTeleView(playerid);
						break;
					}
				}
			}
		}

        UpdateKeyPressed(playerid);
	}

	if (PRESSED( KEY_WALK ))
	{
		if (PLAYER_TEMP[playerid][py_EDITING_MODE])
		{
			CancelEditingMode(playerid);
			return 1;
		}

		if (PLAYER_TEMP[playerid][py_IN_TELE] == true)
		{
			CloseTeleView(playerid);
			return 1;
		}

		if (PLAYER_WORKS[playerid][WORK_MINER])
		{
			// Start mining if only take a mallet
			if (PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT] != 9999)
			{
				new slot = PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT];
				if (PLAYER_VISUAL_INV[playerid][slot_TYPE][slot] == 52)
				{
					for(new i = 0; i < sizeof ROCKS_OBJ; i ++)
					{
						if (ROCKS_OBJ[i][r_ACTIVATED] == true)
						{
							if (IsPlayerInRangeOfPoint(playerid, 1.8, ROCKS_OBJ[i][r_X], ROCKS_OBJ[i][r_Y], ROCKS_OBJ[i][r_Z]))
							{
								StartMining(playerid, i);
								return 1;
							}
						}
					}
				}
			}

			// Drop rock (finished miner job)
			if (PLAYER_TEMP[playerid][py_ROCK])
			{
				for(new i = 0; i != sizeof DROP_ROCK_POS; i ++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 1.8, DROP_ROCK_POS[i][mp_X], DROP_ROCK_POS[i][mp_Y], DROP_ROCK_POS[i][mp_Z]))
					{
						PLAYER_TEMP[playerid][py_ROCK] = false;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, false);
						RemovePlayerAttachedObject(playerid, 9);
						PayPlayerMiner(playerid);
						DropPlayerRock(playerid, i);
					}	
				}
			}
		}

		if (PLAYER_TEMP[playerid][py_SELFIE] == true)
		{
			PLAYER_TEMP[playerid][py_SELFIE] = false;
			TogglePlayerControllableEx(playerid, true);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
			return 1;
		}

		CheckAndOpenBoot(playerid);

		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			for(new i = 0; i != MAX_DROP_ITEMS; i ++)
			{
				if (DROP_ITEMS[i][itm_VALID] == true)
				{
					new Float:pos[3]; 
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, DROP_ITEMS[i][itm_ID], E_STREAMER_X, pos[0]);
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, DROP_ITEMS[i][itm_ID], E_STREAMER_Y, pos[1]);
					Streamer_GetFloatData(STREAMER_TYPE_OBJECT, DROP_ITEMS[i][itm_ID], E_STREAMER_Z, pos[2]);

					if (IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
					{
						if (PLAYER_TEMP[playerid][py_INV_OCC_SLOTS] >= 15) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

						new free_slot = inv_GetFreeSlot(playerid);
						if (!free_slot) return ShowPlayerMessage(playerid, "~r~Tienes el inventario lleno.", 4);

						DROP_ITEMS[i][itm_VALID] = false;

						new item_name[84];
						format(item_name, sizeof(item_name), "~n~~n~~n~~w~%s", DROP_ITEMS[i][itm_NAME]);
						GameTextForPlayer(playerid, TextToSpanish(item_name), 2000, 5);

						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0, 1000, true);
						GrabItem(playerid, DROP_ITEMS[i][itm_TYPE], DROP_ITEMS[i][itm_AMMOUNT], DROP_ITEMS[i][itm_COLOR]);
						DeleteDropItem(i);
						if (PLAYER_TEMP[playerid][py_PLAYER_IN_INV]) ShowInventory(playerid);
						return 1;
					}
				}
			}
		}

		if (PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT] != 9999) DropItemSlot(playerid);
	}

	if (PRESSED( KEY_HANDBRAKE | KEY_NO ))
    {
		SetVehicleLightsAction(playerid);
		return 1;
	}
	else if (PRESSED( KEY_NO ))
    {
    	ShowInventory(playerid);
	}

	if (PRESSED( KEY_SPRINT ))
	{
		//printf("sprint %d 1",playerid);
		if (PLAYER_TEMP[playerid][py_FISHING] && PLAYER_WORKS[playerid][WORK_FISHER])
		{
			//printf("sprint %d 2",playerid);
			ManualUpdateFish(playerid);
			//printf("sprint %d 3",playerid);
		}

		if (PLAYER_TEMP[playerid][py_EDITING_MODE])
    	{
    		new Float:pos[3];
    		if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
    		{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2] - 0.1);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
		}
	}

	if (PRESSED( KEY_SUBMISSION ))
    {
    	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
    		ShowDialog(playerid, DIALOG_VEHICLE_OPTIONS);
    	}
    }

	if (PRESSED( KEY_CTRL_BACK ))
    {
    	CheckClubBar(playerid);
		ShowPropertyOptions(playerid);
		CheckCraneSiteRequest(playerid);
		ShellingThings(playerid);
		CheckTrashJobSite(playerid);
		CheckAndReload(playerid);

		if (PLAYER_TEMP[playerid][py_EDITING_MODE])
    	{
    		if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0) SetEditModeType(playerid, 1);
    		else SetEditModeType(playerid, 0);
    	}

		UpdateKeyPressed(playerid);
	}

	if (PRESSED(KEY_FIRE))
	{
		if (GetPlayerWeapon(playerid) == 41)
		{
			if (PLAYER_CREW[playerid][player_crew_VALID])
			{
				if (!PLAYER_WORKS[playerid][WORK_POLICE] && !PLAYER_TEMP[playerid][py_WORKING_IN])
				{
					for(new i = 0; i < sizeof GRAFFITIS_OBJ; i ++)
					{
						if (IsPlayerInRangeOfPoint(playerid, 3.0, GRAFFITIS_OBJ[i][g_X], GRAFFITIS_OBJ[i][g_Y], GRAFFITIS_OBJ[i][g_Z]))
						{
							if (GRAFFITIS_OBJ[i][g_ACTIVATED] == true)
							{
								if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 0;
								PLAYER_TEMP[playerid][py_TIMERS][41] = SetTimerEx("UpdateGraffitiProgress", 1000, 1, "i", playerid);
							}
						}
					}
				}
			}
		}
	}
	else if (RELEASED(KEY_FIRE))
	{
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][41]);
	}

	if (PRESSED( KEY_CROUCH ))
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 15.0, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z]))
					{
						if (GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if (San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if (!PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
								{
									if (!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ]) break;
								}
							}
							if (IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;

							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}

				if (PLAYER_WORKS[playerid][WORK_POLICE])
				{
					if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
					{
						for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
						{
							if (IsPlayerInRangeOfPoint(playerid, 20.0, POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z]))
							{
								if (IsDynamicObjectMoving(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID]) && !POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING]) break;

								KillTimer(POLICE_GARAGE_DOORS[i][police_gdoor_TIMER]);
								POLICE_GARAGE_DOORS[i][police_gdoor_TIMER] = SetTimerEx("ClosePoliceGarageDoor", 5000, false, "i", i);
								MoveDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_X], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RZ]);
								POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING] = false;
								break;
							}
						}
					}
				}

				if (PLAYER_WORKS[playerid][WORK_MAFIA])
				{
					for(new i = 0; i != sizeof MAFIA_DOORS; i ++)
					{
						if (GetPlayerInterior(playerid) != MAFIA_DOORS[i][mafia_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != MAFIA_DOORS[i][mafia_door_WORLD]) continue;
						if (IsDynamicObjectMoving(MAFIA_DOORS[i][mafia_door_OBJECT_ID]) || !MAFIA_DOORS[i][mafia_door_CLOSED]) continue;
						if (i > 2) continue;

						if (IsPlayerInRangeOfPoint(playerid, 20.0, MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z]))
						{
							KillTimer(MAFIA_DOORS[i][mafia_door_TIMER]);
							MAFIA_DOORS[i][mafia_door_TIMER] = SetTimerEx("CloseMafiaDoor", 10000, false, "i", i);
							MoveDynamicObject(MAFIA_DOORS[i][mafia_door_OBJECT_ID], MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z] - 15.0, 2.0, 0.0, 0.0, MAFIA_DOORS[i][mafia_door_RZ]);
							MAFIA_DOORS[i][mafia_door_CLOSED] = false;
							break;
						}
					}
				}

				if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
				{
					for(new i = 0; i != sizeof MAFIA_DOORS; i ++)
					{
						if (GetPlayerInterior(playerid) != MAFIA_DOORS[i][mafia_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != MAFIA_DOORS[i][mafia_door_WORLD]) continue;
						if (IsDynamicObjectMoving(MAFIA_DOORS[i][mafia_door_OBJECT_ID]) || !MAFIA_DOORS[i][mafia_door_CLOSED]) continue;
						if (i < 3) continue;
						
						if (IsPlayerInRangeOfPoint(playerid, 20.0, MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z]))
						{
							KillTimer(MAFIA_DOORS[i][mafia_door_TIMER]);
							MAFIA_DOORS[i][mafia_door_TIMER] = SetTimerEx("CloseMafiaDoor", 10000, false, "i", i);
							MoveDynamicObject(MAFIA_DOORS[i][mafia_door_OBJECT_ID], MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z] - 15.0, 2.0, 0.0, 0.0, MAFIA_DOORS[i][mafia_door_RZ]);
							MAFIA_DOORS[i][mafia_door_CLOSED] = false;
							break;
						}
					}
				}
			}

			CheckMechanicMenu(playerid);
			CheckTruckPointAndLoad(playerid);
			CheckHeliPort(playerid);
		}

		if (GetPlayerState(playerid == PLAYER_STATE_ONFOOT))
		{
			if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
			{
				if (GetPlayerAnimationIndex(playerid == 1274))
				{
					SetFirstPersonPos(playerid, 0.0, 0.36, 0.0);
					KillTimer(PLAYER_TEMP[playerid][py_TIMERS][40]);
					PLAYER_TEMP[playerid][py_TIMERS][40] = SetTimerEx("CheckCrunchAnimation", 500, true, "i", playerid);
				}
			}
		}

		if (PLAYER_TEMP[playerid][py_EDITING_MODE])
    	{
    		new Float:pos[3];
    		if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
    		{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2] + 0.1);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
		}

		CheckMarketAttack(playerid);
		GrabPlant(playerid);
		ExitCrack(playerid);

		UpdateKeyPressed(playerid);
		return 1;
	}

	if (newkeys & KEY_HANDBRAKE && !IsPlayerInAnyVehicle(playerid)) PLAYER_TEMP[playerid][py_AIM_DATA] = 1;
	else if (oldkeys & KEY_HANDBRAKE) PLAYER_TEMP[playerid][py_AIM_DATA] = 0;
	return 1;
}

CALLBACK: ClosePoliceDoor(i)
{
	POLICE_DOORS[i][police_door_CLOSED] = true;
	MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 2.0, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
	return 1;
}

CALLBACK: CloseJailDoor(i)
{
	JAIL_DOORS[i][jail_door_CLOSED] = true;
	MoveDynamicObject(JAIL_DOORS[i][jail_door_OBJECT_ID], JAIL_DOORS[i][jail_door_X], JAIL_DOORS[i][jail_door_Y], JAIL_DOORS[i][jail_door_Z], 1.0, 0.0, 0.0, JAIL_DOORS[i][jail_door_RZ]);
	return 1;
}

CALLBACK: CloseMafiaDoor(i)
{
	MAFIA_DOORS[i][mafia_door_CLOSED] = true;
	MoveDynamicObject(MAFIA_DOORS[i][mafia_door_OBJECT_ID], MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z], 2.0, 0.0, 0.0, MAFIA_DOORS[i][mafia_door_RZ]);
	return 1;
}

CALLBACK: ClosePoliceGarageDoor(index)
{
	POLICE_GARAGE_DOORS[index][police_gdoor_CLOSING] = true;
	MoveDynamicObject(POLICE_GARAGE_DOORS[index][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[index][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RZ]);
	return 1;
}

CALLBACK: CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}

CheckRobActor(playerid)
{
	new ActorTarget = GetPlayerCameraTargetActor(playerid);
	new maxprogress = minrand(5, 20);
	if (ActorTarget != INVALID_ACTOR_ID)
	{
		new keys, updown, leftright;
		new randompay = minrand(30, 300);

		GetPlayerKeys(playerid, keys, updown, leftright);

		if (GetPlayerInterior(playerid) > 0)
		{
			if (!PLAYER_WORKS[playerid][WORK_POLICE])
			{
				if (!a_TMP[ActorTarget][a_IN_ROB] && GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 33 && keys & KEY_HANDBRAKE)
				{
					if ((gettime() - a_TMP[ActorTarget][a_LAST_ROB]) < 60 * 5) return ShowPlayerMessage(playerid, "~r~Este negocio ya fue robado recientemente", 3);
					{
						if ((gettime() - a_TMP[ActorTarget][a_IN_ROB_PROGRESS]) < 2) return 0;
						
						new str_text[128];
						if (PLAYER_TEMP[playerid][py_ROB_PROGRESS] > maxprogress)
						{
							SetActorChatBubble(ActorTarget, "{E6E6E6}¡Ya le he dado todo!", 0xE6E6E600, 5.0, 3000);
							SetActorRespawnTime(ActorTarget, 15000);
							ApplyActorAnimation(ActorTarget, "ped", "handsup", 4.1, 0, 0, 0, 1, 0);
							ShowPlayerNotification(playerid, "La policía viene en camino, es mejor que corras.", 3);
							PLAYER_TEMP[playerid][py_ROB_PROGRESS] = 0;
							a_TMP[ActorTarget][a_LAST_ROB] = gettime();
							PLAYER_TEMP[playerid][py_INITIAL_ROB] = false;
							return 1;
						}

						if (PLAYER_TEMP[playerid][py_INITIAL_ROB] == false)
						{
							PLAYER_TEMP[playerid][py_INITIAL_ROB] = true;
							ShowPlayerNotification(playerid, "Apuntale al vendedor hasta que te de todo el dinero de la caja.", 4);
							SetActorChatBubble(ActorTarget, "{E6E6E6}¡No me lastime por favor!\n¡Le daré el dinero!", 0xE6E6E600, 5.0, 3000);
							ApplyActorAnimation(ActorTarget, "ped", "handsup", 4.1, 0, 0, 0, 1, 0);
							SetPlayerPoliceSearchLevel(playerid, 1);

							new city[45], zone[45], message[145];
						    GetPointZone(ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_X], ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_Y], city, zone);
						    format(message, sizeof message, "~r~%s~w~ esta robando un negocio (%s).", PLAYER_TEMP[playerid][py_RP_NAME], zone);
						    SendPoliceNotification(message, 6);

							a_TMP[ActorTarget][a_IN_ROB_PROGRESS] = gettime();
							return 0;
						}
							
						GivePlayerCash(playerid, randompay);
						format(str_text, sizeof(str_text), "~g~+%d$", randompay);
						GameTextForPlayer(playerid, str_text, 4000, 1);
						PLAYER_TEMP[playerid][py_ROB_PROGRESS] ++;

						ApplyActorAnimation(ActorTarget, "INT_SHOP", "shop_cashier", 4.1, 1, 0, 0, 1, 0);
						a_TMP[ActorTarget][a_IN_ROB] = true;

						format(str_text, sizeof(str_text), "{E6E6E6}* Le da a %s {85DA74}%d$", PLAYER_TEMP[playerid][py_NAME], randompay);
						SetActorChatBubble(ActorTarget, str_text, 0xE6E6E600, 5.0, 3000);


						a_TMP[ActorTarget][a_IN_ROB] = false;
						a_TMP[ActorTarget][a_IN_ROB_PROGRESS] = gettime();
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if (PLAYER_TEMP[playerid][py_KICKED]) return 1;
	if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL) return 1;
	if (!PLAYER_TEMP[playerid][py_USER_LOGGED]) return 0;

	new player_state = GetPlayerState(playerid);
	if (player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;

	new 
		player_action = GetPlayerSpecialAction(playerid),
		Float:player_health,
		Float:player_armour,
		current_gettime = gettime()
	;
	
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);

	if (ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if (player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
			{
				if (!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				else
				{
					if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = current_gettime;
					if (PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				}
			}
		}
	}

	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if (!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}

	if (ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled] && vehicleid && player_state == PLAYER_STATE_PASSENGER)
	{
		if (floatabs(dis) > 20.0)
		{
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = current_gettime + 5;
			}
		}
	}

	if (ac_Info[CHEAT_HIGH_POS][ac_Enabled])
	{
		if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
		{
			if (floatabs(dis) > 80.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
			{
				if (player_state != PLAYER_STATE_PASSENGER)
				{
					if (!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					else
					{
						if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = current_gettime;
						if (PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					}
				}
			}
		}
	}

	switch(player_state)
	{
		case PLAYER_STATE_ONFOOT:
		{
			if (ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
			{
				if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
				{
					new Float:speed = GetPlayerSpeed(playerid);
					if (speed > 700.0)
					{
						if (!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						else
						{
							if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = current_gettime;
							if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						}
					}
				}
			}

			if (ac_Info[CHEAT_POS][ac_Enabled])
			{
				if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if (GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
					{
						if (floatabs(dis) > 6.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
						{
							if (!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
								if (PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
			}
		}
		case PLAYER_STATE_DRIVER:
		{
			new Float:Vehicle_Speed = GetVehicleSpeed(vehicleid);

			if (ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
			{
				if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
				{
					if (Vehicle_Speed > 900.0)
					{
						if (!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						else
						{
							if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = current_gettime;
							if (PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						}
					}
				}
			}

			if (ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled])
			{
				if (vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
				{
					if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
					{
						if (!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
						else
						{
							if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
							if (PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
						}
					}
				}
			}

			if (ac_Info[CHEAT_POS][ac_Enabled])
			{
				if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if (Vehicle_Speed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
					{
						if (!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						else
						{
							if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
							if (PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						}
					}
				}
			}

			if (ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
			{
				new Keys, ud, lr;
				GetPlayerKeys(playerid, Keys, ud, lr);
				if (Keys == KEY_SPRINT)
				{
					//printf("sprint %d 4",playerid);
					if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && Vehicle_Speed > 60.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
					{
						//printf("sprint %d 5",playerid);
						if (current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
						{
							//printf("sprint %d 6",playerid);
							if (!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							else
							{	
								//printf("sprint %d 7",playerid);
								if (current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = current_gettime;
								if (PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							}
						}
					}
				}
			}
		}
	}

	new 
		Keys,
		ud,
		lr,
		Float:angle,
		Float:pos[3];

    GetPlayerKeys(playerid, Keys, ud, lr);

    if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if (PLAYER_TEMP[playerid][py_IN_INJURED_ANIMATION] == false)
		{
			GetPlayerFacingAngle(playerid, angle);

			if (ud == KEY_UP)
    		{
				SetPlayerFacingAngle(playerid, angle + 20.0);
				ApplyAnimation(playerid, "PED", "CAR_CRAWLOUTRHS", 4.1, false, true, true, false, 0, false);
				PLAYER_TEMP[playerid][py_IN_INJURED_ANIMATION] = true;
				SetTimerEx("InjuredAnimationCut", 470, false, "i", playerid);
			}

			if (ud == KEY_DOWN)
		    {
		    	SetPlayerFacingAngle(playerid, 180);
		    	ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
		    }

			if (lr == KEY_LEFT)
			{
				SetPlayerFacingAngle(playerid, angle + 16.0);
				ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
			}

			if (lr == KEY_RIGHT)
			{
				SetPlayerFacingAngle(playerid, angle - 16.0);
				ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
			}
		}
    }

    if (PLAYER_TEMP[playerid][py_EDITING_MODE])
    {
    	if (ud == KEY_UP)
		{
			if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
			{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0] + 0.1, pos[1], pos[2]);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
			else
			{
				GetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0] + 3.0, pos[1], pos[2]);
			}
		}

		if (ud == KEY_DOWN)
	    {
	    	if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
	    	{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0] - 0.1, pos[1], pos[2]);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
			else
			{
				GetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1] + 3.0, pos[2]);
			}
	    }

		if (lr == KEY_LEFT)
		{
			if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
			{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1] + 0.1, pos[2]);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
			else
			{
				GetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2] - 1.5);
			}
		}

		if (lr == KEY_RIGHT)
		{
			if (PLAYER_TEMP[playerid][py_EDITING_MODE_TYPE] == 0)
			{
				GetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1] - 0.1, pos[2]);
				SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
			}
			else
			{
				GetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2]);
				SetDynamicObjectRot(PLAYER_TEMP[playerid][py_EDITING_OBJ], pos[0], pos[1], pos[2] + 1.5);
			}
		}
    }

	CHARACTER_INFO[playerid][ch_HEALTH] = player_health;
	CHARACTER_INFO[playerid][ch_ARMOUR] = player_armour;

	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	if (vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}

    UpdatePlayerZoneMessages(playerid);
    CheckRobActor(playerid);
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;

	if (addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}

	CHARACTER_INFO[playerid][ch_POS][0] = x;
	CHARACTER_INFO[playerid][ch_POS][1] = y;
	CHARACTER_INFO[playerid][ch_POS][2] = z;
	CHARACTER_INFO[playerid][ch_ANGLE] = angle;
	CHARACTER_INFO[playerid][ch_INTERIOR] = interior;
	PLAYER_MISC[playerid][MISC_LAST_WORLD] = world;

	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);

	if (freeze)
	{
		Streamer_UpdateEx(playerid, x, y, z, world, interior, -1, -1, 1);
		TogglePlayerControllableEx(playerid, false);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
		PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
		ShowPlayerMessage(playerid, "Cargando objetos...", 2);
	}

	if (PLAYER_MISC[playerid][MISC_CONFIG_FP])
	{
		SetFirstPerson(playerid, true);
	}
	return 1;
}

CALLBACK: TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllableEx(playerid, controlable);
}


GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
	   Float:tmp_distance,
	   closest = -1;

    for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++)
    {
	   tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2]);
	   if (tmp_distance < distance)
	   {
		  distance = tmp_distance;
		  closest = i;
	   }
    }
	return closest;
}

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][0];
	y = Hospital_Spawn_Positions[hospital][1];
	z = Hospital_Spawn_Positions[hospital][2];
	angle = Hospital_Spawn_Positions[hospital][3];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	new str_text[64];
	format(str_text, sizeof(str_text), "Recuperandote ~r~%d %", PLAYER_TEMP[playerid][py_HOSPITAL_LIFE]);
	ShowPlayerMessage(playerid, str_text, 2);
	return 1;
}

CALLBACK: HealthUp(playerid)
{
	if (CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;

	if (PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] < 100)
	{
		if (ACCOUNT_INFO[playerid][ac_SU]) PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] += 10;
		else PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] += 5;

		if (PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] > 100) PLAYER_TEMP[playerid][py_HOSPITAL_LIFE] = 100;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][4]);
		PLAYER_TEMP[playerid][py_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if (ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
		else CHARACTER_INFO[playerid][ch_HEALTH] = 50.0;

		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

		ClearPlayerChatBox(playerid);
		ShowPlayerMessage(playerid, "Te has recuperado.", 2);
		TogglePlayerControllableEx(playerid, true);
		SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][py_HP_POS_DATA][0], PLAYER_TEMP[playerid][py_HP_POS_DATA][1], PLAYER_TEMP[playerid][py_HP_POS_DATA][2], PLAYER_TEMP[playerid][py_HP_POS_DATA][3], 3, 2, 1);
		new price = ACCOUNT_INFO[playerid][ac_LEVEL] * 200;
		if (price > 1200) price = 1200;
		price += minrand(100, 200);

		if (price > CHARACTER_INFO[playerid][ch_CASH])
		{
			price = CHARACTER_INFO[playerid][ch_CASH];
			if (price < 0) price = 0;
		}

		new pay_str[64];
		if (ACCOUNT_INFO[playerid][ac_SU])
		{
			ShowPlayerNotification(playerid, "No se te ha cobrado por ser VIP", 4);
		}
		else
		{
			format(pay_str, sizeof(pay_str), "El coste de los servicios médicos ofrecidos es de %s$", number_format_thousand(price));
			ShowPlayerNotification(playerid, pay_str, 4);
			GivePlayerCash(playerid, -price);
		}

		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
		PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = -1;

		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 0;
			PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];
			PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];

			new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME]);
			//SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Te quedan {62d743}%s"COL_WHITE" minutos de condena.", TimeConvert(time));
			
			new str_text[128];
			format(str_text, sizeof(str_text), "~r~Encarcelado~w~~n~%s minutos.", TimeConvert(time));
			PLAYER_TEMP[playerid][py_JAIL_NOT] = ShowPlayerNotification(playerid, str_text, 1);

			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][39]);
			PLAYER_TEMP[playerid][py_TIMERS][39] = SetTimerEx("UpdatePrisionTime", 1000, true, "i", playerid);
		}
		else
		{
			GetHospitalSpawnPosition(PLAYER_TEMP[playerid][py_HOSPITAL], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_STATE]);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
			PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
		}
		PLAYER_TEMP[playerid][py_PLAYER_FINISH_HOSPITAL] = true;
		ClearAnimations(playerid);
	}
	return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_TEMP[playerid][py_PLAYER_SPECTATE] = spectate;
	return TogglePlayerSpectating(playerid, spectate);
}

CreateInteriorActor(interior_type, world, interior)
{
	if (interior_type == INTERIOR_NO_INFO) return 0;

	new skin, Float:pos[4];

	switch(interior_type)
	{
		case INTERIOR_BINCO:
		{
			skin      = 119;
			pos[0]    = 208.376373;
			pos[1]    = -98.703956;
			pos[2]    = 1005.257812;
			pos[3]    = 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			skin      = 191;
			pos[0]    = 203.826187;
			pos[1]    = -41.667518;
			pos[2]    = 1001.804687;
			pos[3]    = 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			skin      = 190;
			pos[0]    = 207.139907;
			pos[1]    = -127.805473;
			pos[2]    = 1003.507812;
			pos[3]    = 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			skin      = 169;
			pos[0]    = 204.275909;
			pos[1]    = -157.829010;
			pos[2]    = 1000.523437;
			pos[3]    = 180.0;
		}
		case INTERIOR_VICTIM:
		{
			skin      = 217;
			pos[0]    = 204.853225;
			pos[1]    = -8.764448;
			pos[2]    = 1001.210937;
			pos[3]    = 270.0;
		}
		case INTERIOR_ZIP:
		{
			skin      = 211;
			pos[0]    = 162.226135;
			pos[1]    = -81.191978;
			pos[2]    = 1001.804687;
			pos[3]    = 180.0;
		}
		case INTERIOR_247:
		{
			skin      = 184;
			pos[0]    = -27.483411;
			pos[1]    = -91.628837;
			pos[2]    = 1003.546875;
			pos[3]    = 0.0;
		}
		case INTERIOR_PIZZA:
		{
			skin      = 155;
			pos[0]    = 375.114501;
			pos[1]    = -117.272621;
			pos[2]    = 1001.492187;
			pos[3]    = 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			skin      = 167;
			pos[0]    = 368.652679;
			pos[1]    = -4.492218;
			pos[2]    = 1001.851562;
			pos[3]    = 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			skin      = 205;
			pos[0]    = 376.114227;
			pos[1]    = -65.848991;
			pos[2]    = 1001.507812;
			pos[3]    = 180.0;
		}
		case INTERIOR_BANK_LS:
		{
			skin      = 59;
			pos[0]    = 1407.526489;
			pos[1]    = 1321.833496;
			pos[2]    = 1501.091918;
			pos[3]    = 180.0;
		}
		case INTERIOR_BANK_SF:
		{
			skin      = 59;
			pos[0]    = 1104.802001;
			pos[1]    = 1531.275634;
			pos[2]    = 1452.475097;
			pos[3]    = 180.0;
		}
		case INTERIOR_BANK_LV:
		{
			skin      = 59;
			pos[0]    = 2692.497558;
			pos[1]    = -610.933593;
			pos[2]    = -71.658203;
			pos[3]    = 90.0;
		}
		case INTERIOR_CITY_HALL_LS:
		{
			skin      = 186;
			pos[0]    = -474.572387;
			pos[1]    = 287.982879;
			pos[2]    = 2004.584960;
			pos[3]    = 0.0;
		}
		case INTERIOR_UNITY_STATION:
		{
			skin      = 184;
			pos[0]    = 1489.038818;
			pos[1]    = 1305.631591;
			pos[2]    = 1093.296386;
			pos[3]    = 270.0;
		}
		case INTERIOR_TRUCK:
		{
			skin      = 127;
			pos[0]    = 1297.120117;
			pos[1]    = -66.351226;
			pos[2]    = 1002.497375;
			pos[3]    = 0.0;
		}
	}

	CreateDynamicActor(skin, pos[0], pos[1], pos[2], pos[3], 0, 50.0, world, interior);
	return 1;
}

GetFastFoodLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Fast_Food_Positions; i ++)
	{
		if (Fast_Food_Positions[i][fast_food_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if (Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

RegisterNewPlayerToy(playerid, slot)
{
	new DBResult:Result, DB_Query[800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_TOYS`\
		(\
			`ID_USER`, `NAME`, `ATTACHED`, `MODELID`, `BONE`, `OFFSET_X`, `OFFSET_Y`, `OFFSET_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`, `SCALE_X`, `SCALE_Y`, `SCALE_Z`, `COLOR_1`, `COLOR_2`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID_TOY`) FROM `PLAYER_TOYS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID],
		PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID], PLAYER_TOYS[playerid][slot][player_toy_BONE],
		PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y], PLAYER_TOYS[playerid][slot][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PLAYER_TOYS[playerid][slot][player_toy_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

number_format_thousand(e_number)
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if (e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}

	if (negative) strins(f_string, "-", 0);
	return f_string;
}

/*number_format_dash(e_number)
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if (e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "-", numbers);
	}

	if (negative) strins(f_string, "- ", 0);
	return f_string;
}*/

SelectTextDrawEx(playerid, color)
{
	PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if (!PLAYER_TEMP[playerid][py_HUD_TEXTDRAWS]) return 0;

	//barrahambre 1...vacia 12, llena 54
	//barrased 2...vacia 74, llena 120

	new Float:size;

	size = 12.0 + (CHARACTER_INFO[playerid][ch_HUNGRY] * 0.4);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], size, 0.000000);

	size = 74.5 + (CHARACTER_INFO[playerid][ch_THIRST] * 0.4);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], size, 0.000000);

	if (PLAYER_MISC[playerid][MISC_CONFIG_HUD])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
	}
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN     2 // 2 segundos de timer
#define THIRST_HOURS_STOPPED  9 // 9 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED  12 // 12 horas parado si alimentacion esta a 100 va a 0

CALLBACK: HungryThirstDown(playerid)
{
	if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if (!PLAYER_TEMP[playerid][py_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);

	new current_gettime = gettime();

	if (ACCOUNT_INFO[playerid][ac_SU])
	{
		if (current_gettime - PLAYER_TEMP[playerid][py_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
	CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));

	if (CHARACTER_INFO[playerid][ch_THIRST] <= 0.5) CHARACTER_INFO[playerid][ch_THIRST] = 0.5;
	if (CHARACTER_INFO[playerid][ch_HUNGRY] <= 0.5) CHARACTER_INFO[playerid][ch_HUNGRY] = 0.5;
	if (CHARACTER_INFO[playerid][ch_THIRST] < 30.0)
	{
		CHARACTER_INFO[playerid][ch_HEALTH] -= 2.0;

		if (CHARACTER_INFO[playerid][ch_THIRST] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
		{
		    SetPlayerDrunkLevel(playerid, 0);
			SetPlayerHealthEx(playerid, 0.0);
			CHARACTER_INFO[playerid][ch_THIRST] = 75.0;
			return 1;
		}

		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

		if (!PLAYER_TEMP[playerid][py_THIRST_MESSAGE])
		{
			ShowPlayerNotification(playerid, "Empiezas a tener sed, busca algo para tomar o acabarás muriendo.", 5);
			SetPlayerDrunkLevel(playerid, 4000);
			PLAYER_TEMP[playerid][py_THIRST_MESSAGE] = true;
		}
	}

	if (CHARACTER_INFO[playerid][ch_HUNGRY] < 30.0)
	{
		CHARACTER_INFO[playerid][ch_HEALTH] -= 2.0;

		if (CHARACTER_INFO[playerid][ch_HUNGRY] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
		{
		    SetPlayerDrunkLevel(playerid, 0);
			SetPlayerHealthEx(playerid, 0.0);
			CHARACTER_INFO[playerid][ch_HUNGRY] = 55.0;
			return 1;
		}

		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

		if (!PLAYER_TEMP[playerid][py_HUNGRY_MESSAGE])
		{
			ShowPlayerNotification(playerid, "Empiezas a tener hambre, busca algo para comer o acabarás muriendo.", 5);
			SetPlayerDrunkLevel(playerid, 4000);
			PLAYER_TEMP[playerid][py_HUNGRY_MESSAGE] = true;
		}
	}

	UpdatePlayerHud(playerid);
	return 1;
}

SetPlayerHud(playerid)
{
	PLAYER_TEMP[playerid][py_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);
	//UpdateReputationTextDraws(playerid);

	if (PLAYER_MISC[playerid][MISC_CONFIG_HUD])
	{
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][0]);
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][1]);

		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
	}

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][5]);
	PLAYER_TEMP[playerid][py_TIMERS][5] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][5]);
	PLAYER_TEMP[playerid][py_HUD_TEXTDRAWS] = false;

	TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][1]);

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
	return 1;
}

is_open(hour, open, close)
{
	if (open > close)
	{
		if ( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else if (open < close)
	{
		if ((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	CHARACTER_INFO[playerid][ch_HUNGRY] += hungry;
	if (CHARACTER_INFO[playerid][ch_HUNGRY] > 30.0) PLAYER_TEMP[playerid][py_HUNGRY_MESSAGE] = false;
	if (CHARACTER_INFO[playerid][ch_HUNGRY] > 100.0) CHARACTER_INFO[playerid][ch_HUNGRY] = 100.0;

	CHARACTER_INFO[playerid][ch_THIRST] += thirst;
	if (CHARACTER_INFO[playerid][ch_THIRST] > 30.0) PLAYER_TEMP[playerid][py_THIRST_MESSAGE] = false;
	if (CHARACTER_INFO[playerid][ch_THIRST] > 100.0) CHARACTER_INFO[playerid][ch_THIRST] = 100.0;

	UpdatePlayerHud(playerid);
	return 1;
}

/*SetActorFacingAngleEx(actorid, skin, Float:angle, &actor)
{
	actor = INVALID_ACTOR_ID;

    new Float:x, Float:y, Float:z, vw;
    GetActorPos(actorid, x, y, z);
	vw = GetActorVirtualWorld(actorid);
    DestroyActor(actorid);
    actor = CreateActor(skin, x, y, z, angle);
	SetActorVirtualWorld(actor, vw);
	return 1;
}*/

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(BANK_ACCOUNT); i ++)
	{
		if (BANK_ACCOUNT[i][bank_account_ID] == 0) continue;
		if (BANK_ACCOUNT[i][bank_account_ID] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	printf("OnPlayerStaeChnagge %d %d %d",playerid, newstate, oldstate); // debug juju
	if (PLAYER_TEMP[playerid][py_KICKED]) return 1;

	switch(oldstate)
	{
		case PLAYER_STATE_PASSENGER, PLAYER_STATE_DRIVER:
		{
			if (PLAYER_MISC[playerid][MISC_CONFIG_FP]) SetFirstPerson(playerid, true);
			PLAYER_TEMP[playerid][py_VEHICLEID] = -1;
		}
	}

	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if (newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
		{
			if (ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
			{
				if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_STATE]);

					if (interval < 50)
					{
						if (!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						else
						{
							if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if (PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						}
					}
					PLAYER_TEMP[playerid][py_ANTIFLOOD_STATE] = GetTickCount();
				}
			}
		}
	}

    if (newstate == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if (ac_Info[CHEAT_CAR_JACKING][ac_Enabled])
		{
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			{
				if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_IMMUNITY])
				{
					if (!ac_Info[CHEAT_CAR_JACKING][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					else
					{
						if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_JACKING][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] = gettime();
						if (PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_JACKING][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					}

					PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}

		ac_SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 1;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] = vehicleid;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if (gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if (ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if (!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}

		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_NONE:
			{
				if (!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
					UpdateVehicleParams(vehicleid);
				}
			}
			case VEHICLE_TYPE_SELL:
			{
				PLAYER_TEMP[playerid][py_SELECTED_BUY_VEHICLE_ID] = vehicleid;

				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if (db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);


				if (player_vehicles >= MAX_SU_VEHICLES) return ShowPlayerMessage(playerid, "~r~No puedes comprar más vehículos, el limite es de 6.", 3);
				if (!ACCOUNT_INFO[playerid][ac_SU])
				{
					if (player_vehicles >= MAX_NU_VEHICLES)
					{
						ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más vehículos.", 4);
					    return 1;
					}
				}

				ShowDialog(playerid, DIALOG_BUY_VEHICLE);
				return 1;
			}
			case VEHICLE_TYPE_WORK:
			{
				if (!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if (ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if (!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if (PLAYER_TEMP[playerid][py_WORKING_IN] && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if (ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if (!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if (WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if (ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if (!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}

				if (WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if (ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if (!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_HARVESTER: StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK:
					{
						if (TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID])
							{
							    ShowPlayerMessage(playerid, "~r~No eres el conductor de este camión.", 3);
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRASH:
					{
						if (TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if (TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
							    ShowPlayerMessage(playerid, "~r~No eres el conductor de este camión.", 3);
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if (PLAYER_TEMP[playerid][py_TRASH_DRIVER] || PLAYER_TEMP[playerid][py_TRASH_PASSENGER])
							{
						        ShowPlayerMessage(playerid, "~r~Ya estás trabajando con otro compañero.", 3);
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							PLAYER_TEMP[playerid][py_TRASH_DRIVER] = true;
							PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;

							if (TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) ShowPlayerMessage(playerid, "~r~Necesitas un compañero para empezar a trabajar.", 3);
							else
							{
								new route = random(MAX_ROUTES);
								while(!TRASH_OBJECTS[route][trash_route_VALID])
								{
									route = random(MAX_ROUTES);
								}

								TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);

								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);

								ShowPlayerNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta asignada.", 2);
								ShowPlayerNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta asignada.", 2);
							}
						}
					}
				}
			}
		}
		if (VEHICLE_INFO[GetVehicleModel(vehicleid) - 400][vehicle_info_VALID] && !PLAYER_TEMP[playerid][py_IN_TUNING_GARAGE]) ShowPlayerSpeedoMeter(playerid);

		if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
		{
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);

				ShowPlayerMessage(playerid, "Tu mecánico se ha cancelado porque te has subido a un vehículo.", 3);
			}
		}

		if (PLAYER_MISC[playerid][MISC_CONFIG_FP]) SetFirstPerson(playerid, false);
    }
	else if (newstate == PLAYER_STATE_PASSENGER)
	{
		//drive-by
		if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
		{
			ac_SetPlayerArmedWeapon(playerid, 0);
		}

		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;

		new vehicleid = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] = vehicleid;

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if (gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if (ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if (!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if (PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TRASH:
				{
					if (!PLAYER_WORKS[playerid][WORK_TRASH])
					{
						new str_text[128];
						format(str_text, sizeof(str_text), "Necesitas ser %s para manejar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
						ShowPlayerMessage(playerid, str_text, 3);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRASH)
					{
				        ShowPlayerMessage(playerid, "~r~No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.", 3);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if (TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if (TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
						    ShowPlayerMessage(playerid, "~r~No eres el acompañante de este camión.", 3);
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if (PLAYER_TEMP[playerid][py_TRASH_DRIVER] || PLAYER_TEMP[playerid][py_TRASH_PASSENGER])
						{
						    ShowPlayerMessage(playerid, "~r~Ya estás trabajando con otro compañero.", 3);
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						PLAYER_TEMP[playerid][py_TRASH_PASSENGER] = true;
						PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;

						if (TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) ShowPlayerMessage(playerid, "~r~Necesitas un compañero para empezar a trabajar.", 3);
						else
						{
							new route = random(MAX_ROUTES);
							while(!TRASH_OBJECTS[route][trash_route_VALID])
							{
								route = random(MAX_ROUTES);
							}

							TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);

							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);

							ShowPlayerNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta asignada.", 3);
							ShowPlayerNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta asignada.", 3);
						}
					}
				}
			}
		}

		if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
		{
			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);

				ShowPlayerMessage(playerid, "Tu mecánico se ha cancelado porque te has subido a un vehículo.", 3);
			}
		}

		if (PLAYER_MISC[playerid][MISC_CONFIG_FP]) SetFirstPerson(playerid, false);
	}
	else if (newstate == PLAYER_STATE_SPECTATING)
	{
		if (!PLAYER_TEMP[playerid][py_PLAYER_SPECTATE])
		{
			if (ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if (!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if (PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}
	if (oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][7]);


			if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
			{
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID]);
			}

			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;

			StopAudioStreamForPlayer(playerid);
			HidePlayerSpeedoMeter(playerid);

			if (GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
                switch(WORK_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][work_vehicle_WORK])
                {
                    case WORK_HARVESTER, WORK_TRUCK: EndPlayerJob(playerid);
                }
            }
			if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID])
			{
				if (PLAYER_TEMP[playerid][py_TRASH_DRIVER])
				{
					if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) ShowPlayerMessage(playerid, "Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.", 3);
					}
					else
					{
						TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						PLAYER_TEMP[playerid][py_TRASH_DRIVER] = false;
						PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if (oldstate == PLAYER_STATE_PASSENGER)
	{
		if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID])
		{
			if (PLAYER_TEMP[playerid][py_TRASH_PASSENGER])
			{
				if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) ShowPlayerMessage(playerid, "Sube al camión para volver al vertedero y recibir la paga.", 3);
						else
						{
							new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =     GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);

							if (distance > 10.0) ShowPlayerMessage(playerid, "Vuelve a subir al camión.", 3);
							else
							{
								if (IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]))
								{
									if (!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
									if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if (!PLAYER_TEMP[playerid][py_TRASH_PASSENGER]) return 1;

									new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									ShowPlayerMessage(driver, "Espera mientras tu ~y~compañero~w~ recoge la basura.", 3);

									new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
									if (offset > 30.0) offset = 30.0;

									PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] = 5;
									UpdatePlayerTrashRecycleSize(playerid);

									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

									KillTimer(PLAYER_TEMP[playerid][py_TIMERS][10]);
									PLAYER_TEMP[playerid][py_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								ShowPlayerNotification(playerid, "Recoge la basura y sube al camión para continuar.", 4);
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					PLAYER_TEMP[playerid][py_TRASH_PASSENGER] = false;
					PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	printf("OnPlayerExitVehicle %d %d",playerid,vehicleid); // debug juju
	StopAudioStreamForPlayer(playerid);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	printf("OnPlayerEnterVehicle %d %d %d",playerid,vehicleid,ispassenger); // debug juju
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;

	PLAYER_TEMP[playerid][py_VEHICLEID] = vehicleid;

	if (PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if (ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
		{
			if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
			{
				new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_ENTER_VEHICLE]);

				if (interval < 50)
				{
					if (!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					else
					{
						if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if (PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					}
				}
				PLAYER_TEMP[playerid][py_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
			}
		}
	}

	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z);
	    ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
	}

	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);

	if (!ispassenger)
	{
		if (PLAYER_TEMP[playerid][py_CUFFED])
		{
			ShowPlayerMessage(playerid, "~r~No puedes hacer eso estando esposado.", 3);
			return 0;
		}

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if (PLAYER_TEMP[playerid][py_CJ_WARNINGS] >= 5)
			{
				KickEx(playerid);
				return 1;
			}

			PLAYER_TEMP[playerid][py_CJ_WARNINGS] ++;

			new str_text[128];
			format(str_text, sizeof(str_text), "Advertencia ~r~%d/5", PLAYER_TEMP[playerid][py_CJ_WARNINGS]);
			ShowPlayerNotification(playerid, str_text, 3);

			ShowPlayerMessage(playerid, "~r~No puedes robar vehículos ocupados.", 3);
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			//SetPlayerVirtualWorld(playerid, playerid);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][19]);
			PLAYER_TEMP[playerid][py_TIMERS][19] = SetTimerEx("CarJackingFinish", 1000, false, "i", playerid);
			return 1;
		}

		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if (!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				new str_text[128];
				format(str_text, sizeof(str_text), "Necesitas ser %s para manejar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				ShowPlayerMessage(playerid, str_text, 3);

				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if (GLOBAL_VEHICLES[vehicleid][gp_vehicle_vip] && !ACCOUNT_INFO[playerid][ac_SU])
			{
			    ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP ~w~para usar éste vehículo.", 3);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if (PLAYER_TEMP[playerid][py_WORKING_IN] && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				new str_text[128];
				format(str_text, sizeof(str_text), "Tienes que dejar de estar de servicio como %s.", work_info[ PLAYER_TEMP[playerid][py_WORKING_IN] ][work_info_NAME]);
				ShowPlayerNotification(playerid, str_text, 3);

				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if (WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					new str_text[128];
					format(str_text, sizeof(str_text), "Necesitas estar de servicio de %s para poder conducir éste vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
					ShowPlayerNotification(playerid, str_text, 3);

					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}

			if (WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				new str_text[128];
				format(str_text, sizeof(str_text), "Necesitas más experiencia en este trabajo para llevar éste vehículo. (%d/%d)", PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				ShowPlayerNotification(playerid, str_text, 3);

				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	else
	{
		if (WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if (!PLAYER_WORKS[playerid][WORK_TRASH])
			{
				new str_text[128];
				format(str_text, sizeof(str_text), "Necesitas ser %s para manejar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				ShowPlayerMessage(playerid, str_text, 3);

				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}

		if (PLAYER_TEMP[playerid][py_CUFFED])
		{
			ShowPlayerMessage(playerid, "~r~No puedes hacer eso estando esposado.", 3);
			return 0;
		}
	}

	if (PLAYER_WORKS[playerid][WORK_FISHER])
	{
		if (!ispassenger)
		{
			if (IsPlayerInRangeOfPoint(playerid, 35.0, 2112.460205, -97.572998, 2.143339) && GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 453)
			{
				ShowPlayerMessage(playerid, "Dirígete a una ~y~boya~w~ para pescar.", 4);
			}
		}
	}

	if (PLAYER_MISC[playerid][MISC_RADIO_STATION] < 100)
	{
		if (!ispassenger)
		{
			if (GetPlayerInterior(playerid) == 0) PlayAudioStreamForPlayer(playerid, RADIO_STATIONS[ PLAYER_MISC[playerid][MISC_RADIO_STATION] ][r_URL]);
		}
	}

	/*if (PLAYER_WORKS[playerid][WORK_CLEANER])
	{
		if (!ispassenger)
		{
			if (IsPlayerInRangeOfPoint(playerid, 22.0, 1623.531616, -1894.376831, 13.550236) && GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 574)
			{
				PLAYER_TEMP[playerid][py_CLEANER_INDEX] = minrand(0, sizeof(CleanerRoutes));
				PLAYER_TEMP[playerid][py_CLEANER_CHECKPOINT] = CreateDynamicCP(CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][0], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][1], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][2], 7.0, 0, 0, playerid, 9999999999.0);
				StartTracing(playerid, CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][0], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][1], CleanerRoutes[ PLAYER_TEMP[playerid][py_CLEANER_INDEX] ][2]);
				
				new info[1];
				info[0] = CHECKPOINT_TYPE_CLEANER;
				Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_CLEANER_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

				ShowPlayerMessage(playerid, "Dirígete al ~r~punto~w~ marcado.", 4);
			}
		}
	}*/

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 481 || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 509 || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 510)
	{
		if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
        {
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
			UpdateVehicleParams(vehicleid);
		}
	}

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK)
	{
		DisableRemoteVehicleCollisions(playerid, 0);
	}
	return 1;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if (static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, COLOR_WHITE, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, COLOR_WHITE, false);

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "B1G 1337");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);

	if (vehicle_id == INVALID_VEHICLE_ID) return false;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
	RegisterNewPlayerVehicle(playerid, vehicle_id);

	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	new DBResult:Result, DB_Query[400];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PLAYER_VEHICLES`\
			(\
				`ID_USER`, `MODELID`, `SPAWN_X`, `SPAWN_Y`, `SPAWN_Z`, `SPAWN_ANGLE`, `COLOR_1`, `COLOR_2`, `GAS`, `MAX_GAS`\
			)\
			VALUES\
			(\
				'%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f'\
			);\
			SELECT MAX(`ID`) FROM `PLAYER_VEHICLES`;\
		",
		ACCOUNT_INFO[playerid][ac_ID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = db_get_field_int(Result, 0);
		format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());

		DB_Query[0] = EOS;
		format
		(
			DB_Query, sizeof DB_Query,
			"\
				INSERT INTO `PLAYER_VEHICLE_COMPONENTS` (`ID_VEHICLE`) VALUES ('%d');\
				UPDATE `PLAYER_VEHICLES` SET `PLATE` = '%q' WHERE `ID` = '%d';\
			",
				PLAYER_VEHICLES[vehicleid][player_vehicle_ID],
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]
		);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);

	return 1;
}

LoadPlayerVehicles(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof(DB_Query), "SELECT `PLAYER_VEHICLES`.*, `PLAYER_VEHICLE_COMPONENTS`.* FROM `PLAYER_VEHICLES`, `PLAYER_VEHICLE_COMPONENTS` WHERE `PLAYER_VEHICLES`.`ID_USER` = '%d' AND `PLAYER_VEHICLE_COMPONENTS`.`ID_VEHICLE` = `PLAYER_VEHICLES`.`ID` ORDER BY `PLAYER_VEHICLES`.`ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);

	new total_vehicles;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("[debug]  MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}

		new modelid, Float:pos[4], color[2];
		modelid = db_get_field_assoc_int(Result, "MODELID");
		pos[0] = db_get_field_assoc_float(Result, "SPAWN_X");
		pos[1] = db_get_field_assoc_float(Result, "SPAWN_Y");
		pos[2] = db_get_field_assoc_float(Result, "SPAWN_Z");
		pos[3] = db_get_field_assoc_float(Result, "SPAWN_ANGLE");
		color[0] = db_get_field_assoc_int(Result, "COLOR_1");
		color[1] = db_get_field_assoc_int(Result, "COLOR_2");

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle
		(
			modelid,
			pos[0],
			pos[1],
			pos[2],
			pos[3],
			color[0],
			color[1],
			-1
		);

		if (vehicle_id == INVALID_VEHICLE_ID)
		{
			db_free_result(Result);
			return false;
		}

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;

		PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
		PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
		PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = db_get_field_assoc_int(Result, "ID");
		PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;

		db_get_field_assoc(Result, "PLATE", GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = pos[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = pos[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = pos[2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = pos[3];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = db_get_field_assoc_int(Result, "DAMAGE_PANELS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = db_get_field_assoc_int(Result, "DAMAGE_DOORS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = db_get_field_assoc_int(Result, "DAMAGE_LIGHTS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = db_get_field_assoc_int(Result, "DAMAGE_TIRES");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = db_get_field_assoc_int(Result, "PAINTJOB");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = db_get_field_assoc_float(Result, "MAX_GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = db_get_field_assoc_float(Result, "GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = db_get_field_assoc_int(Result, "CLOSED");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = db_get_field_assoc_int(Result, "STATE");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = db_get_field_assoc_int(Result, "WORLD");

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][0] = db_get_field_assoc_int(Result, "SLOT_0");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][1] = db_get_field_assoc_int(Result, "SLOT_1");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][2] = db_get_field_assoc_int(Result, "SLOT_2");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][3] = db_get_field_assoc_int(Result, "SLOT_3");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][4] = db_get_field_assoc_int(Result, "SLOT_4");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][5] = db_get_field_assoc_int(Result, "SLOT_5");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][6] = db_get_field_assoc_int(Result, "SLOT_6");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][7] = db_get_field_assoc_int(Result, "SLOT_7");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][8] = db_get_field_assoc_int(Result, "SLOT_8");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][9] = db_get_field_assoc_int(Result, "SLOT_9");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][10] = db_get_field_assoc_int(Result, "SLOT_10");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][11] = db_get_field_assoc_int(Result, "SLOT_11");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][12] = db_get_field_assoc_int(Result, "SLOT_12");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][13] = db_get_field_assoc_int(Result, "SLOT_13");

		if (!ACCOUNT_INFO[playerid][ac_SU])
		{
			if (total_vehicles >= MAX_NU_VEHICLES)
			{
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
				PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
			}
		}

		new DBResult:Result_vobjects, vobjects;
		format(DB_Query, sizeof(DB_Query), "SELECT * FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU_VOBJECTS);
		Result_vobjects = db_query(Database, DB_Query);

		for(new z; z < db_num_rows(Result_vobjects); z++ )
		{
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_VALID] = true;
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ID] = db_get_field_assoc_int(Result_vobjects, "ID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE] = db_get_field_assoc_int(Result_vobjects, "TYPE");
			db_get_field_assoc(Result_vobjects, "NAME", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_NAME], 32);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_MODELID] = db_get_field_assoc_int(Result_vobjects, "MODELID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][0] = db_get_field_assoc_float(Result_vobjects, "OFF_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][1] = db_get_field_assoc_float(Result_vobjects, "OFF_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][2] = db_get_field_assoc_float(Result_vobjects, "OFF_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][0] = db_get_field_assoc_float(Result_vobjects, "ROT_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][1] = db_get_field_assoc_float(Result_vobjects, "ROT_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][2] = db_get_field_assoc_float(Result_vobjects, "ROT_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ATTACHED] = db_get_field_assoc_int(Result_vobjects, "ATTACHED");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][0] = db_get_field_assoc_int(Result_vobjects, "COLOR_0");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][1] = db_get_field_assoc_int(Result_vobjects, "COLOR_1");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][2] = db_get_field_assoc_int(Result_vobjects, "COLOR_2");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][3] = db_get_field_assoc_int(Result_vobjects, "COLOR_3");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][4] = db_get_field_assoc_int(Result_vobjects, "COLOR_4");
			db_get_field_assoc(Result_vobjects, "TEXT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_TEXT], 32);
			db_get_field_assoc(Result_vobjects, "FONT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT], 24);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_SIZE] = db_get_field_assoc_int(Result_vobjects, "FONT_SIZE");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_BOLD] = db_get_field_assoc_int(Result_vobjects, "FONT_BOLD");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_COLOR] = db_get_field_assoc_int(Result_vobjects, "FONT_COLOR");
			UpdateVehicleAttachedObject(vehicle_id, vobjects, true);

			vobjects ++;
			db_next_row(Result_vobjects);
		}
		db_free_result(Result_vobjects);

		SetVehicleToRespawnEx(vehicle_id);



		new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
		if (max_slots > 0)
		{
			new DBResult:boot_Result, boot_DB_Query[90], boot_slot;
			format(boot_DB_Query, sizeof(boot_DB_Query), "SELECT * FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], max_slots);
			boot_Result = db_query(Database, boot_DB_Query);
			for(new x; x < db_num_rows(boot_Result); x++ )
			{
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_VALID] = true;
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_assoc_int(boot_Result, "ID_OBJECT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_TYPE] = db_get_field_assoc_int(boot_Result, "TYPE");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT] = db_get_field_assoc_int(boot_Result, "INT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT_EXTRA] = db_get_field_assoc_int(boot_Result, "INT_EXTRA");

				boot_slot ++;
				db_next_row(boot_Result);
			}
			db_free_result(boot_Result);
		}

		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
  if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

  for(new i = 0; i != MAX_VEHICLES; i ++)
  {
    if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
    if (PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

    GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
    GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
    GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
    if (GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
    if (GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
    GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
    GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = 0; /*GetVehicleVirtualWorld(i);*/

    new DB_Query[1800];
    format(DB_Query, sizeof DB_Query,
    "\
	 UPDATE `PLAYER_VEHICLES` SET \
	   `PLATE` = '%q',\
	   `MODELID` = '%d',\
	   `SPAWN_X` = '%f',\
	   `SPAWN_Y` = '%f',\
	   `SPAWN_Z` = '%f',\
	   `SPAWN_ANGLE` = '%f',\
	   `HEALTH` = '%f',\
	   `DAMAGE_PANELS` = '%d',\
	   `DAMAGE_DOORS` = '%d',\
	   `DAMAGE_LIGHTS` = '%d',\
	   `DAMAGE_TIRES` = '%d',\
	   `COLOR_1` = '%d',\
	   `COLOR_2` = '%d',\
	   `PAINTJOB` = '%d',\
	   `GAS` = '%f',\
	   `MAX_GAS` = '%f',\
	   `CLOSED` = '%d',\
	   `INTERIOR` = '%d',\
	   `WORLD` = '%d',\
	   `STATE` = '%d' \
	 WHERE `ID` = '%d';\
    ",
	 GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE],
	 GLOBAL_VEHICLES[i][gb_vehicle_MODELID],
	 GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
	 GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y],
	 GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z],
	 GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE],
	 GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
	 GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS],
	 GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS],
	 GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS],
	 GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
	 GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1],
	 GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2],
	 GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB],
	 GLOBAL_VEHICLES[i][gb_vehicle_GAS],
	 GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
	 GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS],
	 GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR],
	 GLOBAL_VEHICLES[i][gb_vehicle_WORLD],
	 GLOBAL_VEHICLES[i][gb_vehicle_STATE],

	 PLAYER_VEHICLES[i][player_vehicle_ID]
    );
    db_query(Database, DB_Query);

    for(new x = 0; x != MAX_VEHICLE_COMPONENTS; x ++)
    {
	 DB_Query[0] = EOS;

	 format(DB_Query, sizeof DB_Query,
	 "\
	   UPDATE `PLAYER_VEHICLE_COMPONENTS` SET \
		`SLOT_0` = '%d',\
		`SLOT_1` = '%d',\
		`SLOT_2` = '%d',\
		`SLOT_3` = '%d',\
		`SLOT_4` = '%d',\
		`SLOT_5` = '%d',\
		`SLOT_6` = '%d',\
		`SLOT_7` = '%d',\
		`SLOT_8` = '%d',\
		`SLOT_9` = '%d',\
		`SLOT_10` = '%d',\
		`SLOT_11` = '%d',\
		`SLOT_12` = '%d',\
		`SLOT_13` = '%d' \
	   WHERE `ID_VEHICLE` = '%d';\
	 ",
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12],
	   GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13],

	   PLAYER_VEHICLES[i][player_vehicle_ID]
	 );
	 db_query(Database, DB_Query);
    }

    if (destroy) DestroyVehicleEx(i);
  }
  return 1;
}

public OnVehicleSpawn(vehicleid)
{
	printf("OnVehicleId %d",vehicleid); // debug juju
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;

	if (IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if (TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;

		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TRUCK: ResetTruckInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
		}
	}

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_RENT)
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		RepairVehicleEx(vehicleid);
	}

	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
    ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
	UpdateVehicleParams(vehicleid);
	return 1;
}

UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if (forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 1;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID)
{
	if (forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 1;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return LinkVehicleToInterior(vehicleid, interior);
}

SetVehicleToRespawnEx(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	printf("OnVehicleDeat",vehicleid,killerid); // debug juju
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;

	if (IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if (VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}

			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if (playerid != INVALID_PLAYER_ID)
			{
				if (PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(38350, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if (PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
					{
						if ((PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][py_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessageEx(playerid, COLOR_WHITE, ""COL_GREEN"[Mensaje] "COL_WHITE"%s: %s", convertPhoneNumber(playerid, 38350), message);
							//PlayAudioStreamForPlayer(playerid, "https://www.dl.dropboxusercontent.com/s/do1ntkjac2kb7qn/ntf.mp3");
						}
					}
				}
			}
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if (ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled])
		{
			if (PLAYER_TEMP[playerid][py_KICKED]) return 0;

			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);

			if (gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if (veh_dis > 20.0 && veh_z > -70.0)
				{
					if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY])
					{
						if (!ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						else
						{
							if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] = gettime();
							if (PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						}
					}

					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			}
		}

		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if (spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if (TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] == 453) return 1;
				if (spawn_distance < 25.0)
				{
					if (spawn_distance > 25.0) SetVehicleToRespawnEx(vehicleid);
				}
			}
		}
	}
    return 1;
}

GetPlayerIdFromAccountId(accountid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (ACCOUNT_INFO[i][ac_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

#define NECESSARY_TIME_BETWEEN_WORKS 30
CheckWorkSite(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;

	new str_text[128];

	new player_jobs = CountPlayerJobs(playerid);
	if (ACCOUNT_INFO[playerid][ac_SU])
	{
		if (player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	else
	{
		if (player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			ShowPlayerMessage(playerid, "Necesitas ser ~p~VIP~w~ para tener más trabajos.", 4);
			return 1;
		}
	}

	for(new i = 0; i != sizeof obtain_work_coords; i ++)
	{
		if (work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

		if (GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if (work_info[i][work_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
				{
					format(str_text, sizeof(str_text), "~s~Tienes que ser nivel %d para este trabajo.", work_info[i][work_info_LEVEL]);
					ShowPlayerMessage(playerid, str_text, 4);
					return 1;
				}

				if (PLAYER_WORKS[playerid][i])
				{
					format(str_text, sizeof(str_text), "~s~Ya eres %s", work_info[i][work_info_NAME]);
					return ShowPlayerMessage(playerid, str_text, 3);
				}

				DeletePlayerJobs(playerid);

				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '1' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], i);
				db_query(Database, DB_Query);

				PLAYER_WORKS[playerid][i] = true;
				PLAYER_TEMP[playerid][py_LAST_GOT_WORK_TIME] = gettime();
				format(str_text, sizeof(str_text), "Felicidades, ahora eres %s.", work_info[i][work_info_NAME]);
				ShowPlayerNotification(playerid, str_text, 3);
			    SavePlayerWorks(playerid);

			    switch(i)
				{
					case WORK_TRUCK:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de camionero", ""COL_WHITE"\
							Ante todo, bienvenido a la empresa.\n\n\
							Tu trabajo será transportar productos entre diferentes\n\
							puntos de la ciudad y los pueblos que la rodean.\n\n\
							Trabajamos con todo tipo de productos. Desde pequeños comercios de\n\
							comida o tiendas de ropa o hasta productos industriales.", "Cerrar", "");
						return 1;
					}
					case WORK_MECHANIC:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de mecánico", ""COL_WHITE"Bienvenido\n\
							Aquí nos encargamos de arreglar los vehículos de la gente y modificarlos, para eso necesitas\n\
							tener piezas, puedes comprarlas en el almacén de atrás.\n\n\
							Para ponerte en servicio presiona H en este mismo lugar.", "Cerrar", "");
						return 1;
					}
					case WORK_HARVESTER:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de cosechador", ""COL_WHITE"\
							Bienvenido al mundo agrícola.\n\n\
							Aquí nos encargamos de recolectar todos los cultivos de la\n\
							temporada, usando nuestras cosechadoras, súbete a alguna\n\
							para comenzar a trabajar.", "Cerrar", "");
						return 1;
					}
					case WORK_TRASH:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de basurero", ""COL_WHITE"\
							En este trabajo deberás andar en un camión de basura\n\
							para limpiar la ciudad. Puedes ser tanto el conductor\n\
							del camión, o como un recolector de basura.", "Cerrar", "");
						return 1;
					}
					case WORK_FARMER:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de granjero", ""COL_WHITE"Bienvenido al campo, compadre.\nNosotros no encargamos de cultivar, solamente plantas y ya\n\
							Puedes hacerlo en cualquier lugar, donde quieras pero que no se te vaya el tiempo o\n\
							tu planta se va a expirar.", "Cerrar", "");
						return 1;
					}
					case WORK_MINER:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de minero", ""COL_WHITE"\
							Ante todo, bienvenido a la empresa.\n\n\
							Tu principal función será la búsqueda y extracción de minerales.\n\n\
							Encontramos todo tipo de minerales. Desde diamantes, hasta un simple carbón.\n\
							Comenzarás buscando unos dos minerales, el carbón y el hierro.\n\
							Una vez te hayas familiarizado con el labor, te asignarán una mina\n\
							más rica en minerales. Eso quieres decir, un mejor pago.", "Cerrar", "");
						return 1;
					}
					case WORK_FISHER:
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de pescador", ""COL_WHITE"\
							Ante todo, bienvenido a las aguas camarada.\n\n\
							Aqui nos encargamos de administrar los pescados\n\
							mas frescos de todo San Andreas. Súbete a un barco\n\
							y dirígete a una boya, pero recuerda que necesitas\n\
							una caña de pescar.", "Cerrar", "");
						return 1;
					}
					/*case WORK_CLEANER:
					{
						ShowPlayerDialog(playerid, 1, DIALOG_STYLE_MSGBOX, ""COL_RED"Empleo de barredor", ""COL_WHITE"
							Bienvenido al trabajo.\n\n
							Súbete a un barredor y ve al punto que te marque, luego\n
							vuelve aquí a recibir la paga.", "Cerrar", "");
						return 1;
					}*/
				}
			}
		}
	}
	return 1;
}

CMD:dimitir(playerid, params[])
{
	new str_text[128];
	new player_jobs = CountPlayerJobs(playerid);

	if (!player_jobs) return ShowPlayerMessage(playerid, "~r~No tienes un trabajo.", 2);

	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	new work;
	if (sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if (PLAYER_WORKS[playerid][i])
			{
				if (count > 0) strcat(works, ", ");

				format(line_str, sizeof line_str, "%s (%d)", work_info[i][work_info_NAME], i);
				strcat(works, line_str);

				count ++;
			}
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "Trabajos: %s", works);
		SendClientMessage(playerid, COLOR_WHITE, "Syntax: /renunciar <Num. del trabajo>");
		return 1;
	}

	if (work < 1 || work >= sizeof work_info) return SendClientMessage(playerid, COLOR_WHITE, "El trabajo no es válido.");

	if (!PLAYER_WORKS[playerid][work])
	{
		format(str_text, sizeof(str_text), "No eres %s.", work_info[work][work_info_NAME]);
		return ShowPlayerNotification(playerid, str_text, 3);
	}

	if (PLAYER_TEMP[playerid][py_WORKING_IN] == work) return ShowPlayerMessage(playerid, "~r~Estás de servicio en ese trabajo, deja de trabajar para renunciar.", 3);

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
	db_query(Database, DB_Query);

	if (work == WORK_POLICE)
	{
		format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
		db_query(Database, DB_Query);

		PLAYER_SKILLS[playerid][work] = 0;
	}

	format(str_text, sizeof(str_text), "Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	ShowPlayerNotification(playerid, str_text, 3);
	PLAYER_WORKS[playerid][work] = false;
	return 1;
}
alias:dimitir("renunciar");

SetPlayerVehiclePark(playerid)
{
	new vehicleid = INVALID_VEHICLE_ID;
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);

	if (vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "~r~No estás en tu vehículo para aparcarlo.", 2);
	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Este no es tú vehículo.", 2);
	if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~Este no es tú vehículo.", 2);

	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	ShowPlayerNotification(playerid, "Has estacionado tu vehículo, cuando sea destruido o spawneado volverá a aparecer aquí.", 5);
	return 1;
}

CALLBACK: StartVehicleEngine(playerid, vehicleid)
{
	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED) return ShowPlayerMessage(playerid, "~r~Motor dañado.", 1);
	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1) return ShowPlayerMessage(playerid, "~r~Sin gasolina.", 1);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(vehicleid);
	}

	ShowPlayerMessage(playerid, "~g~Encendiendo...", 2);
	return 1;
}

CMD:motor(playerid, params[])
{
	SetEngineAction(playerid);
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);

		if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;
		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	printf("OnEnterExitMoDsHOP",playerid); // debug juju
    if (enterexit) // Entra
    {
		ShowPlayerMessage(playerid, "~r~Solo puedes tunear vehículos en el mecánico, búscalo con el /GPS.", 2);
		//SendClientMessage(playerid, COLOR_WHITE, "{ffff35}[ATENCION] "COL_WHITE"Si reaflizas alguna modificación al vehículo en este garaje serás expulsado.");
    }
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	printf("OnVehicleMod %d %d %d",playerid,vehicleid,componentid); // debug juju
	if (ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if (!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if (PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	printf("OnVehiclePaintJob %d %d %d",playerid,vehicleid,paintjobid); // debug juju
	if (ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if (!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if (!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if (PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 1;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 1;
	}

	if (DestroyVehicle(vehicleid))
	{
		if (IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		new temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		new temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		new temp_SELL_VEHICLES[SELL_VEHICLES_Enum]; SELL_VEHICLES[vehicleid] = temp_SELL_VEHICLES;

		new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;

		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
		{
			if (VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}

		return true;
	}
	return false;
}

getRandomLetter()
{
    return 65 + random(25);
}

ShowPlayerSpeedoMeter(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if (!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return 0;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][8]);

	new td_str[64];
	format(td_str, sizeof td_str, "%.1f", GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], td_str);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);

	PLAYER_TEMP[playerid][py_SPEEDOMETER] = true;
	PLAYER_TEMP[playerid][py_FUEL_DOWN_TIME] = gettime();
	PLAYER_TEMP[playerid][py_TIMERS][8] = SetTimerEx("UpdatePlayerSpeedo", 50, true, "iif", playerid, vehicleid, VEHICLE_INFO[modelid - 400][vehicle_info_MAX_VEL]);
	return 1;
}

HidePlayerSpeedoMeter(playerid)
{
	PLAYER_TEMP[playerid][py_SPEEDOMETER] = false;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);
	return 1;
}

CALLBACK: UpdatePlayerSpeedo(playerid, vehicleid, Float:maxvel)
{
	if (vehicleid != GetPlayerVehicleID(playerid))
	{
		HidePlayerSpeedoMeter(playerid);
		ShowPlayerSpeedoMeter(playerid);

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
		PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] = GetPlayerVehicleID(playerid);
		GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = true;
		return 0;
	}

	new Float:vel = GetVehicleSpeed(vehicleid);

	if (ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
	{
		if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
		{
			if (vel > maxvel + 100.0)
			{
				if (!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				else
				{
					if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = gettime();
					if (PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				}
			}
		}
	}

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
	{
		GetVehicleHealth(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH)
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH], playerid);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			ShowPlayerMessage(playerid, "~r~Motor dañado.", 2);
		}
	}

	if (gettime() > PLAYER_TEMP[playerid][py_FUEL_DOWN_TIME] + 5)
	{
		if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] -= floatmul(floatdiv(vel, maxvel), 0.1);

			if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1)
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);

			    ShowPlayerMessage(playerid, "~r~El vehículo se ha quedado sin gasolina", 2);
			}
		}
		PLAYER_TEMP[playerid][py_FUEL_DOWN_TIME] = gettime();
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_IN_PHONE] == true) return HidePlayerSpeedoMeter(playerid);

	new td_str[64],
		td_str_vel[64],
		Float:size_vel,
		Float:size_gasoline;

	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < 450.0)
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	}
	else
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	}

	size_vel = 544.0 + (floatround(vel) * 0.5);
	if (size_vel < 632.0)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], size_vel, 0.000000);
	}

	size_gasoline = 544.0 + (GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] * 0.9);
	if (size_gasoline < 632.0)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], size_gasoline, 0.000000);
	}

	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], AdjustDarkness(VEHICLE_COLORS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] ], 1.75));
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], VEHICLE_COLORS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] ]);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], AdjustDarkness(VEHICLE_COLORS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] ], 1.75));
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], VEHICLE_COLORS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] ]);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);

	format(td_str, sizeof td_str, "%.1f", GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], td_str);

	format(td_str_vel, sizeof td_str_vel, "%d", floatround(vel));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], td_str_vel);

	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	return 1;
}

Float:GetVehicleSpeed(vehicleid)
{
    new Float:vx, Float:vy, Float:vz;
    GetVehicleVelocity(vehicleid, vx, vy, vz);
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid,
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);

	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO], sizeof PROPERTY_INTERIORS - 1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;

	SetPlayerPosEx
	(
		playerid,
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);

	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if (slot == -1)
	{
	    ShowPlayerMessage(playerid, "~r~No hay mas slots.", 2);
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}

	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];

	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][1];
	PROPERTY_INFO[slot][property_LEVEL] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][0];
	PROPERTY_INFO[slot][property_EXTRA] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][3];
	PROPERTY_INFO[slot][property_VIP_LEVEL] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][2];
	PROPERTY_INFO[slot][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[slot][property_PRICE], MULTIPLIER_PROPERITES));

	if (PROPERTY_INFO[slot][property_EXTRA]) PROPERTY_INFO[slot][property_PRICE] = 0;
	if (PROPERTY_INFO[slot][property_VIP_LEVEL]) PROPERTY_INFO[slot][property_LEVEL] = 1;

	new DBResult:Result, DB_Query[600];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY`\
			(\
				`EXT_X`, `EXT_Y`, `EXT_Z`, `EXT_ANGLE`, `EXT_INTERIOR`, `EXT_FREEZE`, `ID_INTERIOR`\
			)\
			VALUES\
			(\
				'%f', '%f', '%f', '%f', '%d', '%d', '%d'\
			);\
			SELECT MAX(`ID`) FROM `PROPERTY`;\
		",
		PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE], PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE],
		PROPERTY_INFO[slot][property_ID_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PROPERTY_INFO[slot][property_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);

	DB_Query[0] = EOS;
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY_INFO`\
			(\
				`ID_PROPERTY`, `PRICE`, `LEVEL`, `EXTRA`, `VIP_LEVEL`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d', '%d', '%d'\
			);\
		",
		PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_PRICE_BASE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_VIP_LEVEL]
	);
	db_query(Database, DB_Query);

	new label_str[256], city[45], zone[45];
	GetPointZone(PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], city, zone);
	format(PROPERTY_INFO[slot][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[slot][property_ID]);

	if (PROPERTY_INFO[slot][property_VIP_LEVEL])
	{
		if (PROPERTY_INFO[slot][property_EXTRA])
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{F4DC42}Se requiere VIP (%d)\n\
					\n\
					"COL_WHITE"Propiedad {5DE141}#%d "COL_WHITE"está en venta\n\n\
					Interior: {5DE141}%d\n\
					"COL_WHITE"Coste: {5DE141}%d "SERVER_COIN"\n\
					"COL_WHITE"Nivel necesario: {5DE141}%d\n\
					"COL_WHITE"Usa {5DE141}/ayuda "COL_WHITE"para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_VIP_LEVEL], PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{F4DC42}Se requiere VIP (%d)\n\
					\n\
					"COL_WHITE"Propiedad {5DE141}#%d "COL_WHITE"está en venta\n\n\
					Interior: {5DE141}%d\n\
					"COL_WHITE"Precio: {5DE141}%s$\n\
					"COL_WHITE"Nivel: {5DE141}%d\n\
					"COL_WHITE"Usa {5DE141}/ayuda "COL_WHITE"para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_VIP_LEVEL], PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[slot][property_PRICE]), PROPERTY_INFO[slot][property_LEVEL]
			);
		}
	}
	else
	{
		if (PROPERTY_INFO[slot][property_EXTRA])
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					"COL_WHITE"Propiedad {5DE141}#%d "COL_WHITE"está en venta\n\n\
					Interior: {5DE141}%d\n\
					"COL_WHITE"Coste: {5DE141}%d "SERVER_COIN"\n\
					"COL_WHITE"Nivel necesario: {5DE141}%d\n\
					"COL_WHITE"Usa {5DE141}/ayuda "COL_WHITE"para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					"COL_WHITE"Propiedad {5DE141}#%d "COL_WHITE"está en venta\n\n\
					Interior: {5DE141}%d\n\
					"COL_WHITE"Precio: {5DE141}%s$\n\
					"COL_WHITE"Nivel necesario: {5DE141}%d\n\
					"COL_WHITE"Usa {5DE141}/ayuda "COL_WHITE"para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[slot][property_PRICE]), PROPERTY_INFO[slot][property_LEVEL]
			);
		}
	}

	PROPERTY_INFO[slot][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xF7F7F700, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_INT_PICKUP_ID] = CreateDynamicPickup(19902, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[slot][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	new info[3];
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	TOTAL_PROPERTIES_LOADED ++;

	SendClientMessageEx(playerid, COLOR_WHITE, "PROPIEDAD %d AÑADIDA.", PROPERTY_INFO[slot][property_ID]);
	SendClientMessageEx(playerid, COLOR_WHITE, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	ExitPlayerPropertyConstructor(playerid);
	return 1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if (!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}

SpaceFix(text[])
{
	new str[100 + 1]; format(str, sizeof str, "%s", text);
    for(new i = 0; i < strlen(str); i++)
	{
		if (str[i] == ' ') str[i] = '+';
	}
	return str;
}

GivePlayerDrunkLevel(playerid, ammount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + ammount);
}

/*RotateDynamicObject(objectid, Float:rotX, Float:rotY, Float:rotZ, Float:Speed)
{

		Rotation Speeds:
		0.01 - Very very slow speed
		1.00 - Normal speed
		5.00 - Fast speed

	new Float:X, Float:Y, Float:Z;
	new Float:SpeedConverted = floatdiv(floatmul(Speed, 0.01), 2);

	if (IsDynamicObjectMoving(objectid)) StopDynamicObject(objectid);
	GetDynamicObjectPos(objectid, X, Y, Z);
	SetDynamicObjectPos(objectid, X, Y, Z + 0.01);
	MoveDynamicObject(objectid, X, Y, Z, SpeedConverted, rotX, rotY, rotZ);
	return 1;
}*/

Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

SetMechanicPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (PLAYER_TEMP[i][py_WANT_MECHANIC])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf4c242FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMechanic(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (i == playerid) continue;
				if (!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if (PLAYER_TEMP[i][py_WORKING_IN] != WORK_MECHANIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0xf4c242FF);
				ShowPlayerMessage(i, "~y~Hay un nuevo cliente solicitando un mecánico.", 2);
				SendClientMessageEx(i, COLOR_WHITE, "Hay un nuevo cliente solicitando un mecánico, distancia: "COL_RED"%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerMechanicMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (i == playerid) continue;
				if (!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if (PLAYER_TEMP[i][py_WORKING_IN] != WORK_MECHANIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PLAYER_TEMP[i][py_PLAYER_COLOR]);
		}
	}
	return 1;
}

SavePlayerWorks(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 1; i != sizeof(PLAYER_WORKS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_WORKS` (`ID_USER`, `ID_WORK`, `SET`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_WORKS[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90], bool:found;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_CREW` WHERE `ID_USER` = '%d' LIMIT 1;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		PLAYER_CREW[playerid][player_crew_VALID] = true;
		PLAYER_CREW[playerid][player_crew_ID] = db_get_field_assoc_int(Result, "ID_CREW");
		PLAYER_CREW[playerid][player_crew_RANK] = db_get_field_assoc_int(Result, "RANK");

		for(new i = 0; i != MAX_CREWS; i ++)
		{
			if (!CREW_INFO[i][crew_VALID]) continue;

			if (CREW_INFO[i][crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
			{
				PLAYER_CREW[playerid][player_crew_INDEX] = i;
				CREW_INFO[i][crew_ONLINE_MEMBERS] ++;
				found = true;
				break;
			}
		}

		if (!found)
		{
			PLAYER_CREW[playerid][player_crew_VALID] = false;
			PLAYER_CREW[playerid][player_crew_ID] = 0;
			PLAYER_CREW[playerid][player_crew_RANK] = 0;
			PLAYER_CREW[playerid][player_crew_INDEX] = 0;
			ShowPlayerMessage(playerid, "~r~La banda a la que pertenecías ya no existe.", 3);

			format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
		}
	}
	else PLAYER_CREW[playerid][player_crew_VALID] = false;
	db_free_result(Result);
	return 1;
}

LoadPlayerWorks(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90], player_works, bool:affected;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_WORKS[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_WORKS[playerid][work] = db_get_field_assoc_int(Result, "SET");
		if (PLAYER_WORKS[playerid][work])
		{
			if (!ACCOUNT_INFO[playerid][ac_SU])
			{
				if (player_works >= MAX_NU_WORKS)
				{
					affected = true;
					PLAYER_WORKS[playerid][work] = false;
					break;
				}
			}
			player_works ++;
		}

		db_next_row(Result);
	}
	db_free_result(Result);

	if (affected) SavePlayerWorks(playerid);
	return 1;
}

SavePlayerSkills(playerid)
{
  if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

  new DB_Query[150];
  format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
  db_query(Database, DB_Query);

  for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
  {
    DB_Query[0] = EOS;
    format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_SKILLS` (`ID_USER`, `ID_WORK`, `TOTAL`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_SKILLS[playerid][i]);
    db_query(Database, DB_Query);
  }
  return 1;
}

LoadPlayerSkills(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_SKILLS[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_SKILLS[playerid][work] = db_get_field_assoc_int(Result, "TOTAL");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerMisc(playerid)
{
  if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

  new DB_Query[150];
  format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_MISC` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
  db_query(Database, DB_Query);

  for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++)
  {
    DB_Query[0] = EOS;
    format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_MISC` (`ID_USER`, `ID`, `EXTRA`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_MISC[playerid][i]);
    db_query(Database, DB_Query);
  }
  return 1;
}

LoadPlayerMisc(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_MISC` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_MISC[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new index = db_get_field_assoc_int(Result, "ID");
		PLAYER_MISC[playerid][index] = db_get_field_assoc_int(Result, "EXTRA");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

ResetTruckInfo(vehicleid)
{
	new tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;

	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}

CALLBACK: TruckLoadUp(playerid, vehicleid)
{
	if (PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] < 100)
	{
		PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] += 10;
		if (PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] > 100) PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] = 100;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
		PLAYER_TEMP[playerid][py_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;

	ShowPlayerMessage(playerid, "Ve a entregar la mercancía", 7);
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

CALLBACK: TruckUnLoadUp(playerid, vehicleid)
{
	if (PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] < 100)
	{
		PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] += 10;
		if (PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] > 100) PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] = 100;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
		PLAYER_TEMP[playerid][py_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;

	ShowPlayerMessage(playerid, "Vuelve a la ~y~estación", 7);
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
    	CancelTracing(playerid);
	}

	if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = CreateDynamicCP(2509.596923, -2628.955078, 13.645235, 5.0, 0, 0, playerid, 9999999999.0);
		StartTracing(playerid, 2509.596923, -2628.955078, 13.645235);

		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{

		PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);
		StartTracing(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z]);

		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	new str_text[64];
	format(str_text, sizeof(str_text), "Preparando camión ~g~%d%", PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] + minrand(1, 8));
	ShowPlayerMessage(playerid, str_text, 2);

	if (PLAYER_TEMP[playerid][py_TRUCK_LOADING_VALUE] > 99)
	{
		ShowPlayerMessage(playerid, "Preparando camión ~g~100%", 2);
	}
	return 1;
}

CMD:policia(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
	{
	    ShowPlayerMessage(playerid, "~r~Ya estas en servicio en otro trabajo.", 3);
		return 1;
	}

	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
	{
		if (!PLAYER_TEMP[playerid][py_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
		else EndPlayerJob(playerid);
	}

	return 1;
}

CMD:porton(playerid, params[])
{
	if (PLAYER_WORKS[playerid][WORK_MAFIA])
	{
		for(new i = 0; i != sizeof MAFIA_DOORS; i ++)
		{
			if (GetPlayerInterior(playerid) != MAFIA_DOORS[i][mafia_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != MAFIA_DOORS[i][mafia_door_WORLD]) continue;
			if (IsDynamicObjectMoving(MAFIA_DOORS[i][mafia_door_OBJECT_ID]) || !MAFIA_DOORS[i][mafia_door_CLOSED]) continue;

			if (IsPlayerInRangeOfPoint(playerid, 20.0, MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z]))
			{
				KillTimer(MAFIA_DOORS[i][mafia_door_TIMER]);
				MAFIA_DOORS[i][mafia_door_TIMER] = SetTimerEx("CloseMafiaDoor", 10000, false, "i", i);
				MoveDynamicObject(MAFIA_DOORS[i][mafia_door_OBJECT_ID], MAFIA_DOORS[i][mafia_door_X], MAFIA_DOORS[i][mafia_door_Y], MAFIA_DOORS[i][mafia_door_Z] - 15.0, 2.0, 0.0, 0.0, MAFIA_DOORS[i][mafia_door_RZ]);
				MAFIA_DOORS[i][mafia_door_CLOSED] = false;
				break;
			}
		}
	}
	return 1;
}

CMD:mecanico(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_MECHANIC]) return ShowPlayerMessage(playerid, "~r~No eres mecánico.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_MECHANIC)
	{
		//ShowPlayerMessage(playerid, "~r~Ya estas en servicio en otro trabajo.", 3);
		return 1;
	}

	if (GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
	if (!IsPlayerInRangeOfPoint(playerid, 1.0,-69.941520, -1181.400634, 1.750000)) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);

	if (!PLAYER_TEMP[playerid][py_WORKING_IN]) StartPlayerJob(playerid, WORK_MECHANIC);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:menu(playerid, params[])
{
	ShowRangeUser(playerid);
	SendClientMessage(playerid, COLOR_RED, "AVISO:"COL_WHITE" Esto es viejo, presione la tecla N para abrir el nuevo inventario.");
	return 1;
}

StartPlanting(playerid, type)
{
	if (GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
	if (PLAYER_TEMP[playerid][py_PLANTING]) return ShowPlayerMessage(playerid, "~r~Ya estas plantado algo.", 3);

	new str_text[128];

	if (gettime() < PLAYER_TEMP[playerid][py_LAST_PLANT_TIME] + 5)
	{
		new time = (60-(gettime()-PLAYER_TEMP[playerid][py_LAST_PLANT_TIME]));
		format(str_text, sizeof(str_text), "Tienes que esperar %s minutos para volver a plantar.", TimeConvert(time));
		ShowPlayerMessage(playerid, str_text, 4);
		return 1;
	}

	if (GetPlayerPlantedPlants(playerid) > 25) return ShowPlayerMessage(playerid, "~r~Tienes muchas plantas, recógelas para seguir", 4);

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if (!PLANTS[i][plant_VALID]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if (IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			ShowPlayerMessage(playerid, "Aquí ya hay una planta, aléjate un poco para plantar.", 4);
			return 1;
		}
	}

	switch(seed_info[type][seed_info_PLANT_TYPE])
	{
		case PLANT_TYPE_MEDICINE:
		{
			if (plant_info[type][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_MEDICINE])
			{
				ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
				return 1;
			}
			PLAYER_MISC[playerid][MISC_SEED_MEDICINE] -= plant_info[type][plant_info_SEEDS];
		}
		case PLANT_TYPE_CANNABIS:
		{
			if (plant_info[type][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CANNABIS])
			{
				ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
				return 1;
			}
			PLAYER_MISC[playerid][MISC_SEED_CANNABIS] -= plant_info[type][plant_info_SEEDS];
		}
		case PLANT_TYPE_CRACK:
		{
			if (plant_info[type][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CRACK])
			{
				ShowPlayerMessage(playerid, "~r~No tienes las semillas necesarias para plantar esta planta.", 3);
				return 1;
			}
			PLAYER_MISC[playerid][MISC_SEED_CRACK] -= plant_info[type][plant_info_SEEDS];
		}
	}

	format(str_text, sizeof(str_text), "Estas plantando %s, has gastado %d semillas.", plant_info[type][plant_info_NAME], plant_info[type][plant_info_SEEDS]);
	ShowPlayerNotification(playerid, str_text, 5);

	PLAYER_TEMP[playerid][py_LAST_PLANT_TIME] = gettime();
	PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] = type;
	PLAYER_TEMP[playerid][py_PLANTING] = true;
	PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] = minrand(0, 5);
	UpdatePlantSizeTextdrawPlant(playerid);

	TogglePlayerControllableEx(playerid, false);
	SetCameraBehindPlayer(playerid);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][12]);
	PLAYER_TEMP[playerid][py_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, plant_info[type][plant_info_SEEDS]);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if (GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
	if (PLAYER_TEMP[playerid][py_PLANTING]) return ShowPlayerMessage(playerid, "~r~Ya estas plantado algo.", 3);

	new str_text[128];

	if (gettime() < PLAYER_TEMP[playerid][py_LAST_PLANT_TIME] + 5)
	{
		new time = (60-(gettime()-PLAYER_TEMP[playerid][py_LAST_PLANT_TIME]));
		format(str_text, sizeof(str_text), "Tienes que esperar %s minutos para volver a plantar.", TimeConvert(time));
		ShowPlayerMessage(playerid, str_text, 4);
		return 1;
	}

	if (GetPlayerPlantedPlants(playerid) > 25) return ShowPlayerMessage(playerid, "~r~Tienes muchas plantas, recógelas para seguir", 4);

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if (!PLANTS[i][plant_VALID]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if (IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			ShowPlayerMessage(playerid, "Aquí ya hay una planta, aléjate un poco para plantar.", 4);
			return 1;
		}
	}

	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:piezas(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_MECHANIC]) return ShowPlayerMessage(playerid, "~r~No eres mecánico.", 3);
	if (GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);
	if (!IsPlayerInRangeOfPoint(playerid, 1.0, -82.038078, -1208.153564, 2.704517)) return ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);

	if (sscanf(params, "d", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /piezas "COL_WHITE"[cantidad]");
	if (params[0] <= 0 || params[0] >= 10000) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /piezas "COL_WHITE"[cantidad > 0]");

	new price = params[0] * 50;
	if (price > CHARACTER_INFO[playerid][ch_CASH])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas %s$ para poder comprar %d piezas.", number_format_thousand(price), params[0]);
		return 1;
	}

	GivePlayerCash(playerid, -price);
	PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += params[0];
	SavePlayerMisc(playerid);
	SendClientMessageEx(playerid, COLOR_WHITE, ""COL_WHITE"Has comprado %s piezas por %s$, ahora tienes %s piezas.", number_format_thousand(params[0]), number_format_thousand(price), number_format_thousand(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]));
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

Set_HARVEST_Checkpoint(playerid)
{
	if (IsValidDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if (PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] =    CreateDynamicRaceCP
														(
															1,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															5.0,
															0,
															0,
															playerid
														);
	}
	else
	{
		PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] =    CreateDynamicRaceCP
														(
															0,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ][2],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] + 1 ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] + 1 ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] + 1 ][2],
															5.0,
															0,
															0,
															playerid
														);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_HARVEST;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	printf("OnPlayerEnterDynamicRaceCp %d %d",playerid,checkpointid); // debug juju
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_HARVEST:
		{
			if (PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if (vehicleid == INVALID_VEHICLE_ID) return 1;

				new work_extra_payment;
				if (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] > 0 && work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_HARVESTER], work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP])));
					if (work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT] != 0) if (work_extra_payment > work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT];

					if (ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

				new money = minrand(570, 850) + WORK_HARVESTER;
			    new Float:x, Float:y, Float:z;
				GivePlayerCash(playerid, money);

				PLAYER_SKILLS[playerid][WORK_HARVESTER] ++;
			    SavePlayerSkills(playerid);
			    new str_text[25];
			    format(str_text,sizeof(str_text), "~g~+%s$", number_format_thousand(money));
				GameTextForPlayer(playerid, str_text, 5000, 1);
			    GetPlayerPos(playerid, x, y, z);
			    SetPlayerPos(playerid, x, y, z - 1);

			    new is_hycoin_best = minrand(0, 50);
			    if (is_hycoin_best == 38)
			    {
			    	new 
			    		random_hycoin = minrand(1, 3),
			    		coin_text[64];

			    	ACCOUNT_INFO[playerid][ac_SD] += random_hycoin;
			    	format(coin_text, sizeof(coin_text), "Acabas de ganar %d Hycoins.", random_hycoin);
			    	ShowPlayerNotification(playerid, coin_text, 4);
					new DB_Query[128];
					format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query);

					ApplyAnimation(playerid, "OTB", "WTCHRACE_WIN", 4.1, false, false, false, false, 0, false);
			    }

				EndPlayerJob(playerid);
				return 1;
			}

			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~~y~%d/%d", PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] + 1, sizeof(HARVEST_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);
			PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

			PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] ++;
			Set_HARVEST_Checkpoint(playerid);
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);

	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];

	if (cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT] = CreateDynamicCP(1621.435791, -2158.833740, 13.554687, 5.0, 0, 0, playerid, 9999999999.0);
	    StartTracing(playerid, 1621.435791, -2158.833740, 13.554687);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);
		StartTracing(playerid, TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ]);

		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]);
		CancelTracing(playerid);
		PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);

	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);

	PLAYER_TEMP[driver][py_TRASH_DRIVER] = false;
	PLAYER_TEMP[driver][py_TRASH_PASSENGER] = false;
	PLAYER_TEMP[driver][py_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	PLAYER_TEMP[mate][py_TRASH_DRIVER] = false;
	PLAYER_TEMP[mate][py_TRASH_PASSENGER] = false;
	PLAYER_TEMP[mate][py_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	KillTimer(PLAYER_TEMP[mate][py_TIMERS][10]);
	ClearAnimations(mate);
	TogglePlayerControllableEx(mate, true);

	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	new str_text[64];
	format(str_text, sizeof(str_text), "Recogiendo basura ~g~%d%", PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] + minrand(1, 8));
	ShowPlayerMessage(playerid, str_text, 2);

	if (PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] > 99)
	{
		ShowPlayerMessage(playerid, "Recogiendo basura ~g~100%", 2);
	}
	return 1;
}

CALLBACK: RecycleUp(playerid)
{
	if (PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] < 100)
	{
		PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] += 15;
		if (PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] > 100) PLAYER_TEMP[playerid][py_RECYCLE_BIN_VALUE] = 100;

		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][10]);
		PLAYER_TEMP[playerid][py_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}

	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);

	new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;

	CreatePlayerFlashObject(
								playerid,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	CreatePlayerFlashObject(
								driver,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);

	TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
	    ShowPlayerMessage(playerid, "Sube al camión para volver al ~y~vertedero ~w~y recibir la paga.", 3);
	    ShowPlayerMessage(driver, "Sube al camión para volver al ~y~vertedero ~w~y recibir la paga.", 3);
	}
	else ShowPlayerMessage(playerid, "Sube al camión para seguir con la ruta.", 3);

	SetPlayerTrashCheckpoint(driver, PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);

	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

CALLBACK: DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if (!IsPlayerConnected(pid)) return 0;
	if (ACCOUNT_INFO[pid][ac_ID] == 0) return 0;

	new caption[48];
	format(caption, sizeof caption, ""COL_RED"%s", PLAYER_TEMP[pid][py_RP_NAME]);

	new dialog[1800], line_str[128];

	format(line_str, sizeof line_str, ""COL_WHITE"Dinero: "COL_GREEN"%s$"COL_WHITE"\n", number_format_thousand(CHARACTER_INFO[pid][ch_CASH]));
	strcat(dialog, line_str);

	if (PLAYER_PHONE[pid][player_phone_VALID])
	{
		format(line_str, sizeof line_str, "Teléfono: %d"COL_WHITE"\n", PLAYER_PHONE[pid][player_phone_NUMBER]);
		strcat(dialog, line_str);
	}

	new player_weapons = CountPlayerWeapons(pid);
	if (player_weapons > 0)
	{
		format(line_str, sizeof line_str, "Armas: "COL_RED"%d"COL_WHITE"\n", player_weapons);
		strcat(dialog, line_str);
	}

	if (PLAYER_MISC[pid][MISC_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "Semillas Marihuana: "COL_YELLOW"%d"COL_WHITE"\n", PLAYER_MISC[pid][MISC_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}

	if (PLAYER_MISC[pid][MISC_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "Semillas Coca: "COL_YELLOW"%d"COL_WHITE"\n", PLAYER_MISC[pid][MISC_SEED_CRACK]);
		strcat(dialog, line_str);
	}

	if (PLAYER_MISC[pid][MISC_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "Marihuana: "COL_YELLOW"%d"COL_WHITE"\n", PLAYER_MISC[pid][MISC_CANNABIS]);
		strcat(dialog, line_str);
	}

	if (PLAYER_MISC[pid][MISC_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "Crack: "COL_YELLOW"%d"COL_WHITE"\n", PLAYER_MISC[pid][MISC_CRACK]);
		strcat(dialog, line_str);
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

/*CountPlayerToys(playerid)
{
	new toys;

	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if (PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;

	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if (PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}*/

CountPlayerWeapons(playerid)
{
	new weapons;

	for(new i = 0; i != 13; i ++)
	{
		if (PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if (!IsPlayerConnected(pid)) return 0;
	if (ACCOUNT_INFO[pid][ac_ID] == 0) return 0;

	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, ""COL_RED"%s", PLAYER_TEMP[pid][py_RP_NAME]);

	for(new i = 1; i != sizeof work_info; i ++)
	{
		if (i == WORK_POLICE)
		{
			if (PLAYER_WORKS[playerid][WORK_POLICE])
			{
				format(line_str, sizeof line_str, ""COL_WHITE"%c%s: "COL_GREEN"%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_SKILLS[pid][i]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, ""COL_WHITE"%c%s: "COL_GREEN"%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_SKILLS[pid][i]));
			strcat(dialog, line_str);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

		if (TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if (TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

CALLBACK: DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

UpdatePlantSizeTextdrawPlant(playerid)
{
	new str_text[64];
	format(str_text, sizeof(str_text), "Plantando ~g~%d %", PLAYER_TEMP[playerid][py_PLANTING_PROGRESS]);
	ShowPlayerMessage(playerid, str_text, 2);
	return 1;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][12]);
	PLAYER_TEMP[playerid][py_PLANTING] = false;
	PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] = 0;

	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

CALLBACK: PlantingUp(playerid, seeds)
{
	if (PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] < 100)
	{
		PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] += minrand(5, 20);
		if (PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] > 100) PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] = 100;

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);
		UpdatePlantSizeTextdrawPlant(playerid);
		KillTimer(PLAYER_TEMP[playerid][py_TIMERS][12]);
		PLAYER_TEMP[playerid][py_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, seeds);
		return 1;
	}

	PLAYER_TEMP[playerid][py_WORKING_IN] = WORK_NONE;
	PLAYER_TEMP[playerid][py_PLANTING] = false;
	PLAYER_TEMP[playerid][py_PLANTING_PROGRESS] = 0;

	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);

	//objeto planta: 2244

	new index = GetAvaiblePlantIndex();
	if (index == -1)
	{

		switch(seed_info[ PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
		{
			case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += plant_info[ PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += plant_info[ PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += plant_info[ PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
		}

		ShowPlayerMessage(playerid, "~r~No queda espacio para más plantas, prueba más tarde.", 3);
		return 1;
	}

	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_POS][0] += (1.0 * floatsin(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][1] += (1.0 * floatcos(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][2] -= 0.75;

	PLANTS[index][plant_VALID] = true;
	PLANTS[index][plant_GROWING] = true;
	PLANTS[index][plant_INVISIBLE] = true;
	PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
	PLANTS[index][plant_TYPE] = PLAYER_TEMP[playerid][py_PLANTING_PLANT_SELECTED];
	PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = ACCOUNT_INFO[playerid][ac_ID];
	format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", PLAYER_TEMP[playerid][py_RP_NAME]);
	PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], 0.0, 0.0, CHARACTER_INFO[playerid][ch_ANGLE], 0, 0);
	SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00F7F7F7);

	new info[2];
	info[0] = OBJECT_TYPE_PLANT;
	info[1] = index;
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);

	new label_str[256];
	format(label_str, sizeof label_str, ""COL_YELLOW"%s"COL_WHITE" de %s\n"COL_WHITE"Creciendo: %.1f%%", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
	PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xF7F7F700, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);

	KillTimer(PLANTS[index][plant_TIMER]);
	PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 15000, false, "d", index);

	SavePlayerSkills(playerid);
	ShowPlayerMessage(playerid, "Ahora espera a que la planta crezca, si pasan más de 5 minutos después~n~de que la planta haya crecido se destruirá.", 4);
	Streamer_Update(playerid);
	return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if (!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

CALLBACK: GrowPlantUp(plant)
{
	if (!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;

	if (PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if (PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;

		if (PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", COLOR_WHITE);
		}

		new label_str[256];
		format(label_str, sizeof label_str, ""COL_YELLOW"%s"COL_WHITE" de %s\n"COL_WHITE"Creciendo: %.1f%%", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xF7F7F700, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 15000, false, "d", plant);
		return 1;
	}

	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);

	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 1000;

	new label_str[256];
	format(label_str, sizeof label_str, ""COL_YELLOW"%s"COL_WHITE" de %s\n"COL_WHITE"Expira en %s minutos", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xF7F7F700, label_str);

	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

CALLBACK: ExpirePlantTime(plant)
{
	if (!PLANTS[plant][plant_VALID]) return 0;

	if (PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		PLANTS[plant][plant_EXPIRE_TIME] --;

		new label_str[256];
		format(label_str, sizeof label_str, ""COL_YELLOW"%s"COL_WHITE" de %s\n"COL_WHITE"Expira en %s minutos", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xF7F7F700, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}

	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);

	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);

	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	PLAYER_TEMP[playerid][py_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);

	UpdatePlayer_GPS_Map(playerid);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][13]);
	PLAYER_TEMP[playerid][py_TIMERS][13] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][13]);
	PLAYER_TEMP[playerid][py_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);

	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

CALLBACK: UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works

	*/
	if (!PLAYER_TEMP[playerid][py_GPS_MAP]) return KillTimer(PLAYER_TEMP[playerid][py_TIMERS][13]);

	new Float:pos[3];

	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PROPERTY_INDEX] ][property_EXT_Y];
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", COLOR_WHITE, 5.0, 5.0, pos[0], pos[1]);

	if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2];
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else
	{
		if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	switch(PLAYER_TEMP[playerid][py_WORKING_IN])
	{
		case WORK_NONE:
		{
			if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK:
		{
			if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_HARVESTER:
		{
			if (IsValidDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][py_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}

	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	if (cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(PLAYER_TEMP[playerid][py_WORKING_IN])
	{
		case WORK_MECHANIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if (IsPlayerConnected(i))
				{
					if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if (PLAYER_TEMP[i][py_WANT_MECHANIC])
						{
							if (cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][py_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][py_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][py_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][py_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf4c242FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, const icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y;

	if (x > 3000.0) x = 3000.0;
	else if (x < -3000.0) x = -3000.0;

	if (y > 3000.0) y = 3000.0;
	else if (y < -3000.0) y = -3000.0;

	new
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);

	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;

	if (PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}

/*GetIconTextdraw(iconid)
{
	new td_icon[24];

	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}

	return td_icon;
}*/

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	new DBResult:Result, DB_Query[380];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_WEAPONS` (`ID_USER`, `WEAPON_ID`, `AMMO`) VALUES ('%d', '%d', '%d');\
		SELECT MAX(`ID_WEAPON`) FROM `PLAYER_WEAPONS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

GivePlayerWeaponEx(playerid, weapon_id, ammo, color = 0x00F7F7F7)
{
	if (PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_COLOR] = color;

    SavePlayerWeaponsData(playerid);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	ac_ResetPlayerWeapons(playerid);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if (WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	
	if (PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
	
	if (ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if (GetPlayerWeapon(playerid) != weaponid)
		{
			if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if (!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if (PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}

	new string[200];
	if (weaponid != 38 && weaponid > 18 && weaponid < 34 && hittype == 1)
	{
		if (weaponid != 29 && weaponid != 30 && weaponid != 31)
		{
			new Float:cood[6], Float:DistantaAim, armaaim[128];
			GetPlayerPos(hitid, cood[0], cood[1], cood[2]);
			DistantaAim = GetPlayerDistanceFromPoint(playerid, cood[0], cood[1], cood[2]);
			GetWeaponName(weaponid, armaaim, sizeof(armaaim));

			if (GetPlayerTargetPlayer(playerid) == INVALID_PLAYER_ID && DistantaAim > 1 && DistantaAim < 31 && PLAYER_TEMP[playerid][py_AIM_DATA] == 1)
			{
				PLAYER_TEMP[playerid][py_SILENT_AIM_COUNT] ++;
				if (PLAYER_TEMP[playerid][py_SILENT_AIM_COUNT] >= 10)
				{
					PLAYER_TEMP[playerid][py_SILENT_AIM_COUNT] = 0;
					PLAYER_TEMP[playerid][py_AIMBOT_COUNT] ++;
					format(string, sizeof(string), "[ANTI-CHEAT] %s (%d): posible uso de Silent Aim con: %s (Distancia: %i mts)", ACCOUNT_INFO[playerid][ac_NAME], playerid, armaaim, floatround(DistantaAim));
					SendMessageToAdminsAC(COLOR_ANTICHEAT, string);
					SendDiscordWebhook(string, 1);
				}
				return 1;
			}

			GetPlayerLastShotVectors(playerid, cood[0],cood[1],cood[2], cood[3],cood[4],cood[5]);

			if (!IsPlayerInRangeOfPoint(hitid, 3.0, cood[3],cood[4],cood[5]))
			{
				PLAYER_TEMP[playerid][py_PRO_AIM_COUNT] ++;
				if (PLAYER_TEMP[playerid][py_PRO_AIM_COUNT] >= 5)
				{
					PLAYER_TEMP[playerid][py_PRO_AIM_COUNT] = 0;
					PLAYER_TEMP[playerid][py_AIMBOT_COUNT] ++;
					format(string, sizeof(string), "[ANTI-CHEAT] %s (%d): posible uso de ProAim con: %s (Distancia: %i mts)", ACCOUNT_INFO[playerid][ac_NAME], playerid, armaaim, floatround(DistantaAim));
					SendMessageToAdminsAC(COLOR_ANTICHEAT, string);
					SendDiscordWebhook(string, 1);
				}
			}

			if (PLAYER_TEMP[playerid][py_AIMBOT_COUNT] >= 3)
			{
				PLAYER_TEMP[playerid][py_AIMBOT_COUNT] = 0;

				new str_text[145];
		    	format(str_text, sizeof(str_text), "[ANTI-CHEAT] Kick sobre %s (%d): Aimbot (proaim count: %d, silentaim count: %d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, PLAYER_TEMP[playerid][py_PRO_AIM_COUNT], PLAYER_TEMP[playerid][py_SILENT_AIM_COUNT]);
		    	SendMessageToAdminsAC(COLOR_ANTICHEAT, str_text);
				SendDiscordWebhook(str_text, 1);
				SendClientMessageEx(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuiste expulsado - Razón: Sospecha de Aimbot");
				KickEx(playerid, 500);
			}
		}
	}

	if (ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if (player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if (!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if (PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}

	if (weaponid != 38)
	{
		if ((gettime() - PLAYER_TEMP[playerid][py_LAST_SHOT_TIME]) < 1)
		{
			PLAYER_TEMP[playerid][py_SHOT_DETECTIONS] ++;
		}
		else
		{
			PLAYER_TEMP[playerid][py_SHOT_DETECTIONS] = 0;
		}

		if (PLAYER_TEMP[playerid][py_SHOT_DETECTIONS] > 10)
		{
			KickEx(playerid, 100);
		}
		PLAYER_TEMP[playerid][py_LAST_SHOT_TIME] = gettime();
	}

	if (IsPlayerInSafeZone(playerid))
	{
		if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
		{
			FreezeThenAutoUnfreeze(playerid, 2000);
			ShowPlayerMessage(playerid, "~r~No dispares en zona segura.", 3);
		}
	}

	if (ACCOUNT_INFO[playerid][ac_LEVEL] == 1)
	{
		SendClientMessage(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuiste expulsado por disparar siendo nivel 1.");
		KickEx(playerid, 500);
	}

	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		SendClientMessage(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuiste expulsado por disparar estando herido.");
		KickEx(playerid, 500);
	}

	if (PLAYER_TEMP[playerid][py_EXPLOSION_BULLET] == true)
	{
		CreateExplosion(fX, fY, fZ, 12, 1.0);
	}
	
	if (PLAYER_CREW[playerid][player_crew_VALID])
	{
		if (gettime() > CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_LAST_ATTACK] + 600)
		{
			if (PLAYER_TEMP[playerid][py_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if (IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_AREA]))
				{
					if (TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID])
					{
						if (!TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING])
						{
							if (gettime() > TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_LAST_ATTACK] + 600)
							{
								if (!TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][py_LAST_TERRITORY]);
									if (attackers_in_area >= 4) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][py_LAST_TERRITORY], 300);
								}
								else
								{
									if (CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if (!CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][py_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{
											new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][py_LAST_TERRITORY]);
											if (attackers_in_area >= 4) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][py_LAST_TERRITORY], 300);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

    return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if (IsPlayerPaused(playerid)) return 0;

	if (issuerid != INVALID_PLAYER_ID && weapon == 23)
	{
	   SetPlayerChatBubble(playerid, "\n\n\n\n* Cae al piso al recibir el choque eléctrico de un tazer.\n\n\n", 0xffcb90FF, 20.0, 5000);
	   FreezeThenAutoUnfreeze(playerid, 10000);
	   ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
       ShowPlayerMessage(playerid, "~y~Te dieron una descarga eléctrica con un Tazer.", 3);
	   return 1;
	}

	if (IsPlayerConnected(issuerid))
	{
		new p_interior = GetPlayerInterior(issuerid);
		if (p_interior == 25 || p_interior == 26 || p_interior == 27)
		{
			SetPlayerPosEx(issuerid, 509.152374, -723.324951, 19.869243, 340.0, 0, 0);
			SetPlayerTime(issuerid, SERVER_TIME[0], SERVER_TIME[1]);
		}
	}
    return 1;
}

new ADMIN_LEVEL_AC_IMMUNITY = 1; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if (PLAYER_TEMP[playerid][py_KICKED]) return 1;


	if (gettime() < PLAYER_TEMP[playerid][py_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], player_state = GetPlayerState(playerid);

	if (ac_Info[cheat][ac_Kick])
	{
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(ACCOUNT_INFO[playerid][ac_ID], COLOR_WHITE, TYPE_KICK, bad_history);

		if (extra != 0.0) format(ac_message, sizeof ac_message, "[ANTI-CHEAT] Kick sobre %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "[ANTI-CHEAT] Kick sobre %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);

		SendClientMessageEx(playerid, COLOR_ORANGE, "[ANTI-CHEAT]"COL_WHITE" Fuiste expulsado - Razón: Cheats (%s)", ac_Info[cheat][ac_Name]);
		KickEx(playerid);

		if (cheat == CHEAT_PLAYER_HEALTH) CHARACTER_INFO[playerid][ch_HEALTH] = 20.0;
		if (cheat == CHEAT_PLAYER_ARMOUR) CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
	}
	else
	{
		if (extra != 0.0) format(ac_message, sizeof ac_message, "[ANTI-CHEAT] Aviso sobre %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "[ANTI-CHEAT] Aviso sobre %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
	}

	SendMessageToAdminsAC(COLOR_ANTICHEAT, ac_message);
	SendDiscordWebhook(ac_message, 1);
	PLAYER_TEMP[playerid][py_LAST_CHEAT_DETECTED_TIME] = gettime();

	PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;

	if ( PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] > 5)
	{
		format(ac_message, sizeof ac_message, "[ANTI-CHEAT] Kick sobre %s (%d): Max AC Adv (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		SendMessageToAdminsAC(COLOR_ANTICHEAT, ac_message);
		
		SendClientMessage(playerid, COLOR_ANTICHEAT, "[ANTI-CHEAT] Fuiste expulsado - Razón: Sobrepasar cantidad máxima de advertencias del anti-cheat.");
		KickEx(playerid, 500);
	}

	return 1;
}

SavePlayerWeaponsData(playerid)
{
  	if (!PLAYER_TEMP[playerid][py_USER_EXIT] || !PLAYER_TEMP[playerid][py_USER_LOGGED]) return 0;
  	
  	for(new i = 0; i != 13; i ++)
  	{
    	if (!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;

    	new DB_Query[128];
    	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_WEAPONS` SET `WEAPON_ID` = '%d', `AMMO` = '%d' WHERE `ID_WEAPON` = '%d';", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
    	db_query(Database, DB_Query);
    	//printf("save: id: %d, ammo: %d, db_id: %d", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
  	}
  	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], 13);
	Result = db_query(Database, DB_Query);

	new total;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (total >= 13)
		{
			printf("[debug]  Límite superado en array 'PLAYER_WEAPONS' al intentar cargar de la base de datos.");
			break;
		}

		new weapon_id = db_get_field_assoc_int(Result, "WEAPON_ID");

		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID] = db_get_field_assoc_int(Result, "ID_WEAPON");
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = db_get_field_assoc_int(Result, "AMMO");
		//printf("load: id %d, ammo: %d, db_id: %d", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID], PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO], PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID]);

		total ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if (db_delete)
	{
		new DB_Query[140];
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' AND `ID_WEAPON` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		db_query(Database, DB_Query);
	}

	new current_weapon = GetPlayerWeapon(playerid);
	if (current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;

	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;

	//SetWeaponsForPlayer(playerid);
	ac_SetPlayerArmedWeapon(playerid, current_weapon);
	SavePlayerWeaponsData(playerid);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_HEALTH] = health;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_ARMOUR] = armour;
	SetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_HEALTH] += health;
	if (CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	new DB_Query[130];
	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_WEAPONS` SET `ID_USER` = '%d' WHERE `ID_WEAPON` = '%d';", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	db_query(Database, DB_Query);

	PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	//SetWeaponsForPlayer(to_playerid);

	RemovePlayerSlotWeapon(from_playerid, slot);
	return 1;
}

PlayerPayday(playerid)
{
	if (IsPlayerPaused(playerid)) return 1;
	
	new 
		str_payday[364],
		str_temp[64],
		total_secures_vehicles,
		total_secures_property,
		money = 300 * ACCOUNT_INFO[playerid][ac_LEVEL];

	if (money > 4500) money = 4500;
	money += minrand(100, 200);

	format(str_payday, sizeof(str_payday), "~g~Paga de juego~w~~n~General: ~y~%s$~w~", number_format_thousand(money));

	if (!ACCOUNT_INFO[playerid][ac_SU])
	{
		for(new i = 0; i != MAX_VEHICLES; i ++)
		{
			if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
			if (PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

			new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100;
			money -= veh_money;

			total_secures_vehicles += veh_money;
		}

		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if (!PROPERTY_INFO[i][property_VALID]) continue;
			if (PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

			if (!PROPERTY_INFO[i][property_VIP_LEVEL])
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;

				total_secures_property += property_money;
			}
		}
		format(str_temp, sizeof(str_temp), "~n~Vehículos: ~r~-%s$~w~~n~Propiedades: ~r~-%s$~w~", number_format_thousand(total_secures_vehicles), number_format_thousand(total_secures_property));
		strcat(str_payday, str_temp);
	}

	if (PLAYER_WORKS[playerid][WORK_POLICE])
	{
		new work_payment;
		if (work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_POLICE], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
			if (work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if (work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
		}

		money += (work_payment + 8000);

		format(str_temp, sizeof(str_temp), "~n~SAPD: ~g~%s$~w~", number_format_thousand(work_payment));
		strcat(str_payday, str_temp);
	}

	if (PLAYER_WORKS[playerid][WORK_MAFIA])
	{
		new work_payment = (5000 * PLAYER_SKILLS[playerid][WORK_MAFIA]);

		money += work_payment;

		format(str_temp, sizeof(str_temp), "~n~Mafia: ~g~%s$~w~", number_format_thousand(work_payment));
		strcat(str_payday, str_temp);
	}

	if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
	{
		new work_payment = (5000 * PLAYER_SKILLS[playerid][WORK_ENEMY_MAFIA]);

		money += work_payment;

		format(str_temp, sizeof(str_temp), "~n~Mafia: ~g~%s$~w~", number_format_thousand(work_payment));
		strcat(str_payday, str_temp);
	}

	if (PLAYER_CREW[playerid][player_crew_VALID] && CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT] > 0)
	{
		new graffiti_payment = 200 * CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT];

		money += graffiti_payment;

		format(str_temp, sizeof(str_temp), "~n~Graffitis (%d): ~g~%s$~w~", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_GRAFFITIS_COUNT], number_format_thousand(graffiti_payment));
		strcat(str_payday, str_temp);	
	}

	if (CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT] > 0)
	{
		new market_payment = 1000 * CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT];

		money += market_payment;

		format(str_temp, sizeof(str_temp), "~n~Mercados (%d): ~g~%s$~w~", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MARKET_COUNT], number_format_thousand(market_payment));
		strcat(str_payday, str_temp);	
	}

	if (money + CHARACTER_INFO[playerid][ch_CASH] <= 0)
	{
		money = 0;
		CHARACTER_INFO[playerid][ch_CASH] = 0;
	}

	if (ACCOUNT_INFO[playerid][ac_SU])
	{
		money += minrand(8000, 15000);
	}

	if (money > 0) format(str_temp, sizeof(str_temp), "~n~RESUMEN: ~g~%s$~w~", number_format_thousand(money));
	else format(str_temp, sizeof(str_temp), "~n~RESUMEN: ~g~%s$~w~", number_format_thousand(money));

	strcat(str_payday, str_temp);

	ShowPlayerNotification(playerid, str_payday, 6);
	GivePlayerCash(playerid, money);
	return 1;
}

CALLBACK: DestroyShitObject(objectid)
{
	return DestroyDynamicObject(objectid);
}

CALLBACK: StopShitting(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);	
	SetPlayerChatBubble(playerid, "\n\n\n\n* Termina de cagar y se sube los pantalones.\n\n\n", 0xffcb90FF, 20.0, 5000);
	return 1;
}

CMD:cagar(playerid, params[])
{
	if ((gettime() - PLAYER_TEMP[playerid][py_LIMIT_SHIT]) < 30) return ShowPlayerMessage(playerid, "~r~Tienes que esperar 30 segundos para volver a hacer esto.", 3);

	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
	SetTimerEx("StopShitting", 3000, false, "i", playerid);

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	new shit_particle = CreateDynamicObject(18678, pos[0], pos[1], pos[2] - 2.8, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyShitObject", 1000, false, "i", shit_particle);

	SetPlayerChatBubble(playerid, "\n\n\n\n* Se baja los pantalones para cagar.\n\n\n", 0xffcb90FF, 20.0, 5000);
	PLAYER_TEMP[playerid][py_LIMIT_SHIT] = gettime();
	return 1;
}
alias:cagar("defecar");

//Animaciones
CMD:animaciones(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
alias:animaciones("anims", "acciones");
CMD:parar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);

	PLAYER_TEMP[playerid][py_IN_MARKET] = false;
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][41]);

	if (PLAYER_TEMP[playerid][py_SELFIE] == true)
	{
		PLAYER_TEMP[playerid][py_SELFIE] = false;
		TogglePlayerControllableEx(playerid, true);
		SetCameraBehindPlayer(playerid);
		ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
	}
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	return 1;
}
CMD:rodar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return 1;
}
CMD:borracho(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
	return 1;
}
CMD:bomba(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
	return 1;
}
CMD:reir(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
	return 1;
}
CMD:paja(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	return 1;
}
CMD:herido(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
	return 1;
}
CMD:comer(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	return 1;
}
CMD:despedir(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	return 1;
}
CMD:besar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	return 1;
}
CMD:crack(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
	return 1;
}
CMD:mear(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    SetPlayerSpecialAction(playerid, 68);//mear
	return 1;
}
CMD:sentarse(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
	return 1;
}
CMD:asiento(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
	return 1;
}
CMD:fucku(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
	return 1;
}
CMD:taichi(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	return 1;
}
CMD:beber(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	return 1;
}
CMD:boxear(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	return 1;
}
CMD:saludar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	return 1;
}
CMD:llorar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
	return 1;
}
CMD:rapear(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	return 1;
}
CMD:astrip(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	return 1;
}
CMD:bailar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    if (sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "Syntax: /bailar [1-4]");

	switch(params[0])
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "Syntax: /bailar [1-4]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	return 1;
}
CMD:hablar(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
    ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if (max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

	for(new i = 0; i != max_slots; i ++)
	{
		if (!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = BOOT_TYPE_WEAPON;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID];
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO];

	new DBResult:Result, DB_Query[256];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_BOOT`\
		(\
			`ID_VEHICLE`, `TYPE`, `INT`, `INT_EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `VEHICLE_BOOT`;\
	",
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);

	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

CMD:guardar(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	new option[24], extra;
	if (sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /guardar arma "COL_WHITE"[slot]");

	if (!strcmp(option, "arma", true))
	{
		if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			if (extra < 0 || extra > 12) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /guardar arma "COL_WHITE"[slot]");
			if (!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				ShowPlayerMessage(playerid, "~r~No tienes una arma en ese slot.", 3);
				return 1;
			}

			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if (vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "~r~No estás cerca de tu vehículo", 3);

			if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Este no es tú vehículo.", 3);
			if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "~r~", 3);

			new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
			if (boot_slot == -1) return ShowPlayerMessage(playerid, "~r~No tienes suficiente espacio en tu maletero.", 3);

			new str_text[128];
			format(str_text, sizeof(str_text), "%s guardado en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			ShowPlayerNotification(playerid, str_text, 3);
			ResetItemBody(playerid);

			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else ShowPlayerMessage(playerid, "~r~Ahora no puedes usar este comando.", 3);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Syntax: /guardar arma "COL_WHITE"[slot]");
	return 1;
}

CheckAndOpenBoot(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if (vehicleid == INVALID_VEHICLE_ID) return 0;

	if (!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return 0;
	if (PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 0;

	PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	ResetItemBody(playerid);
	return 1;
}

CMD:hy(playerid, params[])
{
	return 1;
}

CMD:pmaletero(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if (vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "~r~No estás cerca de un vehículo", 3);

	PLAYER_TEMP[playerid][py_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	SendCmdLogToAdmins(playerid, "pmaletero", params);
	return 1;
}

CMD:esposar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /esposar [ID o nombre]");
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 30.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes esposar a este jugador ahora.", 3);
	if (GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~Para esposar a esta persona tiene que estar depie.", 3);

	if (PLAYER_TEMP[params[0]][py_CUFFED])
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][py_CUFFED] = false;
		PLAYER_TEMP[params[0]][py_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);

		SetPlayerChatBubble(playerid, "\n\n\n\n* Le quita las esposas a alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
		SendPoliceMark(params[0], PLAYER_COLOR);
		return 1;
	}

	if (!PLAYER_TEMP[params[0]][py_CUFFING])
	{
	    ShowPlayerMessage(params[0], "Estás siendo esposado", 3);
	    ShowPlayerMessage(playerid, "Estás esposando a esta persona", 3);

		PLAYER_TEMP[params[0]][py_CUFFED] = false;
		PLAYER_TEMP[params[0]][py_CUFFING] = true;
		KillTimer(PLAYER_TEMP[params[0]][py_TIMERS][14]);
		TogglePlayerControllableEx(params[0], false);
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
		PLAYER_TEMP[params[0]][py_TIMERS][14] = SetTimerEx("CuffPlayer", 1000, false, "i", params[0]);
		SendPoliceMark(params[0], 0x2DAA24FF);
	}
	return 1;
}

CMD:placa(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /placa [ID o nombre]");

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes enseñarle tu placa a este jugador ahora.", 3);

	SetPlayerChatBubble(playerid, "\n\n\n\n* Le enseña su placa a alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);

	SendClientMessageEx(params[0], COLOR_WHITE, "%s %c. %s "COL_YELLOW"[Placa: %d]", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][py_FIRST_NAME][0], PLAYER_TEMP[playerid][py_SUB_NAME], PLAYER_MISC[playerid][MISC_PLACA_PD]);
	return 1;
}

CMD:revisar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /revisar [ID o nombre]");
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes revisar a este jugador ahora.", 3);
	if (GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~Para revisar a esta persona tiene que estar depie.", 3);
	if (!PLAYER_TEMP[params[0]][py_CUFFED]) return ShowPlayerMessage(playerid, "~r~Para revisar a esta persona tiene que estar esposada.", 3);

	ShowPlayerInventory(playerid, params[0]);

	SetPlayerChatBubble(playerid, "\n\n\n\n* Revisa a alguien\n\n\n", 0xffcb90FF, 20.0, 5000);
	return 1;
}
alias:revisar("cachear");

CMD:requisar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /requisar [ID o nombre]");
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~No estás depie.", 3);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes revisar a este jugador ahora.", 3);
	if (GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "~r~Para revisar a esta persona tiene que estar depie.", 3);
	if (!PLAYER_TEMP[params[0]][py_CUFFED]) return ShowPlayerMessage(playerid, "~r~Para revisar a esta persona tiene que estar esposada.", 3);

	RequisarilegalInv(params[0]);
	SetPlayerChatBubble(playerid, "\n\n\n\n* Requisa las pertenecias ilegales de alguien.\n\n\n", 0xffcb90FF, 20.0, 5000);
	ShowPlayerMessage(playerid, "Has requisado a este jugador", 3);
	return 1;
}

CMD:ref(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][43]);

	new message[145];
	format(message, sizeof message, "~b~%s~w~: refuerzos en %s.", PLAYER_TEMP[playerid][py_RP_NAME], zone);
	SendPoliceNotification(message, 4);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (PLAYER_WORKS[i][WORK_POLICE])
				{
					if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x0087ffFF);
					}
				}
   			}
		}
 	}

 	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][38]);
	PLAYER_TEMP[playerid][py_TIMERS][38] = SetTimerEx("DisableRefMark", 120000, false, "i", playerid);
	return 1;
}
alias:ref("refuerzos");

CALLBACK: DisableRefMark(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][43]);

    new city[45], zone[45];
    GetPlayerZones(playerid, city, zone);
    new message[145];
    format(message, sizeof message, "~b~%s~w~ se perdió (%s).", PLAYER_TEMP[playerid][py_RP_NAME], zone);
    SendPoliceNotification(message, 6);
    SetPlayerColorEx(playerid, PLAYER_COLOR);

    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if (IsPlayerConnected(i))
        {
            if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
            {
                if (PLAYER_WORKS[i][WORK_POLICE])
                {
                    if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
                    {
                        SetPlayerMarkerForPlayer(i, playerid, 0x6060FF00);
                        SetPlayerColorEx(playerid, 0x6060FF00);
                    }
                }
            }
        }
    }
    return 1;
}

CMD:control(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 8) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	if (GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No puedes colocar objetos policiales aquí.", 3);

	new type;
	if (sscanf(params, "d", type)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /control "COL_WHITE"[Tipo 1-6]");

	new modelid;
	switch(type)
	{
		case 1: modelid = 1459;
		case 2: modelid = 1238;
		case 3: modelid = 1425;
		case 4: modelid = 3265;
		case 5: modelid = 3091;
        case 6: modelid = 3091;
		default: return ShowPlayerMessage(playerid, "~r~No puedes colocar objetos policiales aquí.", 3);
	}

	new index = GetFreePoliceObjectSlot();
	if (index == -1) return ShowPlayerMessage(playerid, "~r~No se pueden crear más objetos policiales.", 3);

	POLICE_OBJECTS[index][police_object_VALID] = true;
	format(POLICE_OBJECTS[index][police_object_USER], 24, "%s", ACCOUNT_INFO[playerid][ac_NAME]);

	new Float:pos[3], Float:angle;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));

	POLICE_OBJECTS[index][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, 0, 0);
	Streamer_Update(playerid);
	new info[2];
	info[0] = WORK_POLICE;
	info[1] = index; // Index
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[index][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	PLAYER_TEMP[playerid][py_SELECTED_POLICE_OBJECT_INDEX] = index;
	EditDynamicObject(playerid, POLICE_OBJECTS[index][police_object_OBJECT_ID]);

	ShowPlayerMessage(playerid, "~r~Coloca el objeto, posteriormente puedes usar /econtrol para moverlo o eliminarlo.", 3);
	return 1;
}

CMD:econtrol(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía.", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 8) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	if (GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "~r~No puedes editar objetos policiales aquí.", 3);

	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	printf("OnPlayerSelectedDYnamicObj %d",playerid); // debug juju
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
	if (info[0] == WORK_POLICE)
	{
		if (!PLAYER_WORKS[playerid][WORK_POLICE])
		{
			CancelEdit(playerid);
			ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
			return 1;
		}
		if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
		{
			CancelEdit(playerid);
			ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
			return 1;
		}
		if (PLAYER_SKILLS[playerid][WORK_POLICE] < 8)
		{
			CancelEdit(playerid);
			ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);
			return 1;
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "Este objeto fue colocado por %s. Usa 'ESC' para borrar el objeto.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
		PLAYER_TEMP[playerid][py_SELECTED_POLICE_OBJECT_INDEX] = info[1];
		EditDynamicObject(playerid, objectid);
		return 1;
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	printf("OnPlayerEditDynamicObject",playerid); // debug juju
	if (response == EDIT_RESPONSE_CANCEL)
	{
		new info[2];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		if (info[0] == WORK_POLICE)
		{
			if (!PLAYER_WORKS[playerid][WORK_POLICE])
			{
				CancelEdit(playerid);
				ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
				return 1;
			}
			if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE)
			{
				CancelEdit(playerid);
				ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
				return 1;
			}
			if (PLAYER_SKILLS[playerid][WORK_POLICE] < 8)
			{
				CancelEdit(playerid);
				ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);
				return 1;
			}

			DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
			POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
			POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
			POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
			ShowPlayerMessage(playerid, "Objeto policial eliminado.", 2);
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /multar [ID o nombre] [precio$]");
	if (params[1] < 0) return ShowPlayerMessage(playerid, "~r~El precio no puede ser menor a 0$.", 3);
	else if (params[1] > 500000) return ShowPlayerMessage(playerid, "~r~El precio no puede ser mayor a 500.000$.", 3);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes multar a este jugador ahora.", 3);
	if (CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED || CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_JAIL) return ShowPlayerMessage(playerid, "~r~No puedes multar a este jugador ahora.", 3);

	PLAYER_TEMP[params[0]][py_POLICE_PEN_PID] = playerid;
	PLAYER_TEMP[params[0]][py_POLICE_PEN_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[params[0]][py_POLICE_PEN_IM] = params[1];
	PLAYER_TEMP[params[0]][py_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);

	ShowPlayerMessage(playerid, "~r~La multa ha sido enviada, espera para ver si el jugador la acepta.", 3);
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	if (sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /arrestar [ID o nombre] [Asiento 1 ó 2]");
	if (params[1] < 1 || params[1] > 2) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /arrestar [ID o nombre] [Asiento 1 ó 2]");
	params[1] ++;

	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerMessage(playerid, "~r~Para arrestar tienes que estar dentro de un vehículo policial.", 3);

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Para arrestar tienes que estar dentro de un vehículo policial.", 3);
	if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~Para arrestar tienes que estar dentro de un vehículo policial.", 3);
	if ( (params[1] + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo policial es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 20.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes arrestar a este jugador ahora.", 3);

	if (!PLAYER_TEMP[params[0]][py_CUFFED]) return ShowPlayerMessage(playerid, "~r~Para arrestar a esta persona tiene que estar esposada.", 3);

	if (CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_NORMAL;
		SendClientMessageEx(playerid, COLOR_WHITE, "Has soltado a %s.", PLAYER_TEMP[params[0]][py_RP_NAME]);
		return 1;
	}
	else
	{
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_ARRESTED;
		PutPlayerInVehicleEx(params[0], vehicleid, params[1]);
		TogglePlayerControllableEx(params[0], false);
	}
	return 1;
}


CMD:callsing(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 11) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /callsing [Texto]");
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerMessage(playerid, "~r~Para asignar callsing tienes que estar dentro de un vehículo policial.", 3);

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Para asignar callsing tienes que estar dentro de un vehículo policial.", 3);
	if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~Para asignar callsing tienes que estar dentro de un vehículo policial.", 3);

	if (IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(params, 0xF7F7F700, -0.7, -1.9, -0.3, 20.0, .attachedvehicle = vehicleid);
	return 1;
}

CMD:m(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerMessage(playerid, "~r~Para usar el megáfono tienes que estar dentro de un vehículo policial.", 3);

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Para usar el megáfono tienes que estar dentro de un vehículo policial.", 3);
	if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~Para usar el megáfono tienes que estar dentro de un vehículo policial.", 3);

	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /m [Mensaje]");

	new str_text[190];
	format(str_text, 190, "(Megáfono) %s: %s", PLAYER_TEMP[playerid][py_RP_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0x4FAFFFFF, 0x4FAFFFFF, 0x4FAFFFFF, 0x4FAFFFFF, 0x4FAFFFFF, 85);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	PLAYER_TEMP[playerid][py_VEHICLEID] = vehicleid;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

CMD:entregar(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	if (sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /entregar [ID o nombre] [Minutos]");
	if (params[1] < 1 || params[1] > 1440) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: cantidad de minutos no válida.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerMessage(playerid, "~r~Para entregar tienes que estar dentro de un vehículo policial.", 3);

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return ShowPlayerMessage(playerid, "~r~Para entregar tienes que estar dentro de un vehículo policial.", 3);
	if (WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~Para entregar tienes que estar dentro de un vehículo policial.", 3);

	if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador no conectado.", 3);
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~El jugador no está cerca tuya.", 2);
	if (PLAYER_TEMP[params[0]][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes arrestar a este jugador ahora.", 3);
	if (GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return ShowPlayerMessage(playerid, "~r~Para entregar a esta persona tiene que estar dentro del vehículo policial.", 3);
	if (GetPlayerVehicleID(params[0]) != vehicleid) return ShowPlayerMessage(playerid, "~r~Para entregar a esta persona tiene que estar dentro del vehículo policial.", 3);

	if (IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697))
	{
	    ShowPlayerMessage(playerid, "~g~La persona fue enviada a la cárcel.", 3);
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else if (IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106))
	{
		ShowPlayerMessage(playerid, "~g~La persona fue enviada a la cárcel", 3);//%s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else if (IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518))
	{
		ShowPlayerMessage(playerid, "~g~La persona fue enviada a la cárcel", 3);
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else ShowPlayerMessage(playerid, "~r~No estás en el sitio correcto.", 3);

	new str_text[128];
	format(str_text, sizeof(str_text), "%s ha entregado a ~g~%s~w~.", PLAYER_TEMP[playerid][py_NAME], PLAYER_TEMP[params[0]][py_NAME]);
	SendPoliceNotification(str_text, 4);
	return 1;
}

CMD:policias(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);

	PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_POLICE_LIST);
	return 1;
}

CMD:mafia(playerid, params[])
{
	if (PLAYER_WORKS[playerid][WORK_MAFIA])
	{
		PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
		PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
		ShowDialog(playerid, DIALOG_MAFIA_LIST);
	}
	else if (PLAYER_WORKS[playerid][WORK_ENEMY_MAFIA])
	{
		PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
		PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
		ShowDialog(playerid, DIALOG_ENEMY_MAFIA_LIST);
	}
	else return ShowPlayerMessage(playerid, "~r~No eres mafioso.", 3);
	return 1;
}

CALLBACK: CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	EndPlayerJob(playerid);
	PLAYER_TEMP[playerid][py_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][py_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][py_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][py_PLAYER_IN_INV] = false;
	PLAYER_TEMP[playerid][py_CUFFED] = false;
	PLAYER_TEMP[playerid][py_CUFFING] = false;
	PLAYER_TEMP[playerid][py_PLAYER_WAITING_MP3_HTTP] = false;

	if (PLAYER_TEMP[playerid][py_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][py_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}

	if (PLAYER_TEMP[playerid][py_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if (PLAYER_TEMP[playerid][py_GPS_MAP]) HidePlayerGpsMap(playerid);

	PLAYER_TEMP[playerid][py_CUFFED] = true;
	PLAYER_TEMP[playerid][py_CUFFING] = false;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllableEx(playerid, false);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	ShowDialog(playerid, DIALOG_POLICE_RADIOS);
	return 1;
}

/*CMD:frecuencia(playerid, params[])
{
	if (sv_get_version(playerid) != SV_NULL) return ShowPlayerMessage(playerid, "~r~No tienes instalado Hyaxe Client", 4);
	ShowDialog(playerid, DIALOG_CHANGE_MHZ);
	return 1;
}*/

SendPoliceRadioMessage(radio, color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (PLAYER_WORKS[i][WORK_POLICE])
				{
					if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
					{
						if (radio == -1) SendResponsiveMessage(i, color, message, 164);
						else
						{
							if (PLAYER_TEMP[i][py_POLICE_RADIO] == radio)
							{
								SendResponsiveMessage(i, color, message, 154);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

SendMafiaMessage(color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_WORKS[i][WORK_MAFIA])
			{
				SendResponsiveMessage(i, color, message, 154);
			}
		}
	}
	return 1;
}

SendEnemyMafiaMessage(color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_WORKS[i][WORK_ENEMY_MAFIA])
			{
				SendResponsiveMessage(i, color, message, 154);
			}
		}
	}
	return 1;
}

SendPoliceNotification(const message[], time)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (PLAYER_WORKS[i][WORK_POLICE])
				{
					if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
					{
						ShowPlayerNotification(i, message, time);
					}
				}
			}
		}
	}
	return 1;
}

CountPoliceRadioPlayers(radio)
{
	new total;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if (PLAYER_WORKS[i][WORK_POLICE])
				{
					if (PLAYER_TEMP[i][py_WORKING_IN] == WORK_POLICE)
					{
						if (PLAYER_TEMP[i][py_POLICE_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];

	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ PLAYER_TEMP[playerid][py_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ PLAYER_TEMP[playerid][py_PROPERTY_INDEX] ][property_EXT_Z];
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

    format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if (   (f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if (   (f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

GetPointZone(Float:f_Pos_X, Float:f_Pos_Y, city[], zone[])
{
	format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if (   (f_Pos_X >= g_Cities[i][z_MinX] && f_Pos_X < g_Cities[i][z_MaxX]) && (f_Pos_Y >= g_Cities[i][z_MinY] && f_Pos_Y < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if (   (f_Pos_X >= g_Zones[i][z_MinX] && f_Pos_X < g_Zones[i][z_MaxX]) && (f_Pos_Y >= g_Zones[i][z_MinY] && f_Pos_Y < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

JailPlayer(playerid, seconds = 300)
{
	ResetItemBody(playerid);

    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
    CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = seconds;

    PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME] = gettime();
    SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

    KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
    PLAYER_TEMP[playerid][py_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

    new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][py_ENTER_JAIL_TIME]);
    
    new str_text[128];
	format(str_text, sizeof(str_text), "~r~Encarcelado~w~~n~%s minutos.", TimeConvert(time));
	PLAYER_TEMP[playerid][py_JAIL_NOT] = ShowPlayerNotification(playerid, str_text, 1);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][39]);
	PLAYER_TEMP[playerid][py_TIMERS][39] = SetTimerEx("UpdatePrisionTime", 900, true, "i", playerid);

    ResetPlayerWeaponsEx(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    TogglePlayerControllableEx(playerid, false);
    SetPlayerPoliceSearchLevel(playerid, 0);
    SendPoliceMark(playerid, PLAYER_COLOR);
    SetPlayerColorEx(playerid, PLAYER_COLOR);
    return 1;
}

CALLBACK: UnjailPlayer(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][15]);
	CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;
	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
	//SetWeaponsForPlayer(playerid);
	ac_SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllableEx(playerid, true);

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if (ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_INT])
		{
			CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[i][ee_ID];
			PLAYER_TEMP[playerid][py_PROPERTY_INDEX] = -1;

			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
			CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
			PLAYER_TEMP[playerid][py_INTERIOR_INDEX] = 0;
			CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;
		    SetPlayerPosEx(playerid, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);

			StopAudioStreamForPlayer(playerid);
			break;
		}
	}

	ShowPlayerMessage(playerid, "~g~Cumpliste tu condena.", 3);
	SetPlayerPoliceSearchLevel(playerid, 0);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][39]);
	hy_DestroyNotification(playerid, PLAYER_TEMP[playerid][py_JAIL_NOT]);
	return 1;
}

ShowPlayerStats(playerid, pid)
{
	if (!IsPlayerConnected(pid)) return 0;
	if (ACCOUNT_INFO[pid][ac_ID] == 0) return 0;


	ACCOUNT_INFO[pid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[pid][py_TIME_PLAYING];
	PLAYER_TEMP[pid][py_TIME_PLAYING] = gettime();

	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = ACCOUNT_INFO[pid][ac_LEVEL] * REP_MULTIPLIER;
	if (ACCOUNT_INFO[pid][ac_REP] < neccessary_rep)
	{
		new time = (ACCOUNT_INFO[pid][ac_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[pid][py_TIME_PASSED_LAST_REP])) / 1000;
		if (time < 3) time = 3;

		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "/comprarnivel");

	new caption[48], dialog[600 + (27 * sizeof(work_info))];
	format(caption, sizeof caption, ""COL_RED"%s", PLAYER_TEMP[pid][py_RP_NAME]);

	format(dialog, sizeof dialog,

		"\
		"COL_WHITE"  ID de cuenta: "COL_RED"%d\n\
		"COL_WHITE"  Fecha de registro: "COL_RED"%s\n\
		"COL_WHITE"  Tiempo jugando: "COL_GREEN"%.1f horas\n\
		"COL_WHITE"  Nivel: "COL_YELLOW"%d\n\
		"COL_WHITE"  Reputación: "COL_ORANGE"%d/%d\n\
		"COL_WHITE"  Siguiente reputación: "COL_ORANGE"%s\n\
		"COL_WHITE"  Banda: "COL_RED"%s\n\
		"COL_WHITE"  Trabajo: "COL_GREEN"%s\n\
		"COL_WHITE"  "SERVER_COIN": "COL_GREEN"%d\n\
	    "COL_WHITE"  Muteos: "COL_RED"%d\n\
	    "COL_WHITE"  Kicks: "COL_RED"%d\n\
	    "COL_WHITE"  Baneos: "COL_RED"%d\n\
	    "COL_WHITE"  Advertencias: "COL_RED"%d\n\
	    "COL_WHITE"  Jails: "COL_RED"%d\n\
		"COL_WHITE"  VIP: "COL_YELLOW"%s",

			ACCOUNT_INFO[pid][ac_ID],
			ACCOUNT_INFO[pid][reg_DATE],
			hours,
			ACCOUNT_INFO[pid][ac_LEVEL],
			ACCOUNT_INFO[pid][ac_REP], neccessary_rep,
			next_rep,
			getPlayerCrew(pid),
			getPlayerWorks(pid),
			ACCOUNT_INFO[pid][ac_SD],
			PLAYER_MISC[pid][MISC_MUTES],
			PLAYER_MISC[pid][MISC_KIKEOS],
			PLAYER_MISC[pid][MISC_BANEOS],
			PLAYER_MISC[pid][MISC_SANS],
			PLAYER_MISC[pid][MISC_JAILS],
			getPlayerVip(pid)
	);

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

getCrewIndexWithId(id)
{
	for(new i = 0; i < sizeof(CREW_INFO); i ++)
	{
		if (CREW_INFO[i][crew_ID] == id) return i;
	}
	return 0;
}

getPlayerCrew(playerid)
{
	new crew[32];
	if (!PLAYER_CREW[playerid][player_crew_VALID]) crew = "ninguna";
	else format(crew, sizeof crew, "%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
	return crew;
}

getPlayerCrewColor(playerid)
{
    return !PLAYER_CREW[playerid][player_crew_VALID] ? -1 : CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR];
}

getPlayerVip(playerid)
{
	new vip[16];
	if (!ACCOUNT_INFO[playerid][ac_SU]) vip = "No";
	else format(vip, sizeof vip, "Tarjeta %d", ACCOUNT_INFO[playerid][ac_SU]);
	return vip;
}

AddPlayerBadHistory(account_id, by_account_id, type, const text[])
{
	new DB_Query[266];
	format(DB_Query, sizeof DB_Query, "INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');", account_id, type, by_account_id, text);
	db_query(Database, DB_Query);
	return 1;
}

AddPlayerBan(account_id, account_name[], account_ip[], by_account_id, type, text[], days = 0, mod[] = "day")
{
	new DBResult:Result, DB_Query[485];

	if (!days)
	{
		format(DB_Query, sizeof DB_Query,

			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), '0' FROM `BAD_HISTORY`;\
			",

				account_id, type, by_account_id, text,
				account_name, account_ip

		);
	}
	else
	{
		format(DB_Query, sizeof DB_Query,

			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), DATETIME('NOW', '+%d %s') FROM `BAD_HISTORY`;\
			",

				account_id, type, by_account_id, text,
				account_name, account_ip, days, mod

		);
	}

	Result = db_query(Database, DB_Query);
	db_free_result(Result);
	return 1;
}

// Comandos admins
CMD:reportar(playerid, params[])
{
	if (gettime() < PLAYER_TEMP[playerid][py_ANTIFLOOD_REPORT] + 5) return SendClientMessage(playerid, COLOR_RED, "Aviso:"COL_WHITE" Estás enviando mensajes demasiado rápido.");
	PLAYER_TEMP[playerid][py_ANTIFLOOD_REPORT] = gettime();

	new reason[128];
	if (sscanf(params, "us[128]", params[0], reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /reportar "COL_WHITE"[ID o nombre] [Razón]");
    if (!IsPlayerConnected(params[0])) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);

	ShowPlayerMessage(playerid, "~g~Tu reporte fue enviado a los administradores en línea.", 3);

	new str[145];
	format(str, 145, "[REPORTE]"COL_WHITE" %s (%d) > %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[params[0]][ac_NAME], params[0], reason);
	SendMessageToAdmins(COLOR_ORANGE, str);
	Log("reports", str);

	PLAYER_TEMP[ params[0] ][py_TOTAL_REPORTS] ++;
	return 1;
}

CMD:r(playerid, params[])
{
	new message[128];
	if (sscanf(params, "s[128]", message)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /r "COL_WHITE"[MENSAJE]");

	if (PLAYER_TEMP[playerid][py_ADMIN_PM_PID] == INVALID_PLAYER_ID || !PLAYER_TEMP[playerid][py_ADMIN_PM_AID]) return ShowPlayerMessage(playerid, "~r~Nada que responder.", 2);
	if (ACCOUNT_INFO[ PLAYER_TEMP[playerid][py_ADMIN_PM_PID] ][ac_ID] != PLAYER_TEMP[playerid][py_ADMIN_PM_AID])
	{
		PLAYER_TEMP[playerid][py_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][py_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][py_ADMIN_PM_TIME] = 0;
		ShowPlayerMessage(playerid, "~r~El administrador que te envió el mensaje está desconectado.", 3);
		return 1;
	}
	if (gettime() > PLAYER_TEMP[playerid][py_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][py_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][py_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][py_ADMIN_PM_TIME] = 0;
		ShowPlayerMessage(playerid, "~r~Tardaste mucho en responder.", 3);
		return 1;
	}

	SendClientMessageEx(PLAYER_TEMP[playerid][py_ADMIN_PM_PID], COLOR_WHITE, "{5CCE3D}>"COL_WHITE" Respuesta de %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, message);
	ShowPlayerMessage(playerid, "Tu mensaje ha sido enviado al administrador.", 2);
	PLAYER_TEMP[playerid][py_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][py_ADMIN_PM_AID] = 0;
	PLAYER_TEMP[playerid][py_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /id "COL_WHITE"[ID o nombre]");
	if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");

	new
		player_version[32],
		acid
	;

	GetPlayerVersion(to_player, player_version, sizeof player_version);

	if (ACCOUNT_INFO[to_player][ac_ID] == 0) acid = minrand(80000, 90000);
	else acid = ACCOUNT_INFO[to_player][ac_ID];

	SendClientMessageEx(playerid, COLOR_RED, " "COL_WHITE"Nombre: %s (%d) [Nivel %d] "COL_RED"|"COL_WHITE" ID de cuenta: %d",
		PLAYER_TEMP[to_player][py_NAME],
		to_player,
		ACCOUNT_INFO[to_player][ac_LEVEL],
		acid
	);
	
	SendClientMessageEx(playerid, COLOR_RED, " "COL_WHITE"HyClient: %d (%s) "COL_RED"|"COL_WHITE" PacketLoss: %.2f",
		VALID_CLIENT[playerid],
		player_version,
		NetStats_PacketLossPercent(playerid)
	);
	return 1;
}

CMD:jailtime(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /jailtime "COL_WHITE"[ID o nombre]");
	if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");

	if (CHARACTER_INFO[to_player][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[to_player][py_ENTER_JAIL_TIME]);
		SendClientMessageEx(playerid, COLOR_WHITE, "%s tiene %s minutos de condena.", PLAYER_TEMP[to_player][py_NAME], TimeConvert(time));
	}
	else SendClientMessage(playerid, COLOR_WHITE, "El jugador no esta encarcelado.");
	return 1;
}

CMD:localizar(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
	return 1;
}

CMD:hora(playerid, params[])
{
	new time[6];
	gettime(time[0], time[1], time[2]);
	getdate(time[3], time[4], time[5]);

	SendClientMessageEx(playerid, COLOR_RED, " "COL_WHITE"Hora: %02d:%02d:%02d "COL_RED"|"COL_WHITE" Fecha: %02d/%02d/%d",
		time[0], time[1], time[2],
		time[3], time[4], time[5]
	);
	return 1;
}
alias:hora("fecha");

CMD:gpci(playerid, params[])
{
	new serial[41];
	gpci(playerid, serial, sizeof(serial));
	SendClientMessageEx(playerid, COLOR_RED, "GPCI:"COL_WHITE" %s", serial);
	return 1;
}

CMD:admins(playerid, params[])
{
	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 8) return SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" No tienes permisos suficientes.");
	PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:staff(playerid, params[])
{
	new online_staff;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
	   	if (IsPlayerConnected(i))
	    {
	    	if (PLAYER_TEMP[i][py_ADMIN_SERVICE])
	    	{
	    		SendClientMessageEx(playerid, COLOR_GREEN, "[%s]"COL_WHITE" %s (%i)", ADMIN_LEVELS[ ACCOUNT_INFO[i][ac_ADMIN_LEVEL] ], PLAYER_TEMP[i][py_NAME], i);
	    		online_staff ++;
	    	}
	    }
	}

	if (online_staff == 0) ShowPlayerMessage(playerid, "~r~No hay staff activo", 4);
	return 1;
}

CMD:trabajos(playerid)
{
	ShowDialog(playerid, DIALOG_TRABAJOS_TELEPORTS);
	return 1;
}

CMD:getid(playerid, params[])
{
	new name[24];
	if (sscanf(params, "s[24]", name)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /getid <nombre o parte del nombre>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `NAME` LIKE '%%%q%%' LIMIT 20;", name);
	Result = db_query(Database, DB_Query);

	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		SendClientMessageEx(playerid, COLOR_WHITE, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	SendClientMessageEx(playerid, COLOR_WHITE, "Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}

CMD:getname(playerid, params[])
{
	new db_id;
	if (sscanf(params, "d", db_id)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /getname <DB-ID>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", db_id);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		SendClientMessageEx(playerid, COLOR_WHITE, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Sin resultados.");
	db_free_result(Result);
	return 1;
}

CMD:aka(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /aka <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (isnull(ACCOUNT_INFO[to_player][ac_IP])) return SendClientMessage(playerid, COLOR_WHITE, "IP no válida.");
	SendCmdLogToAdmins(playerid, "aka", params);
	if (!strcmp(PLAYER_TEMP[to_player][py_IP], "170.83.220.2")) return SendClientMessage(playerid, COLOR_WHITE, "Has intentado ver información de Atom, se le ha enviado un aviso con tus datos.");
	if (!strcmp(ACCOUNT_INFO[to_player][ac_NAME], "Yahir_Kozel")) return SendClientMessage(playerid, COLOR_WHITE, "Has intentado ver información de Atom, se le ha enviado un aviso con tus datos.");

	SendClientMessageEx(playerid, COLOR_WHITE, "AKA de %s (%d):", ACCOUNT_INFO[to_player][ac_NAME], to_player);

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME` FROM `CUENTA` WHERE `IP` = '%q' LIMIT 20;", ACCOUNT_INFO[to_player][ac_IP]);
	Result = db_query(Database, DB_Query);

	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24];

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);

		SendClientMessageEx(playerid, COLOR_WHITE, "Nombre: {f4f442}'%s' "COL_WHITE"DB-ID: '%d'", get_name, id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	SendClientMessageEx(playerid, COLOR_WHITE, "Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}
alias:aka("cuentas");

CMD:adv(playerid, params[])
{
	new to_player, reason[128];
	if (sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /adv <player_id> <razon>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");


	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_WARNING, reason);

	new dialog[170];
	format(dialog, sizeof dialog, ""COL_WHITE"Has recibido una advertencia.\nRazón: %s\nAdmin: %s", reason, ACCOUNT_INFO[playerid][ac_NAME]);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
	PLAYER_MISC[to_player][MISC_SANS] ++;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' dbid: '%d', pid: '%d') advertido.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);


	new str[145]; format(str, 145, "[ADMIN] %s (%d) advirtió a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendMessageToAdmins(COLOR_ANTICHEAT, str);
	return 1;
}
alias:adv("advertencia", "san");

CMD:kick(playerid, params[])
{
	new to_player, reason[128];
	if (sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /kick <player_id> <razon>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (PLAYER_TEMP[to_player][py_KICKED]) return SendClientMessage(playerid, COLOR_WHITE, "El jugador ya está expulsado.");
	if (!ACCOUNT_INFO[to_player][ac_ID]) return KickEx(to_player, 100);


	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_KICK, reason);

	new dialog[170];
	format(dialog, sizeof dialog, ""COL_WHITE"%s te expulsó, razón: %s", ACCOUNT_INFO[playerid][ac_NAME], reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	PLAYER_MISC[to_player][MISC_KIKEOS] ++;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' dbid: '%d', pid: '%d') expulsado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);


	new str[145]; format(str, 145, "[ADMIN] %s (%d) kickeó a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendMessageToAdmins(COLOR_ANTICHEAT, str);
	return 1;
}

CMD:spec(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /spec <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GetPlayerFacingAngle(playerid, p[3]);
		SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), p[0], p[1], p[2], p[3], 0, 0, 0, 0, 0, 0);
		PLAYER_TEMP[playerid][py_SKIN] = GetPlayerSkin(playerid);
		CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][py_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}

	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if (IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendClientMessage(playerid, COLOR_WHITE, "Utiliza /specoff para terminar este modo.");


	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}

CMD:specoff(playerid, params[])
{
	SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
	SetPlayerVirtualWorld(playerid, PLAYER_TEMP[playerid][py_VIRTUAL_WORLD]);
	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
	PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	return 1;
}

CMD:freezeall(playerid, params[])
{
  	SendClientMessageEx(playerid, COLOR_WHITE, "Todos los jugadores fueron congelados");
  	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
  	{
    	TogglePlayerControllableEx(i, false);
  	}
  	SendCmdLogToAdmins(playerid, "freezeall", params);
  	return 1;
}

CMD:unfreezeall(playerid, params[])
{
  	SendClientMessageEx(playerid, COLOR_WHITE, "Todos los jugadores fueron descongelados");
  	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
  	{
    	TogglePlayerControllableEx(i, true);
  	}
  	SendCmdLogToAdmins(playerid, "unfreezeall", params);
  	return 1;
}

CMD:freeze(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /freeze <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s' (%d) congelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, false);
	SendCmdLogToAdmins(playerid, "freeze", params);
	return 1;
}
alias:freeze("congelar");

CMD:unfreeze(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /unfreeze <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s' (%d) descongelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, true);
	SendCmdLogToAdmins(playerid, "unfreeze", params);
	return 1;
}
alias:unfreeze("descongelar");

CMD:pest(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pest <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerStats(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pest", params);
	return 1;
}

CMD:pinv(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pinv <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerInventory(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pinv", params);
	return 1;
}

CMD:pexp(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pexp <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerSkills(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pexp", params);
	return 1;
}

CMD:pbank(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pbank <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (!BANK_ACCOUNT[to_player][bank_account_ID]) SendClientMessage(playerid, COLOR_WHITE, "El jugador no tiene cuenta bancaria.");
	else SendClientMessageEx(playerid, COLOR_WHITE, "Cuenta bancaria ID: '%d' Balance: '%s'", BANK_ACCOUNT[to_player][bank_account_ID], number_format_thousand(BANK_ACCOUNT[to_player][bank_account_BALANCE]));
	return 1;
}

CMD:unjail(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /unjail <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, COLOR_WHITE, "El jugador no está en jail.");

	UnjailPlayer(to_player);
	SendClientMessageEx(playerid, COLOR_WHITE, "El jugador %s (%d) ahora está en libertad.", ACCOUNT_INFO[to_player][ac_NAME], to_player);

	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:ip(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /ip <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	SendCmdLogToAdmins(playerid, "ip", params);
	if (!strcmp(PLAYER_TEMP[to_player][py_IP], "170.83.220.2")) return SendClientMessage(playerid, COLOR_WHITE, "Has intentado ver información de Atom, se le ha enviado un aviso con tus datos.");
	if (!strcmp(ACCOUNT_INFO[to_player][ac_NAME], "Yahir_Kozel")) return SendClientMessage(playerid, COLOR_WHITE, "Has intentado ver información de Atom, se le ha enviado un aviso con tus datos.");

	SendClientMessageEx(playerid, COLOR_RED, "%s (%d):"COL_WHITE" %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_IP]);
	SendCmdLogToAdmins(playerid, "ip", params);
	return 1;
}

CMD:traerveh(playerid, params[])
{
	new to_car;
	if (sscanf(params, "i", to_car)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /traerveh <car_id>");
	if (to_car >= MAX_VEHICLES) return 1;

	if (!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendClientMessage(playerid, COLOR_WHITE, "Vehículo no válido.");
	if (GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED]) return SendClientMessage(playerid, COLOR_WHITE, "Vehículo está ocupado.");

    new Float:gPos[3];
    GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
    SetVehiclePosEx(to_car, gPos[0] + 2.0, gPos[1], gPos[2]);
    SendCmdLogToAdmins(playerid, "traerveh", params);
    return 1;
}

CMD:vehinfo(playerid, params[])
{
	new to_car;
	if (sscanf(params, "i", to_car)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /vehinfo <car_id>");
	if (to_car >= MAX_VEHICLES) return 1;

	if (!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendClientMessage(playerid, COLOR_WHITE, "Vehículo no válido.");

	new dialog[264];
	format(dialog, sizeof dialog, ""COL_WHITE"\
		Vehículo: %i\n\
		Ocupado: %d\n\
		Gasolina: %.1f/%.1f\n\
		Motor: %d",
		to_car,
		GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED],
		GLOBAL_VEHICLES[to_car][gb_vehicle_GAS],
		GLOBAL_VEHICLES[to_car][gb_vehicle_MAX_GAS],
		GLOBAL_VEHICLES[to_car][gb_vehicle_PARAMS_ENGINE]
	);
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Veh info", dialog, "Cerrar", "");

    SendCmdLogToAdmins(playerid, "vehinfo", params);
    return 1;
}

CMD:duty(playerid)
{
	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" No tienes permisos suficientes.");
	new str_text[174];

	if (PLAYER_TEMP[playerid][py_ADMIN_SERVICE])
	{
		PLAYER_TEMP[playerid][py_ADMIN_SERVICE] = false;

		SetPlayerNormalColor(playerid);

		if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][py_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		SendClientMessageEx(playerid, 0xF7F7F7CC, "Ahora no estás de servicio como {E73838}%s", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
		
		format(str_text, sizeof(str_text), ":scales: %s (%d) dejo de estar en servicio como %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
		//DCC_SendChannelMessage(DiscordLogChannel, str_text);
	}
	else
	{
		PLAYER_TEMP[playerid][py_ADMIN_SERVICE] = true;

		GetPlayerHealth(playerid, PLAYER_TEMP[playerid][py_OLD_HEALTH]);
		GetPlayerArmour(playerid, PLAYER_TEMP[playerid][py_OLD_ARMOUR]);

		SetPlayerNormalColor(playerid);

		if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][py_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		SendClientMessageEx(playerid, 0xF7F7F7CC, "Ahora estás de servicio como {4BD53D}%s", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
		format(str_text, sizeof(str_text), ":scales: %s (%d) se puso en servicio como %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
	}
	return 1;
}

CMD:goto(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /goto <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);

	SendCmdLogToAdmins(playerid, "goto", params);
	return 1;
}
alias:goto("ir");

CMD:get(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /get <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	SetPlayerPosEx(to_player, p[0], p[1], p[2], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);


	SendCmdLogToAdmins(playerid, "get", params);
	return 1;
}
alias:get("traer");

CMD:unban(playerid, params[])
{
	new name[24];
	if (sscanf(params, "s[24]", name)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /unban <nombre completo>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q';", name);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE `NAME` = '%q';", name);
		db_query(Database, DB_Query);

		SendClientMessageEx(playerid, COLOR_WHITE, "El usuario '%s' ha sido desbaneado.", name);

		new str[145]; format(str, 145, "[ADMIN] %s (%d) ha desbaneado a '%s'.", ACCOUNT_INFO[playerid][ac_NAME], playerid, name);
		SendMessageToAdmins(COLOR_ANTICHEAT, str);

		new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
		SendDiscordWebhook(webhook, 1);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "El nombre '%s' no está en la lista de baneados.", name);
	db_free_result(Result);
	return 1;
}

CMD:jail(playerid, params[])
{
    new to_player, reason[128], time;
    if (sscanf(params, "uds[128]", to_player, time, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /jail <player_id> <minutos> <razón>");
	if (time < 0 || time > 1440) return SendClientMessage(playerid, COLOR_WHITE, "Intervalo de minutos incorrecto.");
    if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
    if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

    StopAudioStreamForPlayer(to_player);
    CancelEdit(to_player);
    HidePlayerDialog(to_player);
    EndPlayerJob(to_player);
    PLAYER_MISC[to_player][MISC_JAILS] ++;
    SavePlayerMisc(to_player);
    PLAYER_TEMP[to_player][py_HUNGRY_MESSAGE] = false;
    PLAYER_TEMP[to_player][py_THIRST_MESSAGE] = false;
    PLAYER_TEMP[to_player][py_PLAYER_IN_ATM] = false;
    PLAYER_TEMP[playerid][py_PLAYER_IN_INV] = false;
    PLAYER_TEMP[to_player][py_CUFFED] = false;
    PLAYER_TEMP[to_player][py_CUFFING] = false;
    PLAYER_TEMP[to_player][py_PLAYER_WAITING_MP3_HTTP] = false;

    if (PLAYER_TEMP[to_player][py_WANT_MECHANIC])
    {
	   PLAYER_TEMP[to_player][py_WANT_MECHANIC] = false;
	   DisablePlayerMechanicMark(to_player);
    }
    if (PLAYER_TEMP[to_player][py_PLAYER_IN_CALL]) EndPhoneCall(to_player);
    if (PLAYER_TEMP[to_player][py_GPS_MAP]) HidePlayerGpsMap(to_player);

    JailPlayer(to_player, time * 60);
    SendClientMessageEx(to_player, 0xF7F7F7CC, "Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), reason);
    SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

    new str[145];
    format(str, 145, "[ADMIN] %s (%d) jaileó a %s (%d): %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
    SendMessageToAdmins(COLOR_ANTICHEAT, str);

    new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
	SendDiscordWebhook(webhook, 1);

    new dialog[250];
	format(dialog, sizeof dialog, ""COL_WHITE"%s te jaileó, razón: %s", ACCOUNT_INFO[playerid][ac_NAME], reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
    return 1;
}

CMD:ban(playerid, params[])
{
	new to_player, reason[128];
	if (sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /ban <player_id> <razon>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (PLAYER_TEMP[to_player][py_KICKED]) return SendClientMessage(playerid, COLOR_WHITE, "El jugador ya está expulsado.");
	if (!ACCOUNT_INFO[to_player][ac_ID]) return KickEx(to_player, 100);

	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);

	new dialog[250];
	format(dialog, sizeof dialog, ""COL_WHITE"%s te baneó, razón: %s", ACCOUNT_INFO[playerid][ac_NAME], reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	PLAYER_MISC[to_player][MISC_BANEOS] ++;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' dbid: '%d', id: '%d') baneado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);

	new str[145];
	format(str, 145, "[ADMIN] %s (%d) baneó a %s (%d): %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendMessageToAdmins(COLOR_ANTICHEAT, str);

	new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
	SendDiscordWebhook(webhook, 1);

	new serial[41];
	gpci(to_player, serial, sizeof(serial));
	format(str, sizeof(str), "%s (%s): %s", ACCOUNT_INFO[to_player][ac_NAME], reason, serial);

	Log("cheaters_gpci", str);
	return 1;
}

CMD:cls(playerid,params[])
{
	for(new i = 0; i != 40; i ++) SendClientMessageToAll(-1, " ");

	SendCmdLogToAdmins(playerid, "clear", params);
	return 1;
}
alias:cls("log", "clear");

CMD:tban(playerid, params[])
{
	new to_player, days, reason[128];
	if (sscanf(params, "uds[128]", to_player, days, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /tban <player_id> <dias> <razon>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	if (days <= 0 || days > 9999) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /ban <player_id> <dias> <razon>");

	if (PLAYER_TEMP[to_player][py_KICKED]) return SendClientMessage(playerid, COLOR_WHITE, "El jugador ya está expulsado.");
	if (!ACCOUNT_INFO[to_player][ac_ID]) return KickEx(to_player, 100);

	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, days);

	new dialog[250];
	format(dialog, sizeof dialog, ""COL_WHITE"%s te baneó por %d días, razón: %s", ACCOUNT_INFO[playerid][ac_NAME], days, reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""COL_RED"Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	PLAYER_MISC[to_player][MISC_BANEOS] ++;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' dbid: '%d', pid: '%d') baneado por %d días.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, days);

	new str[145]; format(str, 145, "[ADMIN] %s (%d) baneó %d días a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendMessageToAdmins(COLOR_ANTICHEAT, str);

	new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
	SendDiscordWebhook(webhook, 1);

	new serial[41];
	gpci(to_player, serial, sizeof(serial));
	format(str, sizeof(str), "%s (%s): %s", ACCOUNT_INFO[to_player][ac_NAME], reason, serial);

	Log("cheaters_gpci", str);
	return 1;
}

CMD:dban(playerid, params[])
{
	new reason[128], to_account;
	if (sscanf(params, "ds[128]", to_account, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /dban <DB-ID> <razon>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);

				if (db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);

					if (!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);
					SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' db_id: '%d') baneado.", get_name, id);

					new str[145]; format(str, 145, "[ADMIN] %s (%d) baneó a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, get_name, id, reason);
					SendMessageToAdmins(COLOR_ANTICHEAT, str);

					new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
					SendDiscordWebhook(webhook, 1);
				}

				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:dtban(playerid, params[])
{
	new reason[128], to_account, days;
	if (sscanf(params, "dds[128]", to_account, days, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /dtban <DB-ID> <dias> <razon>");
	if (days <= 0 || days > 9999) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /dtban <DB-ID> <dias> <razon>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);

				if (db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);

					if (!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, days);
					SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (nick: '%s' dbid: '%d') baneado por %d días.", get_name, id, days);

					new str[145]; format(str, 145, "[ADMIN] %s (%d) baneó %d días a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, get_name, id, reason);
					SendMessageToAdmins(COLOR_ANTICHEAT, str);

					new webhook[264]; format(webhook, sizeof(webhook), ":page_with_curl: %s", str);
					SendDiscordWebhook(webhook, 1);
				}

				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:rac(playerid, params[])
{
	RespawnGlobalUnoccupiedVehicles();
	SendClientMessage(playerid, COLOR_WHITE, "Todos los vehículos no personales y sin ocupar han sido re-spawneados.");

	SendCmdLogToAdmins(playerid, "rac", params);
	return 1;
}

CMD:rac2(playerid, params[])
{
	RespawnAllUnoccupiedVehicles();
	SendClientMessage(playerid, COLOR_WHITE, "Todos los vehículos sin ocupar han sido re-spawneados.");

	SendCmdLogToAdmins(playerid, "rac2", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!vehicleid) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");

	SetVehicleToRespawnEx(vehicleid);
	SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo (%d) re-spawneado.", vehicleid);
	return 1;
}

CMD:pm(playerid, params[])
{
	new to_player, message[128];
	if (sscanf(params, "us[128]", to_player, message)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /pm <player_id> <mensaje>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "{5CCE3D}>"COL_WHITE" Mensaje enviado a %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, message);

	PLAYER_TEMP[to_player][py_ADMIN_PM_PID] = playerid;
	PLAYER_TEMP[to_player][py_ADMIN_PM_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_player][py_ADMIN_PM_TIME] = gettime();
	SendClientMessageEx(to_player, COLOR_WHITE, "{5CCE3D}>"COL_WHITE" Mensaje de un administrador (/r para responder): "COL_WHITE"%s", message);

	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:atenderre(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /atenderre <player_id>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	SendClientMessageEx(to_player, COLOR_WHITE, "{5CCE3D}>"COL_WHITE" Un moderador esta atendiendo tu reporte.");

	SendCmdLogToAdmins(playerid, "atenderre", params);
	return 1;
}

CMD:deletead(playerid, params[])
{
	new ad_id;
	if (sscanf(params, "d", ad_id)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /deletead <ID>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", ad_id);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", ad_id);
		db_query(Database, DB_Query);

		SendClientMessageEx(playerid, COLOR_WHITE, "Anuncio '%d' eliminado.", ad_id);
		SendCmdLogToAdmins(playerid, "deletead", params);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la ID de ese anuncio.");
	db_free_result(Result);

	return 1;
}
alias:deletead("borrarad");

CMD:settime(playerid, params[])
{
	new hour, minute;
	if (sscanf(params, "dd", hour, minute)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /settime <hora> <minuto>");
	SERVER_TIME[0] = hour;
	SERVER_TIME[1] = minute;

	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);

	SendCmdLogToAdmins(playerid, "settime", params);
	return 1;
}

CMD:darstaff(playerid, params[])
{
	new to_player, level;
	if (sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /givemod <player_id> <rango>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	if (level < 0 || level >= sizeof ADMIN_LEVELS) return SendClientMessage(playerid, COLOR_WHITE, "El rango no es válido.");
	if (level > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes dar este rango por ser un rango superior al tuyo.");

	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", level, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] = level;
	SendClientMessageEx(to_player, COLOR_WHITE, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[level]);
	SendClientMessageEx(playerid, COLOR_WHITE, "El rango administrativo de %s (%d) ahora es %s.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ADMIN_LEVELS[level]);

	SendCmdLogToAdmins(playerid, "givemod", params);
	return 1;
}
alias:darstaff("givemod");

CMD:ac(playerid, params[])
{
	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	return 1;
}

CMD:setthirst(playerid, params[])
{
	new to_player, Float:ammount;
	if (sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setthirst <player_id> <valor>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, COLOR_WHITE, "Cantidad no válida.");
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_THIRST] = ammount;
	SendClientMessageEx(playerid, COLOR_WHITE, "La hidratación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "setthirst", params);
	return 1;
}
alias:setthirst("setsed");

CMD:sethungry(playerid, params[])
{
	new to_player, Float:ammount;
	if (sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /sethungry <player_id> <valor>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, COLOR_WHITE, "Cantidad no válida.");
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_HUNGRY] = ammount;
	SendClientMessageEx(playerid, COLOR_WHITE, "La alimentación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "sethungry", params);
	return 1;
}
alias:sethungry("sethambre");

CMD:setgas(playerid, params[])
{
	new Float:val;
	if (sscanf(params, "f", val)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setgas <valor>");
	if (val < 0.0) return SendClientMessage(playerid, COLOR_WHITE, "Valor no válido.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!vehicleid) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");

	if (val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;

	SendClientMessageEx(playerid, COLOR_WHITE, "La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:repairveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!vehicleid) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");

	RepairVehicleEx(vehicleid, playerid);
	SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo (%d) reparado.", vehicleid);

	SendCmdLogToAdmins(playerid, "repairveh", params);
	return 1;
}
alias:repairveh("repararveh");

CMD:ayudante(playerid, params[])
{
	ShowDialog(playerid, DIALOG_HELP_HELPER);
	SendCmdLogToAdmins(playerid, "ayudante", params);
	return 1;
}
alias:ayudante("helper");

CMD:moderador(playerid, params[])
{
	ShowDialog(playerid, DIALOG_HELP_MOD);
	SendCmdLogToAdmins(playerid, "moderador", params);
	return 1;
}
alias:moderador("mod");

CMD:supermoderador(playerid, params[])
{
	ShowDialog(playerid, DIALOG_HELP_SMOD);
	SendCmdLogToAdmins(playerid, "supermoderador", params);
	return 1;
}
alias:supermoderador("smod");

CMD:operador(playerid, params[])
{
	ShowDialog(playerid, DIALOG_HELP_OPER);
	SendCmdLogToAdmins(playerid, "operador", params);
	return 1;
}
alias:operador("oper");

CMD:administrador(playerid, params[])
{
	ShowDialog(playerid, DIALOG_HELP_ADMIN);
	SendCmdLogToAdmins(playerid, "administrador", params);
	return 1;
}
alias:administrador("admin");

CMD:sethealth(playerid, params[])
{
	new to_player, Float:ammount;
	if (sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /sethealth <player_id> <valor>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, COLOR_WHITE, "Valor no válido.");
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerHealthEx(to_player, ammount);
	SendClientMessageEx(playerid, COLOR_WHITE, "La vida de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "sethealth", params);
	return 1;
}
alias:sethealth("setvida");

CMD:setarmour(playerid, params[])
{
	new to_player, Float:ammount;
	if (sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setarmour <player_id> <valor>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, COLOR_WHITE, "Valor no válido.");
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerArmourEx(to_player, ammount);
	SendClientMessageEx(playerid, COLOR_WHITE, "El chaleco de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "setarmour", params);
	return 1;
}
alias:setarmour("setchaleco");

CMD:setcrack(playerid, params[])
{
  new to_player, level;
  if (sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setcrack <player_id> <nivel>");
  if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

  PLAYER_MISC[to_player][MISC_CRACK] += level;

  SendCmdLogToAdmins(playerid, "setcrack", params);
  return 1;
}

CMD:setmedis(playerid, params[])
{
  new to_player, level;
  if (sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setlevel <player_id> <nivel>");
  if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

  PLAYER_MISC[to_player][MISC_MEDICINE] += level;

  SendCmdLogToAdmins(playerid, "setmedis", params);
  return 1;
}

CMD:setlevel(playerid, params[])
{
	new to_player, level;
	if (sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /level <player_id> <nivel>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	KillTimer(PLAYER_TEMP[to_player][py_TIMERS][2]);

	ACCOUNT_INFO[to_player][ac_REP] = 1;
	ACCOUNT_INFO[to_player][ac_LEVEL] = level;
	//UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);

	SendClientMessageEx(to_player, COLOR_WHITE, ""COL_RED"¡Felicidades! "COL_WHITE"Has subido al nivel %d.", ACCOUNT_INFO[to_player][ac_LEVEL]);
	SetPlayerScore(to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);

	ACCOUNT_INFO[to_player][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[to_player][py_TIME_PASSED_LAST_REP] = gettime() * 1000;

	ACCOUNT_INFO[to_player][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[to_player][py_TIME_PLAYING];
	PLAYER_TEMP[to_player][py_TIME_PLAYING] = gettime();
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query,

		"\
			UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
		",
			ACCOUNT_INFO[to_player][ac_TIME_PLAYING], ACCOUNT_INFO[to_player][ac_LEVEL], ACCOUNT_INFO[to_player][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[to_player][ac_PAYDAY_REP], ACCOUNT_INFO[to_player][ac_ID]
	);
	db_query(Database, DB_Query);

	KillTimer(PLAYER_TEMP[to_player][py_TIMERS][2]);
	PLAYER_TEMP[to_player][py_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[to_player][ac_TIME_FOR_REP], false, "i", to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "El nivel de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);

	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}

CMD:setwork(playerid, params[])
{
	new to_player, work, set;
	if (sscanf(params, "udd", to_player, work, set)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setwork <player_id> <work> <set>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, COLOR_WHITE, "El trabajo no es válido, para verlos usa /works.");

	if (PLAYER_TEMP[to_player][py_WORKING_IN]) return SendClientMessage(playerid, COLOR_WHITE, "No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");


	new player_jobs = CountPlayerJobs(to_player);
	if (ACCOUNT_INFO[to_player][ac_SU])
	{
		if (player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}
	else
	{
		if (player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", set, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);

	PLAYER_WORKS[to_player][work] = set;
	if (!set) SendClientMessageEx(to_player, COLOR_WHITE, ""COL_WHITE"Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	else
	{
		SendClientMessageEx(to_player, COLOR_WHITE, ""COL_RED"¡Felicidades! "COL_WHITE"Has conseguido tu trabajo de %s.", work_info[work][work_info_NAME]);
	    SavePlayerWorks(playerid);

		if (work == WORK_POLICE)
	    {
			new DBResult:Result_pnumber, phone_number;
			Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `EXTRA` FROM `PLAYER_MISC` WHERE `ID` = '14') LIMIT 1;");
			if (db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
			db_free_result(Result_pnumber);
			PLAYER_MISC[to_player][MISC_PLACA_PD] = phone_number;
			SavePlayerMisc(to_player);

			PLAYER_SKILLS[to_player][WORK_POLICE] = 1;
			SavePlayerSkills(to_player);
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], ACCOUNT_INFO[to_player][ac_NAME], to_player, set);

	SavePlayerWorks(to_player);
	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}

DeletePlayerJobs(playerid)
{
	for(new i = 0; i != sizeof work_info; i ++)
	{
		if (work_info[i][work_info_TYPE] == WORK_TYPE_NORMAL)
		{
			new DB_Query[256];
			format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], i);
			db_query(Database, DB_Query);

			PLAYER_WORKS[playerid][i] = 0;
			SavePlayerWorks(playerid);
		}
	}
	return 1;
}

CMD:setworkexp(playerid, params[])
{
	new to_player, work, exp;
	if (sscanf(params, "udd", to_player, work, exp)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setworkexp <player_id> <work, para verlos /works> <exp>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, COLOR_WHITE, "El trabajo no es válido, para verlos usa /works.");

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", exp, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);

	PLAYER_SKILLS[to_player][ work ] = exp;
	SavePlayerSkills(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, work_info[ work ][work_info_NAME], exp);

	SendCmdLogToAdmins(playerid, "setworkexp", params);
	return 1;
}

CMD:setcash(playerid, params[])
{
	new to_player, value;
	if (sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setcash <player_id> <ammount>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerCash(to_player, value);
	SendClientMessageEx(playerid, COLOR_WHITE, "El dinero de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:givecash(playerid, params[])
{
	new to_player, value;
	if (sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /givecash <player_id> <ammount>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	GivePlayerCash(to_player, value);
	SendClientMessageEx(playerid, COLOR_WHITE, "El jugador %s (%d) ha recibido %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	SendClientMessageEx(to_player, COLOR_WHITE, "El administrador %s (%d) te ha dado %d.", ACCOUNT_INFO[playerid][ac_NAME], playerid, value);

	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:setbmlevel(playerid, params[])
{
	new to_player, value;
	if (sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setbmlevel <player_id> <level>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_BLACK_MARKET_LEVEL] = value;
	SendClientMessageEx(playerid, COLOR_WHITE, "El nivel 'black_market' de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setbmlevel", params);
	return 1;
}

CMD:asay(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /asay <message>");
	new str[264];
	format(str, 264, "[Anuncio]"COL_WHITE" Admin %s: (( %s ))", ACCOUNT_INFO[playerid][ac_NAME], params);
	SendClientMessageToAll(0x717ebeFF, str);

	SendCmdLogToAdmins(playerid, "asay", params);
	return 1;
}
alias:asay("global");

CMD:setworld(playerid, params[])
{
    new to_player, world;
    if (sscanf(params, "ud", to_player, world)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setworld <player_id> <world>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	SetPlayerVirtualWorld(to_player, world);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' fue al mundo %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, world);
	SendCmdLogToAdmins(playerid, "setworld", params);
    return 1;
}

CMD:setinterior(playerid, params[])
{
    new to_player, interior;
    if (sscanf(params, "ud", to_player, interior)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setworld <player_id> <interior>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	SetPlayerInterior(to_player, interior);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' fue al interior %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, interior);
	SendCmdLogToAdmins(playerid, "setinterior", params);
    return 1;
}

CMD:lpos(playerid, params[])
{
	new Float:p[4], interior, vw;
	if (sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /spos [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	return 1;
}

CMD:spos(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /spos <tag>");

	new 
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		str[256];

	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid,angle);

	SendClientMessage(playerid,-1,"Posición guardada.");

	new File:spawn = fopen("spos-codes.txt", io_append);

 	format(str, 256, ",\r\n{%f, %f, %f, %f} /*%s*/", x, y, z, angle, params);

  	fwrite(spawn, str);
    fclose(spawn);

    SendCmdLogToAdmins(playerid, "spos", params);
	return 1;
}

CMD:v(playerid, params[])
{
	new modelid, color1, color2;
	if (sscanf(params, "ddd", modelid, color1, color2)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /v <modelid> <color 1> <color 2>");
	if (modelid < 400 || modelid > 611) return SendClientMessage(playerid, COLOR_WHITE, "Modelo de vehículo no válido.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2);
	PutPlayerInVehicleEx(playerid, vid, 0);

	SendCmdLogToAdmins(playerid, "v", params);
	return 1;
}

CMD:dv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!vehicleid) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: no estás en ningún vehículo de prueba.");
	if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: no estás en ningún vehículo de prueba.");

	DestroyVehicleEx(vehicleid);
	SendClientMessage(playerid, COLOR_WHITE, "Vehículo de prueba destruido.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new to_player, new_name[24];
	if (sscanf(params, "us[24]", to_player, new_name)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setname <player_id> <nuevo nombre>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	new DBResult:Result, DB_Query[256], bool:used;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", new_name);
	Result = db_query(Database, DB_Query);
	if (db_num_rows(Result)) used = true;
	db_free_result(Result);
	if (used) return SendClientMessageEx(playerid, COLOR_WHITE, "El nombre '%s' está en uso.", new_name);

	strreplace(new_name, " ", "_");
	format(PLAYER_TEMP[to_player][py_NAME], 24, "%s", new_name);
	format(ACCOUNT_INFO[to_player][ac_NAME], 24, "%s", new_name);
	SetRolePlayNames(to_player);
	SetPlayerName(to_player, new_name);

	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", new_name, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if (!PROPERTY_INFO[i][property_VALID]) continue;
		if (PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[to_player][ac_ID]) continue;

		new label_str[256], city[45], zone[45];
		GetPointZone(PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], city, zone);
		format
		(
			label_str,
			sizeof label_str,
			""COL_WHITE"\
				Propiedad en %s (%d)\n\
				Propietario:{35A7FF} %s\n\
			", zone, PROPERTY_INFO[i][property_ID], ACCOUNT_INFO[to_player][ac_NAME]
		);
		UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xF7F7F700, label_str);
	}

	SendClientMessageEx(to_player, COLOR_WHITE, ""COL_WHITE"Tu nombre ha sido cambiado a '%s'", new_name);
	SendClientMessageEx(playerid, COLOR_WHITE, "El nombre del jugador ha sido cambiado a '%s'", new_name);

	SendCmdLogToAdmins(playerid, "setname", params);
	return 1;
}

CMD:exproperty(playerid, params[])
{
	new id_property;
	if (sscanf(params, "d", id_property)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /exproperty <id>");
	if (id_property <= 0) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /exproperty < id > 0 >");

	new index = GetPropertyIndexByID(id_property);
	if (index == -1) return SendClientMessage(playerid, COLOR_WHITE, "PROPIEDAD ID no encontrada.");

	if (!PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, COLOR_WHITE, "Esta propiedad ya está en venta.");


	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;

	new city[45], zone[45];
	GetPointZone(PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], city, zone);
	format(PROPERTY_INFO[ index ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ index ][property_ID]);

	new info[3];
	UpdateUnnocupiedPropertyLabel(index);

	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);


	new DB_Query[350];
	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);

	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);

	SendClientMessageEx(playerid, COLOR_WHITE, "Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);

	SendCmdLogToAdmins(playerid, "exproperty", params);
	return 1;
}

CMD:gotoproperty(playerid, params[])
{
	new int_type;
	if (sscanf(params, "d", int_type)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /gotoproperty <interior>");
	if (int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendClientMessageEx(playerid, COLOR_WHITE, "Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}
alias:gotoproperty("ircasa");

CMD:setpass(playerid, params[])
{
	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if (sscanf(params, "ds[19]", to_account, new_pass)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setpass <DB-ID> <pass>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", get_name, id, player_id);
			else
			{
				new salt[16], salt_ex[16], pass_ex[64 + 1];
				getRandomSalt(salt);
				format(salt_ex, 16, "%s", salt);

				SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q', `PASS` = '%q' WHERE `ID` = '%d';", salt_ex, pass_ex, id);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, COLOR_WHITE, "La contraseña de '%s' ahora es: %s", get_name, new_pass);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:setip(playerid, params[])
{
	new to_account, new_ip[16];
	if (sscanf(params, "ds[16]", to_account, new_ip)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setip <DB-ID> <ip>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado, no se puede cambiar.", get_name, id, player_id);
			else
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `IP` = '%q' WHERE `ID` = '%d';", new_ip, id);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, COLOR_WHITE, "La ip de '%s' ahora es: %s", get_name, new_ip);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:delete(playerid, params[])
{
	new to_account;
	if (sscanf(params, "d", to_account)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /delete <DB-ID>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick ,su player_id: %d.", get_name, id, player_id);
			else
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CUENTA` WHERE `ID` = '%d';", id);
				db_query(Database, DB_Query);

				new ex_properties;
				for(new index = 0; index != MAX_PROPERTIES; index ++)
				{
					if (!PROPERTY_INFO[index][property_VALID]) continue;
					if (!PROPERTY_INFO[index][property_SOLD]) continue;
					if (PROPERTY_INFO[index][property_OWNER_ID] != id) continue;

					PROPERTY_INFO[ index ][property_SOLD] = false;
					PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
					new city[45], zone[45];
					GetPointZone(PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], city, zone);
					format(PROPERTY_INFO[ index ][property_NAME], 24, "%s (%d)", zone, PROPERTY_INFO[ index ][property_ID]);

					new info[3];
					UpdateUnnocupiedPropertyLabel(index);

					DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

					PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = index; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					ex_properties ++;
				}


				SendClientMessageEx(playerid, COLOR_WHITE, "CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", get_name, id);
				if (ex_properties > 0) SendClientMessageEx(playerid, COLOR_WHITE, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);

				new str[145]; format(str, 145, "[ADMIN] %s (%d) ha eliminado el usuario '%s'", ACCOUNT_INFO[playerid][ac_NAME], playerid, get_name);
				SendMessageToAdmins(COLOR_ANTICHEAT, str);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);

	return 1;
}

/* PROPERTY CONSTRUCTOR */

CMD:rproperty(playerid, params[])
{
	new id_property;
	if (sscanf(params, "d", id_property)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /rproperty <id>");
	if (id_property <= 0) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /rproperty < id > 0 >");

	new index = GetPropertyIndexByID(id_property);
	if (index == -1) return SendClientMessage(playerid, COLOR_WHITE, "PROPIEDAD ID no encontrada.");

	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY` WHERE `ID` = '%d';", PROPERTY_INFO[index][property_ID]);
	db_query(Database, DB_Query);

	if (IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if (IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if (IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;

	TOTAL_PROPERTIES_LOADED --;

	SendClientMessageEx(playerid, COLOR_WHITE, "PROPIEDAD %d ELIMINADA.", id_property);
	SendClientMessageEx(playerid, COLOR_WHITE, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);

	SendCmdLogToAdmins(playerid, "rproperty", params);
	return 1;
}

CMD:eproperty(playerid, params[])
{
	new id_property, new_int;
	if (sscanf(params, "dddddd", id_property, new_int, PLAYER_TEMP[playerid][py_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][3])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /eproperty <id> <interior> <nivel> <precio> <VIP level> <hycoins>");
	if (id_property <= 0) return SendClientMessage(playerid, COLOR_WHITE, "ID no válida.");

	new index = GetPropertyIndexByID(id_property);
	if (index == -1) return SendClientMessage(playerid, COLOR_WHITE, "PROPIEDAD ID no encontrada.");

	if (PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, COLOR_WHITE, "Solo se pueden modificar propiedades que estén libres.");

	if (new_int < 0 || new_int >= sizeof(PROPERTY_INTERIORS)) return SendClientMessage(playerid, COLOR_WHITE, "El interior elegido no es válido.");

	PROPERTY_INFO[index][property_ID_INTERIOR] = new_int;
	PROPERTY_INFO[index][property_PRICE] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][1];
	PROPERTY_INFO[index][property_LEVEL] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][0];
	PROPERTY_INFO[index][property_EXTRA] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][3];
	PROPERTY_INFO[index][property_VIP_LEVEL] = PLAYER_TEMP[playerid][py_PROPERTY_CINFO][2];
	PROPERTY_INFO[index][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[index][property_PRICE], MULTIPLIER_PROPERITES));

	if (PROPERTY_INFO[index][property_EXTRA]) PROPERTY_INFO[index][property_PRICE] = 0;
	if (PROPERTY_INFO[index][property_VIP_LEVEL]) PROPERTY_INFO[index][property_LEVEL] = 1;

	UpdateUnnocupiedPropertyLabel(index);

	new DB_Query[512];
	format(DB_Query, sizeof DB_Query,

		"\
		UPDATE `PROPERTY` SET `ID_INTERIOR` = '%d' WHERE `ID` = '%d';\
		UPDATE `PROPERTY_INFO` SET \
			`PRICE` = '%d',\
			`LEVEL` = '%d',\
			`EXTRA` = '%d',\
			`VIP_LEVEL` = '%d' \
		WHERE `ID_PROPERTY` = '%d';",
			PROPERTY_INFO[index][property_ID_INTERIOR],
			PROPERTY_INFO[index][property_ID],

			PROPERTY_INFO[index][property_PRICE_BASE],
			PROPERTY_INFO[index][property_LEVEL],
			PROPERTY_INFO[index][property_EXTRA],
			PROPERTY_INFO[index][property_VIP_LEVEL],
			PROPERTY_INFO[index][property_ID]
	);
	db_query(Database, DB_Query);

	SendCmdLogToAdmins(playerid, "eproperty", params);
	return 1;
}

CMD:cproperty(playerid, params[])
{
	if (TOTAL_PROPERTIES_LOADED >= MAX_PROPERTIES) return SendClientMessage(playerid, COLOR_WHITE, "Límite alcanzado.");

	if (sscanf(params, "dddd", PLAYER_TEMP[playerid][py_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][py_PROPERTY_CINFO][3])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /cproperty <nivel> <precio> <level> <hycoins>");

	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);

	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);

	UpdatePlayerPropertyContructor(playerid);
	return 1;
}

SendMessageToAdmins(color, const message[], level = 0)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if (IsPlayerConnected(i))
	    {
		   if (ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > level && PLAYER_TEMP[i][py_ADMIN_SERVICE])
		   {
			  SendClientMessage(i, color, message);
		   }
	    }
	}
	return 1;
}

SendCmdLogToAdmins(playerid, const cmdtext[], const params[])
{
	new
		message[145],
		str_text[365];

	if (isnull(params)) format(message, sizeof message, "%s (%d) uso el comando /%s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext);
	else format(message, sizeof message, "%s (%d) uso el comando /%s %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext, params);

	format(str_text, sizeof(str_text), ":page_with_curl: %s", message);
	//DCC_SendChannelMessage(DiscordLogChannel, str_text);
	SendDiscordWebhook(str_text, 1);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if (IsPlayerConnected(i))
	    {
		   if (ACCOUNT_INFO[i][ac_ADMIN_LEVEL] >= ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] && PLAYER_TEMP[i][py_ADMIN_SERVICE])
		   {
			  if (PLAYER_TEMP[i][py_SEE_ACMD_LOG]) SendClientMessage(i, 0x9A9A9AFF, message);
		   }
	    }
	}
	return 1;
}

SendMessageToAdminsAC(color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if (IsPlayerConnected(i))
	    {
		   if (ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 1 && PLAYER_TEMP[i][py_ADMIN_SERVICE])
		   {
			  if (PLAYER_TEMP[i][py_SEE_AC_LOG]) SendClientMessage(i, color, message);
		   }
	    }
	}
	printf(message);
	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if (GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if (GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			DestroyVehicleEx(i);
			continue;
		}

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if (GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if (GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

getRandomSalt(salt[], length = sizeof salt)
{
    for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

UpdatePlayerShop(playerid)
{
	switch(PLAYER_TEMP[playerid][py_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if (i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			new DBResult:Result, DB_Query[256], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`CONNECTED`, `SHOP`.* FROM `SHOP`, `CUENTA` WHERE `SHOP`.`ID_USER` = `CUENTA`.`ID` ORDER BY `CUENTA`.`CONNECTED` DESC, `SHOP`.`DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new connected, Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;

				connected = db_get_field_assoc_int(Result, "CONNECTED");
				PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");

				new Float:Td_Pos[2];

				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}

				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				if (connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], COLOR_WHITE);
				else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 0x666666FF);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);

				format(td_str, sizeof td_str, "%s$", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);

				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);

			new total_pages = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] + 1, total_pages);

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if (i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrs");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			new DBResult:Result, DB_Query[160], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `SHOP` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT %d, %d;", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;

				PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");

				new Float:Td_Pos[2];

				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}

				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], COLOR_WHITE);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);

				format(td_str, sizeof td_str, "%s$", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);

				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);

			new the_query[80];
			format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

			new total_pages = GetDatabasePages(the_query, PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] + 1, total_pages);

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			new DBResult:Result, DB_Query[280], bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `SHOP`.*, `CUENTA`.`CONNECTED`, `CUENTA`.`NAME`, `PHONE`.`PHONE_NUMBER` FROM `SHOP`, `CUENTA`, `PHONE` WHERE `SHOP`.`ID` = '%d' AND `CUENTA`.`ID` = `SHOP`.`ID_USER` AND `PHONE`.`ID_USER` = `SHOP`.`ID_USER`;", PLAYER_TEMP[playerid][py_SHOP_SELECTED_ARTICLE_ID]);
			Result = db_query(Database, DB_Query);

			if (db_num_rows(Result))
			{
				new td_str[190], connected, ad_id, ad_by_aid, ad_type, ad_price, ad_text[24], ad_modelid, Float:ad_rX, Float:ad_rY, Float:ad_rZ, Float:ad_Zoom, ad_vCol1, ad_vCol2, ad_add_date[24], ad_by[24], ad_by_phone_number;

				connected = db_get_field_assoc_int(Result, "CONNECTED");
				ad_id = db_get_field_assoc_int(Result, "ID");
				ad_by_aid = db_get_field_assoc_int(Result, "ID_USER");
				ad_type = db_get_field_assoc_int(Result, "TYPE");
				ad_price = db_get_field_assoc_int(Result, "PRICE");
				db_get_field_assoc(Result, "TEXT", ad_text, 24);
				ad_modelid = db_get_field_assoc_int(Result, "MODELID");
				ad_rX = db_get_field_assoc_float(Result, "RX");
				ad_rY = db_get_field_assoc_float(Result, "RY");
				ad_rZ = db_get_field_assoc_float(Result, "RZ");
				ad_Zoom = db_get_field_assoc_float(Result, "ZOOM");
				ad_vCol1 = db_get_field_assoc_int(Result, "VCOL1");
				ad_vCol2 = db_get_field_assoc_int(Result, "VCOL2");
				db_get_field_assoc(Result, "DATE", ad_add_date, 24);
				db_get_field_assoc(Result, "NAME", ad_by, 24);
				ad_by_phone_number = db_get_field_assoc_int(Result, "PHONE_NUMBER");

				if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
					PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
				}
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_rX, ad_rY,ad_rZ, ad_Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_vCol1, ad_vCol2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);

				format(td_str, sizeof td_str, "Art¢culo_n|_%d (%s)", ad_id, ad_add_date);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);

				switch(ad_type)
				{
					case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_Propiedad~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
					case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Veh¢culo~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
					case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_Otros~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
				}
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

				for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrs");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);

				if (ACCOUNT_INFO[playerid][ac_ID] == ad_by_aid)
				{
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
				}

				found = true;
			}
			else
			{
				found = false;
			}
			db_free_result(Result);

			if (!found)
			{
			    ShowPlayerMessage(playerid, "~r~Este anuncio ya no está disponible.", 3);
				PLAYER_TEMP[playerid][py_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				return 1;
			}

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
			}

			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			DestroyArticleShopTextDraws(playerid);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);

	PLAYER_TEMP[playerid][py_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][py_SHOP] = false;
	PLAYER_TEMP[playerid][py_SHOP_STATE] = 0;

	PLAYER_TEMP[playerid][py_DIALOG_DB_LIMIT] = 0;
	PLAYER_TEMP[playerid][py_DIALOG_DB_PAGE] = 0;

	if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);

	for(new i = 0; i != 6; i ++)
	{
		PLAYER_TEMP[playerid][py_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if (i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);

	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if (PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

CMD:depurationinfo(playerid, params[])
{
    SendClientMessage(playerid, COLOR_WHITE, "Depuration: 0.01");
    return 1;
}

td_str_legal(const text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if ((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if (PLAYER_MISC[playerid][MISC_SEARCH_LEVEL] != 0)
	{
		if (!PLAYER_WORKS[forplayerid][WORK_POLICE]) return 1;
		if (PLAYER_TEMP[forplayerid][py_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_RED);
	}
    return 1;
}

GetPlayerPlantedPlants(playerid)
{
	new plants;

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if (!PLANTS[i][plant_VALID]) continue;
		if (PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == ACCOUNT_INFO[playerid][ac_ID]) plants ++;
	}
	return plants;
}


StartPlayerJob(playerid, work, vehicleid = INVALID_VEHICLE_ID)
{
	switch(work)
	{
		case WORK_TRUCK:
		{
			if (TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if (TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) ShowPlayerMessage(playerid, "Vuelve a la ~y~estación", 7);
				else ShowPlayerMessage(playerid, "Ve a entregar la mercancía", 7);

				new Float:val = 70.0;
				if (val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;

				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
			else ShowPlayerMessage(playerid, "Ve a los ~b~puntos de carga", 7);

			DisableRemoteVehicleCollisions(playerid, 1);
		}
		case WORK_HARVESTER:
		{
			PLAYER_TEMP[playerid][py_HARVERT_PROCCESS] = 0;
			ShowPlayerMessage(playerid, "Ve hasta los ~y~puntos de control~w~.", 3);
			Set_HARVEST_Checkpoint(playerid);
			DisableRemoteVehicleCollisions(playerid, 1);
		}
		case WORK_TRASH:
		{
			if (CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
			{
				DisableRemoteVehicleCollisions(playerid, 1);
				SetPlayerSkin(playerid, 16);
				PLAYER_TEMP[playerid][py_SKIN] = 16;
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_MECHANIC:
		{
			if (CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 50);
				PLAYER_TEMP[playerid][py_SKIN] = 50;
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
			SetMechanicPlayerMarkers(playerid);
		}
		case WORK_POLICE:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s | Nº%d | %c. %s", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_MISC[playerid][MISC_PLACA_PD], PLAYER_TEMP[playerid][py_FIRST_NAME][0], PLAYER_TEMP[playerid][py_SUB_NAME]);

			if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]);
				PLAYER_TEMP[playerid][py_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][py_POLICE_LABEL] = CreateDynamic3DTextLabel(label_str, 0xF7F7F700, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			//for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
		}
	}

	PLAYER_TEMP[playerid][py_WORKING_IN] = work;
	return 1;
}

EndPlayerJob(playerid, changeskin = true)
{
	switch(PLAYER_TEMP[playerid][py_WORKING_IN])
	{
		case WORK_TRUCK:
		{
			if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if (TRUCK_VEHICLE[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					if (TRUCK_VEHICLE[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
						SetVehicleToRespawnEx(PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID]);
					}
					if (TRUCK_VEHICLE[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(PLAYER_TEMP[playerid][py_TIMERS][9]);
					}
				}
			}
			if (IsValidDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT]);
	   			CancelTracing(playerid);
				PLAYER_TEMP[playerid][py_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_HARVESTER:
		{
			if (IsValidDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT]);
				PLAYER_TEMP[playerid][py_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if (PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if (WORK_VEHICLES[ PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_HARVESTER) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][py_LAST_VEHICLE_ID]);
			}
		}
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if (changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
				SetPlayerToys(playerid);
			}

			if (PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if (TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if (PLAYER_TEMP[playerid][py_TRASH_DRIVER])
					{
						ShowPlayerMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "~r~El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.", 3);
						CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
					}
					if (PLAYER_TEMP[playerid][py_TRASH_PASSENGER])
					{
						ShowPlayerMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "~r~El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.", 3);
						CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][py_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE:
		{
			PLAYER_TEMP[playerid][py_POLICE_RADIO] = 0;
			if (IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][py_POLICE_LABEL]);
				PLAYER_TEMP[playerid][py_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}

			if (changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
				//SetPlayerToys(playerid);
			}

			SetPlayerColorEx(playerid, PLAYER_COLOR);
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MECHANIC:
		{
			if (changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
	}

	PLAYER_TEMP[playerid][py_WORKING_IN] = WORK_NONE;

	SavePlayerSkills(playerid);
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if (PLAYER_WORKS[playerid][i]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if (PLAYER_WORKS[playerid][i])
		{
			if (count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);

			count ++;
		}
	}

	if (!count) works = "ninguno";
	return works;
}

SetPlayerSkillLevels(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
	return 1;
}

RequisarilegalInv(playerid)
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE])
	{
	    new DB_Query[90];
	    format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	    db_query(Database, DB_Query);
	    ResetPlayerWeaponsEx(playerid);
	}

	PLAYER_MISC[playerid][MISC_SEED_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_SEED_CRACK] = 0;
	PLAYER_MISC[playerid][MISC_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_CRACK] = 0;
	SavePlayerMisc(playerid);
	return 1;
}

DeleteIlegalInv(playerid)
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE])
	{
		new DB_Query[90];
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
		ResetPlayerWeaponsEx(playerid);
	}

	PLAYER_MISC[playerid][MISC_SEED_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_SEED_CRACK] = 0;
	PLAYER_MISC[playerid][MISC_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_CRACK] = 0;
	SavePlayerMisc(playerid);
	return 1;
}

CALLBACK: HealthDown(playerid)
{
	if (CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return 1;

	GivePlayerHealthEx(playerid, -1.0);

	if (GetPlayerDistanceFromPoint(playerid, PLAYER_TEMP[playerid][py_INJURED_POS][0], PLAYER_TEMP[playerid][py_INJURED_POS][1], PLAYER_TEMP[playerid][py_INJURED_POS][2]) > 0.10) ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);
	ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, 1, 0, 1);

	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][16]);
	PLAYER_TEMP[playerid][py_TIMERS][16] = SetTimerEx("HealthDown", 8000, false, "i", playerid);
	return 1;
}

CALLBACK: StandUpBotikin(medic, playerid)
{
	PLAYER_MISC[medic][MISC_BOTIKIN] --;
	ResetItemBody(medic);
	SavePlayerMisc(medic);
	ShowPlayerMessage(medic, "~g~Has curado a esta persona.", 3);

	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	ResetItemBody(playerid);

	if (ACCOUNT_INFO[playerid][ac_SU]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(playerid, 25.0);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}

InviteToSAPD(playerid, to_player)
{
	if (!IsPlayerConnected(to_player)) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);
	if (to_player == playerid) return 1;

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~Esta persona no está cerca tuya.", 3);
	if (PLAYER_CREW[to_player][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~Esta persona tiene banda.", 3);
	if (PLAYER_WORKS[to_player][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~Este usuario ya es policía.", 3);
	if (PLAYER_TEMP[to_player][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes reclutar a esta persona por ahora.", 3);

	new player_jobs = CountPlayerJobs(to_player);
	if (ACCOUNT_INFO[to_player][ac_SU])
	{
		if (player_jobs >= MAX_SU_WORKS)
		{
		    ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}
	else
	{
		if (player_jobs >= MAX_NU_WORKS)
		{
			ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}

	if (PLAYER_TEMP[to_player][py_WORKING_IN]) return ShowPlayerMessage(playerid, "~r~Esta persona no puede unirse porque esta de servicio en su trabajo.", 3);

	PLAYER_WORKS[to_player][WORK_POLICE] = true;
	PLAYER_SKILLS[to_player][WORK_POLICE] = 1;
	SavePlayerWorks(to_player);
	SavePlayerSkills(to_player);

	new DBResult:Result_pnumber, phone_number;
	Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `EXTRA` FROM `PLAYER_MISC` WHERE `ID` = '14') LIMIT 1;");
	if (db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
	db_free_result(Result_pnumber);
	PLAYER_MISC[to_player][MISC_PLACA_PD] = phone_number;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "%s ahora es policía.", PLAYER_TEMP[to_player][py_RP_NAME]);
	ShowPlayerMessage(to_player, "~y~Ahora eres policía.", 3);
	return 1;
}

InviteToLCN(playerid, to_player)
{
	if (!IsPlayerConnected(to_player)) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);
	if (to_player == playerid) return 1;

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~Esta persona no está cerca tuya.", 3);
	if (PLAYER_CREW[to_player][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~Esta persona tiene banda.", 3);
	if (PLAYER_WORKS[to_player][WORK_MAFIA]) return ShowPlayerMessage(playerid, "~r~Este usuario ya es mafioso.", 3);
	if (PLAYER_TEMP[to_player][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes reclutar a esta persona por ahora.", 3);

	new player_jobs = CountPlayerJobs(to_player);
	if (ACCOUNT_INFO[to_player][ac_SU])
	{
		if (player_jobs >= MAX_SU_WORKS)
		{
		    ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}
	else
	{
		if (player_jobs >= MAX_NU_WORKS)
		{
			ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}

	if (PLAYER_TEMP[to_player][py_WORKING_IN]) return ShowPlayerMessage(playerid, "~r~Esta persona no puede unirse porque esta de servicio en su trabajo.", 3);

	PLAYER_WORKS[to_player][WORK_MAFIA] = true;
	PLAYER_SKILLS[to_player][WORK_MAFIA] = 1;
	SavePlayerWorks(to_player);
	SavePlayerSkills(to_player);

	SendClientMessageEx(playerid, 0xca3535FF, "[LCN] "COL_WHITE" %s ahora es de la mafia.", PLAYER_TEMP[to_player][py_RP_NAME]);
	ShowPlayerMessage(to_player, "~y~Ahora eres mafioso.", 3);
	return 1;
}

InviteToTCC(playerid, to_player)
{
	if (!IsPlayerConnected(to_player)) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);
	if (to_player == playerid) return 1;

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if (!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "~r~Esta persona no está cerca tuya.", 3);
	if (PLAYER_CREW[to_player][player_crew_VALID]) return ShowPlayerMessage(playerid, "~r~Esta persona tiene banda.", 3);
	if (PLAYER_WORKS[to_player][WORK_ENEMY_MAFIA]) return ShowPlayerMessage(playerid, "~r~Este usuario ya es mafioso.", 3);
	if (PLAYER_TEMP[to_player][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No puedes reclutar a esta persona por ahora.", 3);

	new player_jobs = CountPlayerJobs(to_player);
	if (ACCOUNT_INFO[to_player][ac_SU])
	{
		if (player_jobs >= MAX_SU_WORKS)
		{
		    ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}
	else
	{
		if (player_jobs >= MAX_NU_WORKS)
		{
			ShowPlayerMessage(playerid, "~r~Esta persona ya no puede tener más trabajos.", 3);
			return 1;
		}
	}

	if (PLAYER_TEMP[to_player][py_WORKING_IN]) return ShowPlayerMessage(playerid, "~r~Esta persona no puede unirse porque esta de servicio en su trabajo.", 3);

	PLAYER_WORKS[to_player][WORK_ENEMY_MAFIA] = true;
	PLAYER_SKILLS[to_player][WORK_ENEMY_MAFIA] = 1;
	SavePlayerWorks(to_player);
	SavePlayerSkills(to_player);

	SendClientMessageEx(playerid, 0xca3535FF, "[LCN] "COL_WHITE" %s ahora es de la mafia.", PLAYER_TEMP[to_player][py_RP_NAME]);
	ShowPlayerMessage(to_player, "~y~Ahora eres mafioso enemigo.", 3);
	return 1;
}

CMD:c(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerNotification(playerid, "Ahora no puedes usar comandos.", 3);

	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 1) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	new to_player, level, reason[32];
	if (sscanf(params, "uds[32]", to_player, level, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /c <ID o nombre> <1/6> <razon>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (to_player == playerid) return ShowPlayerMessage(playerid, "~r~No puedes darte cargos a tu mismo");
	if (PLAYER_WORKS[to_player][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~Este jugador es miembro de la policía.", 3);
	if (level > 6) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /c <ID o nombre> <1/6> <razon>");
	if (strlen(reason) >= 24) return ShowPlayerMessage(playerid, "~r~Como máximo puedes introducir una razón de 32 caracteres.", 3);

	PLAYER_TEMP[to_player][py_POLICE_REASON] = reason;

	new str_text[128];
	format(str_text, sizeof(str_text), "%s le puso %d cargos a ~r~%s~w~ (%s).", PLAYER_TEMP[playerid][py_NAME], level, PLAYER_TEMP[to_player][py_NAME], reason);
	SendPoliceNotification(str_text, 4);

	ShowPlayerNotification(to_player, "Sera mejor que corras, la policía te esta buscando", 2);
	SetPlayerPoliceSearchLevel(to_player, level);
	return 1;
}

CMD:cargos(playerid, params[])
{
	if (CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return ShowPlayerNotification(playerid, "Ahora no puedes usar comandos.", 3);

	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 1) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /cargos <ID o nombre>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (to_player == playerid) return ShowPlayerMessage(playerid, "~r~No puedes verte a tu mismo");
	if (PLAYER_WORKS[to_player][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~Este jugador es miembro de la policía.", 3);
	if (!PLAYER_TEMP[to_player][py_POLICE_REASON]) ShowPlayerMessage(playerid, "~r~Este jugador no tiene razones de cargos.", 3);

	SendClientMessageEx(playerid, COLOR_WHITE, "%s tiene cargos por "COL_RED"%s", PLAYER_TEMP[to_player][py_NAME], PLAYER_TEMP[to_player][py_POLICE_REASON]);
	return 1;
}

GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if (!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}

NewCrewRegister(index)
{
	if (!CREW_INFO[index][crew_VALID]) return 0;

	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW`\
		(\
			`NAME`, `COLOR`, `GRAFFITIS_COUNT`\
		)\
		VALUES\
		(\
			'%q', '%d', '0'\
		);\
		SELECT MAX(`ID`) FROM `CREW`;\
	",
		CREW_INFO[index][crew_NAME],
		CREW_INFO[index][crew_COLOR]
	);
	Result = db_query(Database, DB_Query);
	if (db_num_rows(Result)) CREW_INFO[index][crew_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);



	for(new i = 0; i != MAX_CREW_RANKS; i ++)
	{
		if (!CREW_RANK_INFO[index][i][crew_rank_VALID]) continue;

		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `CREW_RANKS`\
			(\
				`ID_CREW`, `RANK_POS`, `RANK_NAME`\
			)\
			VALUES\
			(\
				'%d', '%d', '%q'\
			);\
			SELECT MAX(`ID`) FROM `CREW_RANKS`;\
		",
			CREW_INFO[index][crew_ID],
			i,
			CREW_RANK_INFO[index][i][crew_rank_NAME]
		);
		Result_ranks = db_query(Database, DB_Query);

		if (db_num_rows(Result_ranks)) CREW_RANK_INFO[index][i][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
		db_free_result(Result_ranks);

		for(new x = 0; x != CREW_RANK_SIZE; x ++)
		{
			format(DB_Query, sizeof DB_Query,
			"\
				INSERT INTO `RANK_PERMISSIONS`\
				(\
					`ID_RANK`, `PERMISSION`, `SET`\
				)\
				VALUES\
				(\
					'%d', '%d', '%d'\
				);\
			",
				CREW_RANK_INFO[index][i][crew_rank_ID],
				x,
				CREW_RANK_INFO[index][i][crew_rank_PERMISSION][x]
			);
			db_query(Database, DB_Query);
		}

	}
	return 1;
}

SendMessageToCrewMembers(crew_id, color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				if (PLAYER_CREW[i][player_crew_ID] == crew_id)
				{
					SendResponsiveMessage(i, color, message, 164);
				}
			}
		}
	}
	return 1;
}

SaveNotificationToCrewMemeber(crew_id, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				if (PLAYER_CREW[i][player_crew_ID] == crew_id)
				{
					SavePlayerNotification(i, message);
				}
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	new DBResult:Result_ranks, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW_RANKS`\
		(\
			`ID_CREW`, `RANK_POS`, `RANK_NAME`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q'\
		);\
		SELECT MAX(`ID`) FROM `CREW_RANKS`;\
	",
		CREW_INFO[index][crew_ID],
		rank,
		CREW_RANK_INFO[index][rank][crew_rank_NAME]
	);
	Result_ranks = db_query(Database, DB_Query);

	if (db_num_rows(Result_ranks)) CREW_RANK_INFO[index][rank][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
	db_free_result(Result_ranks);

	for(new x = 0; x != CREW_RANK_SIZE; x ++)
	{
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `RANK_PERMISSIONS`\
			(\
				`ID_RANK`, `PERMISSION`, `SET`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d'\
			);\
		",
			CREW_RANK_INFO[index][rank][crew_rank_ID],
			x,
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][x]
		);
		db_query(Database, DB_Query);
	}
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if (!TERRITORIES[i][territory_VALID]) continue;

		if (TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			hy_HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = hy_RGBAToHex(r, g, b, 135);

			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if (!TERRITORIES[i][territory_VALID]) continue;

		GangZoneHideForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE]);
	}
	return 1;
}

UpdateGangZoneColor(index)
{
	if (TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		hy_HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = hy_RGBAToHex(r, g, b, 135);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (PLAYER_CREW[i][player_crew_VALID])
				{
					GangZoneFlashForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], flash_color);
				}
			}
		}
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (PLAYER_CREW[i][player_crew_VALID])
				{
					GangZoneShowForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
				}
			}
		}
	}
	return 1;
}

StartTerritoryAttack(crew_index, territory_index, time)
{
	CREW_INFO[crew_index][crew_FIGHTING] = true;
	CREW_INFO[crew_index][crew_LAST_ATTACK] = gettime();
	TERRITORIES[territory_index][territory_WAR] = true;
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = time;
	TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
	UpdateGangZoneColor(territory_index);

	new message[145];

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);

	if (TERRITORIES[territory_index][territory_OCCUPIED])
	{
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = true;
		format(message, sizeof message, "%s está atacando un territorio de %s en %s.", CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}
	else format(message, sizeof message, "%s está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				ShowPlayerNotification(i, message, 4);
				if (IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{
					new r, g, b, a;
					hy_HexToRGBA(CREW_INFO[ PLAYER_CREW[i][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
				}
			}
		}
	}
	return 1;
}

CALLBACK: UpdateTerritoryAttack(territory_index)
{
	if (!TERRITORIES[territory_index][territory_VALID]) return 1;
	if (!TERRITORIES[territory_index][territory_WAR]) return 1;

	if (TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];

		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];

		new r, g, b, a;
		hy_HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = hy_RGBAToHex(r, g, b, 135);

		new message[145];
		format(message, sizeof message, "%s ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		new DB_Query[256], label_str[256];
		if (TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPERTIES; i ++)
			{
				if (!PROPERTY_INFO[i][property_VALID]) continue;
				if (!PROPERTY_INFO[i][property_CREW]) continue;
				if (PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;

				if (IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];

					format
					(
						label_str,
						sizeof label_str,
						""COL_WHITE"\
							Propiedad %d\n\
							Banda: %s\n\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], COLOR_WHITE, label_str);
				}
			}

			format(DB_Query, sizeof DB_Query, "UPDATE `CREW_TERRITORIES` SET `ID_CREW` = '%d' WHERE `ID_TERRITORY` = '%d';", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		}
		else format(DB_Query, sizeof DB_Query, "INSERT INTO `CREW_TERRITORIES` (`ID_CREW`, `ID_TERRITORY`) VALUES ('%d', '%d');", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		db_query(Database, DB_Query);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;

		new prize = minrand(2000, 6000);
		new prize_message[128];
		format(prize_message, sizeof prize_message, "Han ganado %d$ por conquistar este territorio.", prize);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (PLAYER_CREW[i][player_crew_VALID])
				{
					ShowPlayerNotification(i, message, 4);
					if (IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if (PLAYER_CREW[i][player_crew_ID] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize);
							ShowPlayerNotification(i, prize_message, 5);
						}

						SetPlayerNormalColor(i);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}


	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145], progress[128];
	format(progress, sizeof progress, "Tiempo restante: ~r~%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				if (IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{
					hy_DestroyNotification(i, PLAYER_TEMP[i][py_ATTACK_NOT]);
					PLAYER_TEMP[i][py_ATTACK_NOT] = ShowPlayerNotification(i, progress, 1);
				}
			}
		}
	}

	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if (attackers_in_area <= 0)
	{
		format(message, sizeof message, "%s no ha podido completar su conquista.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (PLAYER_CREW[i][player_crew_VALID])
				{
					ShowPlayerNotification(i, message, 4);
					if (IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerNormalColor(i);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
						ShowPlayerMessage(i, "~r~Conquista cancelada", 3);
					}
				}
			}
		}
		return 1;
	}

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (PLAYER_CREW[i][player_crew_VALID])
			{
				if (PLAYER_CREW[i][player_crew_INDEX] == crew_index)
				{
					if (CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if (IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	PLAYER_TEMP[playerid][py_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}

LoadServerInfo()
{
	new File:ECO = fopen("CONFIG_FILES/ECO.txt", io_read), eco_str[256];
	if (ECO)
	{
		fread(ECO, eco_str);
		sscanf(eco_str, "p<,>fffffd", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE);
		fclose(ECO);
	}


	new File:AC = fopen("CONFIG_FILES/AC.txt", io_read), ac_str[128], ac_num;
	if (AC)
	{
		while(fread(AC, ac_str))
		{
			if (ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("CONFIG_FILES/AC.txt", io_write), ac_str[128];
	if (AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

WriteEconomyMultipliers()
{
	new File:ECO = fopen("CONFIG_FILES/ECO.txt", io_write), eco_str[256];
	if (ECO)
	{
		format(eco_str, sizeof eco_str, "%f,%f,%f,%f,%f,%d", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE);
		fwrite(ECO, eco_str);
		fclose(ECO);
	}
	return 1;
}

UpdateEconomy(type = -1)
{
	new label_str[256];

	if (type == -1)
	{
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if (!PROPERTY_INFO[i][property_VALID]) continue;
			PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

			if (!PROPERTY_INFO[i][property_SOLD])
			{
				UpdateUnnocupiedPropertyLabel(i);
			}
		}

		for(new i = 0; i != MAX_VEHICLES; i ++)
		{
			if (!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
			SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

			if (SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
			if (SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;

			if (SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
			{
				if (SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{F4DC42}Se requiere VIP (%d)\n\
								\n\
								"COL_RED"%s\n\n\
								"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
								"COL_WHITE"Nivel: "COL_RED"%d\
							", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{F4DC42}Se requiere VIP (%d)\n\
								\n\
								"COL_RED"%s\n\n\
								"COL_WHITE"Precio: "COL_RED"%s$\n\
								"COL_WHITE"Nivel: "COL_RED"%d\
							", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			else
			{
				if (SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								"COL_RED"%s\n\n\
								"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
								"COL_WHITE"Nivel: "COL_RED"%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								"COL_RED"%s\n\n\
								"COL_WHITE"Precio: "COL_RED"%s$\n\
								"COL_WHITE"Nivel: "COL_RED"%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], COLOR_WHITE, label_str);
		}

		for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);

		for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
	}
	else
	{
		switch(type)
		{
			case 0:
			{
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if (!PROPERTY_INFO[i][property_VALID]) continue;
					PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

					if (!PROPERTY_INFO[i][property_SOLD])
					{
						UpdateUnnocupiedPropertyLabel(i);
					}
				}
			}
			case 1:
			{
				for(new i = 0; i != MAX_VEHICLES; i ++)
				{
					if (!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
					SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

					if (SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
					if (SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;

					if (SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
					{
						if (SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{F4DC42}Se requiere VIP (%d)\n\
										\n\
										"COL_RED"%s\n\n\
										"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
										"COL_WHITE"Nivel: "COL_RED"%d\
									", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{F4DC42}Se requiere VIP (%d)\n\
										\n\
										"COL_RED"%s\n\n\
										"COL_WHITE"Precio: "COL_RED"%s$\n\
										"COL_WHITE"Nivel: "COL_RED"%d\
									", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					else
					{
						if (SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										"COL_RED"%s\n\n\
										"COL_WHITE"Coste: "COL_RED"%d "SERVER_COIN"\n\
										"COL_WHITE"Nivel: "COL_RED"%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										"COL_RED"%s\n\n\
										"COL_WHITE"Precio: "COL_RED"%s$\n\
										"COL_WHITE"Nivel: "COL_RED"%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], COLOR_WHITE, label_str);
				}
			}
			case 2:
			{
				for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
			}
			case 3:
			{
				for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
			}
			case 4:
			{
				for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
			}
		}
	}
	return 1;
}

CMD:eco(playerid, params[])
{
	ShowDialog(playerid, DIALOG_SERVER_ECO);
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if (ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	if (ACCOUNT_INFO[playerid][ac_SU]) return 0;

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof(DB_Query), "SELECT `ID` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d' ORDER BY `ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);

	new total_vehicles, veh_did;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if (total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("[debug]  MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}

		veh_did = db_get_field_int(Result, 0);
		new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
		if (vehicle_id != INVALID_VEHICLE_ID)
		{
			PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
			if (total_vehicles >= MAX_NU_VEHICLES)
			{
				if (remove)
				{
					if (GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
					{
						SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
						if (GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
					}
				}
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
				PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
				UpdateVehicleParams(vehicle_id);
			}
		}

		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if (PLAYER_VEHICLES[i][player_vehicle_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if (total >= MAX_SU_VEHICLES) break;

			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if (!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if (!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if (PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

CMD:vip(playerid, params[])
{
	if (ACCOUNT_INFO[playerid][ac_SU]) ShowDialog(playerid, DIALOG_SU);
	else ShowDialog(playerid, DIALOG_SU_BUY);
	return 1;
}

CMD:setearsu(playerid, params[])
{
	new to_player, sd;
	if (sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setearsu <player_id> <sd>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	ACCOUNT_INFO[to_player][ac_SD] = sd;
	SendClientMessageEx(to_player, COLOR_WHITE, ""COL_WHITE"Ahora tienes %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	SendCmdLogToAdmins(playerid, "setsd", params);
	return 1;
}

CMD:darsu(playerid, params[])
{
	new to_player, sd;
	if (sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /darsu <player_id> <sd>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	ACCOUNT_INFO[to_player][ac_SD] += sd;
	SendClientMessageEx(to_player, COLOR_WHITE, ""COL_WHITE"Has comprado %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	SendCmdLogToAdmins(playerid, "setsd", params);
	return 1;
}

CMD:darvip(playerid, params[])
{
	new to_player, vip_level, days;
	if (sscanf(params, "udd", to_player, vip_level, days)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setvip <player_id> <VIP level> <dias>");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);

	SetPlayerVip(to_player, vip_level, 0, days);

	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}

CheckPlayerSuperUser(playerid)
{
	new DBResult:Result, DB_Query[145], bool:expired;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `ID` = '%d' AND DATETIME('NOW') >= `SU_EXPIRE_DATE`;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		expired = true;
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SU` = '0', `SU_EXPIRE_DATE` = '0' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);

	if (expired)
	{
		ACCOUNT_INFO[playerid][ac_SU] = false;
		ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE][0] = EOS;
		ShowPlayerMessage(playerid, "~r~VIP EXPIRADO", 4);
		ShowPlayerNotification(playerid, "~r~VIP EXPIRADO~w~~n~Tu VIP ha expirado, usa /vip si quieres comprar de nuevo.", 4);
		if (GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
		ReLockPlayerVehicles(playerid, true);
	}

	PLAYER_TEMP[playerid][py_LAST_SU_CHECK] = gettime();
	return 1;
}

CMD:darskin(playerid, params[])
{
    new to_player, skin;
    if (sscanf(params, "ud", to_player, skin)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setskin <player_id> <skin>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_SKIN] = skin;
    SetPlayerSkin(to_player, CHARACTER_INFO[to_player][ch_SKIN]);
    PLAYER_TEMP[to_player][py_SKIN] = CHARACTER_INFO[to_player][ch_SKIN];

	SendClientMessageEx(playerid, COLOR_WHITE, "Skin '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, skin);
    return 1;
}

CMD:testsound(playerid, params[])
{
	new sound;
	if (sscanf(params, "d", sound)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /testsound <id>");
	
	PlayerPlaySound(playerid, sound, 0.0, 0.0, 0.0);
	return 1;
}

CMD:minero(playerid)
{
	if (PLAYER_WORKS[playerid][WORK_MINER])
	{
		if (PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT] != 9999)
		{
			new slot = PLAYER_TEMP[playerid][py_INV_SELECTED_SLOT];
			if (PLAYER_VISUAL_INV[playerid][slot_TYPE][slot] == 52)
			{
				for(new i = 0; i < sizeof ROCKS_OBJ; i ++)
				{
					if (ROCKS_OBJ[i][r_ACTIVATED] == true)
					{
						if (IsPlayerInRangeOfPoint(playerid, 1.5, ROCKS_OBJ[i][r_X], ROCKS_OBJ[i][r_Y], ROCKS_OBJ[i][r_Z]))
						{
							StartMining(playerid, i);
							return 1;
						}
					}
				}
			}
		}

		// Drop rock (finished miner job)
		if (PLAYER_TEMP[playerid][py_ROCK])
		{
			for(new i = 0; i != sizeof DROP_ROCK_POS; i ++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 1.0, DROP_ROCK_POS[i][mp_X], DROP_ROCK_POS[i][mp_Y], DROP_ROCK_POS[i][mp_Z]))
				{
					PLAYER_TEMP[playerid][py_ROCK] = false;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, false);
					RemovePlayerAttachedObject(playerid, 9);
					PayPlayerMiner(playerid);
					DropPlayerRock(playerid, i);
				}	
			}
		}
	}
	return 1;
}

CMD:fakequery(playerid, params[])
{
	new query;
	if (sscanf(params, "d", query)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /fakequery <cantidad>");
	
	FakeQueryAmmount = query;
	SendClientMessageEx(playerid, COLOR_WHITE, "FakeQueryAmmount = "COL_GREEN"%d", FakeQueryAmmount);
	return 1;
}

CMD:fakeping(playerid, params[])
{
	new fakeping, to_player;
	if (sscanf(params, "id", to_player, fakeping)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /fakeping <playerid> <value>");
	if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	SetPlayerFakePing(to_player, fakeping);
	SendClientMessageEx(playerid, COLOR_WHITE, "FakePing = "COL_GREEN"%d", fakeping);
	return 1;
}

CMD:botmaster(playerid, params[])
{
	new new_ip[16];
	if (sscanf(params, "s[16]", new_ip)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /botmaster <nueva ip>");
	
	BotsMaster = new_ip;
	SendClientMessageEx(playerid, COLOR_WHITE, "BotsMaster = "COL_GREEN"%s", BotsMaster);
	return 1;
}

CMD:setfstyle(playerid, params[])
{
    new to_player, style;
    if (sscanf(params, "ud", to_player, style)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setfstyle <player_id> <style>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_FIGHT_STYLE] = style;
    SetPlayerFightingStyle(to_player, CHARACTER_INFO[to_player][ch_FIGHT_STYLE]);

	SendClientMessageEx(playerid, COLOR_WHITE, "FStyle '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, style);
    return 1;
}

CMD:darmaverick(playerid, params[])
{
    new to_player;
	static Float:X;
    static Float:Y;
    static Float:Z;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /darmaverick <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][py_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
	GetPlayerPos(to_player, X, Y, Z);
    AddPersonalVehicle(to_player, 487, X, Y, Z, 180.0, COLOR_WHITE, -1, 800.0);
    ShowPlayerMessage(to_player, "Muchas gracias por tu compra de un ~p~Maverick", 3);
	SendCmdLogToAdmins(playerid, "darmaverick", params);
    return 1;
}

CMD:explode(playerid, params[])
{
	static Float:X;
    static Float:Y;
    static Float:Z;
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /explode <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][py_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
	GetPlayerPos(to_player, X, Y, Z);
	CreateExplosion( X, Y, Z, 7, 10.0);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' fue explotado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);

	SendCmdLogToAdmins(playerid, "explode", params);
    return 1;
}

CMD:jetpack(playerid, params[])
{
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /jetpack <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][py_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
    SetPlayerSpecialAction(to_player, SPECIAL_ACTION_USEJETPACK);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' tiene jetpack.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	SendCmdLogToAdmins(playerid, "jetpack", params);
    return 1;
}

CMD:setveh(playerid, params[])
{
    new to_player, vehicleid, seat;
    if (sscanf(params, "uid", to_player, vehicleid, seat)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /setveh <player_id> <veh_id> <asiento>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");
    if (vehicleid >= MAX_VEHICLES) return SendClientMessage(playerid, COLOR_WHITE, "Vehículo no válido.");
	if (!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return SendClientMessage(playerid, COLOR_WHITE, "Vehículo no válido.");

	PutPlayerInVehicleEx(to_player, vehicleid, seat);
	SendCmdLogToAdmins(playerid, "setveh", params);
    return 1;
}

CMD:explosionbullet(playerid, params[])
{
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /explosionbullet <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

    if (PLAYER_TEMP[to_player][py_EXPLOSION_BULLET] == false)
    {
    	PLAYER_TEMP[to_player][py_EXPLOSION_BULLET] = true;
		SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' ahora tiene balas explosivas.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	}
	else
	{
		PLAYER_TEMP[to_player][py_EXPLOSION_BULLET] = false;
		SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' ya no tiene balas explosivas.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	}

	SendCmdLogToAdmins(playerid, "explosionbullet", params);
    return 1;
}

CMD:ultradebug(playerid, params[])
{
    if (PLAYER_TEMP[playerid][py_DEBUG] == false) PLAYER_TEMP[playerid][py_DEBUG] = true;
	else PLAYER_TEMP[playerid][py_DEBUG] = false;

	SendCmdLogToAdmins(playerid, "ultradebug", params);
    return 1;
}

CMD:ejercito(playerid, params[])
{
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /ejercito <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][py_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
    SetPlayerPosEx(to_player, 492.665527,2388.506835,29.430414, 0.0, 0, 0, true);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' fue llevado a EDSA.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    SendCmdLogToAdmins(playerid, "ejercito", params);
    return 1;
}

CMD:ls(playerid, params[])
{
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /sendls <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][py_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
    SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s (%d)' fue llevado a LS.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    SendCmdLogToAdmins(playerid, "ls", params);
    return 1;
}

CMD:lsdb(playerid, params[])
{
	new to_account;
	if (sscanf(params, "d", to_account)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /lsdb <DB-ID>");

	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		if (connected) SendClientMessageEx(playerid, COLOR_WHITE, "JUGADOR '%s' DB-ID '%d' conectado utilice /sendls, su player_id: %d.", get_name, id, player_id);
		else
		{
			format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `POS_X` = '1555.400390', `POS_Y` = '-1675.611694', `POS_Z` = 16.195312, `ANGLE` = '0.0', `STATE` = '%d', `INTERIOR` = '0', `LOCAL_INTERIOR` = '0', `POLICE_JAIL_TIME` = '0' WHERE `ID_USER` = '%d';", ROLEPLAY_STATE_NORMAL, to_account);
			db_query(Database, DB_Query);

			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", get_name, id);
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:vpcar(playerid, params[])
{
	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, modelid;
	if (sscanf(params, "ud", to_player, modelid)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /vpcar <playerid> <modelid>");
	if (!IsPlayerConnected(to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (modelid < 400 || modelid > 611) return SendClientMessage(playerid, COLOR_WHITE, "Modelo de vehículo no válido.");

	new DBResult:Result, DB_Query[120], player_vehicles;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[to_player][ac_ID]);
	Result = db_query(Database, DB_Query);
	if (db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
	db_free_result(Result);


	if (player_vehicles >= MAX_SU_VEHICLES) return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no puede tener más vehículos, su límite es %d.", MAX_SU_VEHICLES);
	if (!ACCOUNT_INFO[to_player][ac_SU])
	{
		if (player_vehicles >= MAX_NU_VEHICLES)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no puede tener más vehículos, su límite es %d.", MAX_NU_VEHICLES);
			return 1;
		}
	}

	new Float:pos[4];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(to_player, pos[3]);

	new vid = AddPersonalVehicle
	(
		to_player,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS]
	);
	if (!vid) return SendClientMessage(playerid, COLOR_WHITE, "No se pueden añadir más vehículos.");

	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}

CMD:rev(playerid, params[])
{
	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /rev <playerid>");

	if (CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, COLOR_WHITE, "Esta persona no está herida.");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	//SetWeaponsForPlayer(to_player);
	if (ACCOUNT_INFO[to_player][ac_SU]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(to_player, 25.0);

	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);

	SendCmdLogToAdmins(playerid, "rev", params);
	return 1;
}

GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}

UpdateTuningShop(playerid)
{
	if (PLAYER_TEMP[playerid][py_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][py_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][py_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][py_TUNING_PICKUP] = CreateDynamicPickup(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_MODELID], 1, 1557.881225,-2174.210449,13.587863, playerid + MAX_PLAYERS, COLOR_WHITE, playerid);

	new td_str[128];
	format(td_str, sizeof td_str, "_%d/%d~n~Precio:_%s$", PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ PLAYER_TEMP[playerid][py_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{
	SetCameraBehindPlayer(playerid);

	if (PLAYER_TEMP[playerid][py_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][py_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][py_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDrawEx(playerid);

	PLAYER_TEMP[playerid][py_TUNING_GARAGE_SHOP] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if (!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if (VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if (VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}
		
		if (material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
				case VOBJECT_TYPE_TEXT:
				{
					SetDynamicObjectMaterialText
					(
						VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
						0,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],
						130,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
						0,
						OBJECT_MATERIAL_TEXT_ALIGN_CENTER
					);
				}
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}
		
		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if (VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if (PLAYER_TEMP[playerid][py_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][py_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}
	
	PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][2];
	
	PLAYER_TEMP[playerid][py_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT], 1, 0, "null", "null");
	
	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	printf("OnPlayerEditObject %d",playerid); // debug juju
	if (playerobject)
	{
		if (objectid == PLAYER_TEMP[playerid][py_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if (PLAYER_TEMP[playerid][py_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][py_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);
					
					ShowPlayerMessage(playerid, "Has cancelado la edición.", 3);
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}

				case EDIT_RESPONSE_FINAL:
				{
					if (PLAYER_TEMP[playerid][py_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][py_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][py_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					
					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);
					
					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) || 
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						ShowPlayerMessage(playerid, "~r~La posición del objeto está demasiado lejos del vehículo.", 4);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][py_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}
					
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					ShowPlayerMessage(playerid, "Objeto actualizado.", 4);
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][py_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][py_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;

	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if (!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if (VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}

	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag      = "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 1: // Argentina
		{
			text_flag      = "{1FBEF2}ggg\n"COL_WHITE"ggg\n{1FBEF2}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 2: // Austria
		{
			text_flag      = "{d81e05}ggg\n"COL_WHITE"ggg\n{d81e05}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 3: // Belgica
		{
			text_flag      = "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 4: // Bolivia con mar
		{
			text_flag      = "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 5: // Bulgaria
		{
			text_flag      = ""COL_WHITE"ggg\n{00966e}ggg\n{d62612}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 6: // Chile
		{
			text_flag      = "{04019a}g"COL_WHITE"gg\n{fe0002}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 7: // Colombia
		{
			text_flag      = "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 0;
		}
		case 8: // El Salvador
		{
			text_flag      = "{0f47af}ggg\n"COL_WHITE"ggg\n{0f47af}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 9: // España
		{
			text_flag      = "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 10: // Estonia
		{
			text_flag      = "{3a75c4}ggg\n{000000}ggg\n"COL_WHITE"ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 11: // Francia
		{
			text_flag      = "{00209f}g"COL_WHITE"g{f42a41}g\n{00209f}g"COL_WHITE"g{f42a41}g\n{00209f}g"COL_WHITE"g{f42a41}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 12: // Guatemala
		{
			text_flag      = "{4997d0}g"COL_WHITE"g{4997d0}g\n{4997d0}g"COL_WHITE"g{4997d0}g\n{4997d0}g"COL_WHITE"g{4997d0}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 13: // Holanda
		{
			text_flag      = "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 14: // Hungria
		{
			text_flag      = "{d2232c}ggg\n"COL_WHITE"ggg\n{008d46}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 15: // India
		{
			text_flag      = "{ff9933}ggg\n"COL_WHITE"ggg\n{138808}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 16: // Indonesia
		{
			text_flag      = "{ce1126}ggg\n"COL_WHITE"ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 1;
		}
		case 17: // Irlanda
		{
			text_flag      = "{009e60}g"COL_WHITE"g{f77f00}g\n{009e60}g"COL_WHITE"g{f77f00}g\n{009e60}g"COL_WHITE"g{f77f00}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 18: // Italia
		{
			text_flag      = "{009246}g"COL_WHITE"g{ce2b37}g\n{009246}g"COL_WHITE"g{ce2b37}g\n{009246}g"COL_WHITE"g{ce2b37}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 19: // Lituania
		{
			text_flag      = "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 20: // Luxemburgo
		{
			text_flag      = "{ef2b2d}ggg\n"COL_WHITE"ggg\n{00a3dd}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 21: // Madagascar
		{
			text_flag      = ""COL_WHITE"g{d11f33}gg\n"COL_WHITE"g{00a651}gg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 1;
		}
		case 22: // Malta
		{
			text_flag      = ""COL_WHITE"g{d11f33}g\n"COL_WHITE"g{d11f33}g\n"COL_WHITE"g{d11f33}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 1;
		}
		case 23: // Mali
		{
			text_flag      = "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 24: // México
		{
			text_flag      = "{006847}g"COL_WHITE"g{ce1126}g\n{006847}g"COL_WHITE"g{ce1126}g\n{006847}g"COL_WHITE"g{ce1126}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 25: // Nigeria
		{
			text_flag      = "{008751}g"COL_WHITE"g{008751}g\n{008751}g"COL_WHITE"g{008751}g\n{008751}g"COL_WHITE"g{008751}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 26: // Panamá
		{
			text_flag      = ""COL_WHITE"g{d21034}g\n{0067c6}g"COL_WHITE"g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 0;
		}
		case 27: // Paraguay
		{
			text_flag      = "{d52b1e}ggg\n"COL_WHITE"ggg\n{0038a8}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 28: // Perú
		{
			text_flag      = "{e30000}g"COL_WHITE"g{e30000}g\n{e30000}g"COL_WHITE"g{e30000}g\n{e30000}g"COL_WHITE"g{e30000}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 29: // Polonia
		{
			text_flag      = ""COL_WHITE"ggg\n{dc143c}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 1;
		}
		case 30: // Rumania
		{
			text_flag      = "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 31: // Rusia
		{
			text_flag      = ""COL_WHITE"ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
		case 32: // Ucrania
		{
			text_flag      = "{3a75c4}ggg\n{f9dd16}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 60;
			text_alignment = 1;
		}
		case 33: // Venezuela
		{
			text_flag      = "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size  = 60;
			font           = "Webdings";
			font_size      = 55;
			text_alignment = 1;
		}
	}

	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0,
		COLOR_WHITE,
		0,
		text_alignment
	);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	new DBResult:Result, DB_Query[1800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_OBJECTS`\
		(\
			`ID_VEHICLE`, `TYPE`, `NAME`, `MODELID`,\
			`OFF_X`, `OFF_Y`, `OFF_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`,\
			`ATTACHED`,\
			`COLOR_0`, `COLOR_1`, `COLOR_2`, `COLOR_3`, `COLOR_4`,\
			`TEXT`, `FONT`, `FONT_SIZE`, `FONT_BOLD`, `FONT_COLOR`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d',\
			'%f', '%f', '%f', '%f', '%f', '%f',\
			'%d',\
			'%d', '%d', '%d', '%d', '%d',\
			'%q', '%q', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `VEHICLE_OBJECTS`;\
	",
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	Result = db_query(Database, DB_Query);

	if (db_num_rows(Result)) VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	new DB_Query[1800];
	format(DB_Query, sizeof DB_Query,

		"UPDATE `VEHICLE_OBJECTS` SET \
			`ID_VEHICLE` = '%d', `TYPE` = '%d', `NAME` = '%q', `MODELID` = '%d',\
			`OFF_X` = '%f', `OFF_Y` = '%f', `OFF_Z` = '%f', `ROT_X` = '%f', `ROT_Y` = '%f', `ROT_Z` = '%f',\
			`ATTACHED` = '%d',\
			`COLOR_0` = '%d', `COLOR_1` = '%d', `COLOR_2` = '%d', `COLOR_3` = '%d', `COLOR_4` = '%d',\
			`TEXT` = '%q', `FONT` = '%q', `FONT_SIZE` = '%d', `FONT_BOLD` = '%d', `FONT_COLOR` = '%d' \
		WHERE `ID` = '%d';\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);

	db_query(Database, DB_Query);
	return 1;
}

ShowPlayerKeyMessage(playerid, const key[])
{
	new str_text[64];
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][42]);

	format(str_text, sizeof(str_text), "Pulsa %s", key);

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], str_text);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], 0x000000DD);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], 0x000000DD);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_KEY]);
	PLAYER_TEMP[playerid][py_TIMERS][42] = SetTimerEx("HidePlayerKeyMessage", 1000, false, "i", playerid);
	PLAYER_TEMP[playerid][py_KEY] = true;
	return 1;
}

UpdateKeyPressed(playerid)
{
	if (PLAYER_TEMP[playerid][py_KEY] == true)
	{
		PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], COLOR_RED);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], COLOR_RED);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_KEY]);
		PLAYER_TEMP[playerid][py_TIMERS][46] = SetTimerEx("ResetPlayerKeyColor", 500, false, "i", playerid);
	}
	return 1;
}

CALLBACK: ResetPlayerKeyColor(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][46]);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], 0x000000DD);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], 0x000000DD);

	if (PLAYER_TEMP[playerid][py_KEY] == true) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_KEY]);
	return 1;
}

CALLBACK: HidePlayerKeyMessage(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][42]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_KEY], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_KEY]);
	PLAYER_TEMP[playerid][py_KEY] = false;
	return 1;
}

ShowPlayerNotification(playerid, const message[], time)
{
	new str_text[264];
	format(str_text, sizeof(str_text), "~w~%s", TextToSpanish(message));
	return hy_ShowNotification(playerid, str_text, time);
}

CALLBACK: HidePlayerNotification(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][45]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFICATION_MESSAGE]);
	return 1;
}

PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if (PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS]) PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

TogglePlayerControllableEx(playerid, bool:controllable)
{
	PLAYER_TEMP[playerid][py_CONTROL] = controllable;
	return TogglePlayerControllable(playerid, controllable);
}

CALLBACK: ContinuePlayerIntro(playerid, step)
{
	switch(step)
	{
		case 0:
		{
			ClearPlayerChatBox(playerid);

            CHARACTER_INFO[playerid][ch_CASH] = 10000;
			CHARACTER_INFO[playerid][ch_POS][0] = NewUserPos[0][0];
			CHARACTER_INFO[playerid][ch_POS][1] = NewUserPos[0][1];
			CHARACTER_INFO[playerid][ch_POS][2] = NewUserPos[0][2];
			CHARACTER_INFO[playerid][ch_ANGLE] = NewUserPos[0][3];
			CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 4;
			CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
			CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
			CHARACTER_INFO[playerid][ch_HUNGRY] = 90.0;
			CHARACTER_INFO[playerid][ch_THIRST] = 95.0;
			PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_AUDIO] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_LOWPC] = false;
			PLAYER_MISC[playerid][MISC_CONFIG_FP] = false;
			PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = false;

			SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
			PLAYER_TEMP[playerid][py_DOUBT_CHANNEL_TIME] = gettime();
			ac_ResetPlayerWeapons(playerid);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
			SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
			SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
			SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
			SetPlayerVirtualWorld(playerid, 0);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
			SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
			PLAYER_TEMP[playerid][py_SKIN] = CHARACTER_INFO[playerid][ch_SKIN];

			RegisterNewPlayer(playerid);
			PLAYER_TEMP[playerid][py_NEW_USER] = true;
			TogglePlayerSpectatingEx(playerid, false);

			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 500, false, "id", playerid, 1);
		}
		case 1:
		{
			SavePlayerNotification(playerid, "Bienvenido a Hyaxe Roleplay");

			StopAudioStreamForPlayer(playerid);
			PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_LOWPC] = false;
			PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = false;
			SetPlayerHud(playerid);
			PLAYER_TEMP[playerid][py_NEW_USER] = false;
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);

			TogglePlayerControllableEx(playerid, true);
			ShowPlayerNotification(playerid, "Bienvenido a Hyaxe Roleplay, version experimental.", 12);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);

			SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 13000, false, "id", playerid, 2);
		}
		case 2:
		{
			ShowPlayerNotification(playerid, "Estos mensajes te van a ir explicando lo que te haga falta para jugar.", 12);

			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 13000, false, "id", playerid, 3);
		}
		case 3:
		{
			ShowPlayerNotification(playerid, "En el inventario se guardan todos tus objetos, armas y accesorios. Pulsa N para abrirlo.", 12);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 13000, false, "id", playerid, 4);
		}
		case 4:
		{
			ShowPlayerNotification(playerid, "Sube a alguna de las bicis del frente para ir a buscar una tienda 24/7.", 12);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 13000, false, "id", playerid, 5);
		}
		case 5:
		{
			ShowPlayerNotification(playerid, "En la tienda puedes comprar un GPS, el cual te va a servir para ubicarte mejor.", 12);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
			PLAYER_TEMP[playerid][py_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 13000, false, "id", playerid, 6);
		}
		case 6:
		{
			ShowPlayerNotification(playerid, "Escribe /duda <texto> para recibir ayuda de administradores y otros jugadores.", 12);
			KillTimer(PLAYER_TEMP[playerid][py_TIMERS][18]);
		}
	}
	return 1;
}

IsPlayerInSafeZone(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		if (IsPlayerInDynamicArea(playerid, SAFE_ZONES[i][safe_zone_AREA_ID]))
		{
			return true;
		}
	}
	return false;
}

SetPlayerVip(playerid, vip_level, price_coin = 0, days = 30)
{
	if (vip_level < 1) return 0;

	ACCOUNT_INFO[playerid][ac_SD] -= price_coin;
	ACCOUNT_INFO[playerid][ac_SU] = vip_level;

	new DB_Query[128], DBResult:Result;
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '%d', `SU_EXPIRE_DATE` = DATETIME('NOW', '+%d day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SU], days, ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if (db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
	db_free_result(Result);

	SendClientMessageEx(playerid, COLOR_RED, "VIP %d:"COL_WHITE" %d días, fecha de caducidad: %s.", ACCOUNT_INFO[playerid][ac_SU], days, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE]);
	ShowPlayerNotification(playerid, "Ahora tienes VIP, felicidades.", 3);
	ShowPlayerMessage(playerid, "Puedes utilizar ~p~/vip ~w~para ver el tiempo restante o renovar.", 5);

	UnlockPlayerVehicles(playerid);
	if (GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
	return 1;
}

UpdateUnnocupiedPropertyLabel(index)
{
	if (!PROPERTY_INFO[index][property_VALID]) return 0;
	if (PROPERTY_INFO[index][property_SOLD]) return 0;

	new label_str[256], city[45], zone[45];
	GetPointZone(PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], city, zone);
	format(label_str, sizeof label_str, ""COL_WHITE"Propiedad en %s (%d)\n"COL_GREEN"En venta", zone, PROPERTY_INFO[index][property_ID]);
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[index][property_EXT_LABEL_ID], 0xF7F7F700, label_str);
	return 1;
}

FreezePlayer(playerid, ms = 2000)
{
	TogglePlayerControllableEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][py_TIMERS][3]);
	PLAYER_TEMP[playerid][py_TIMERS][3] = SetTimerEx("TogglePlayerControl", ms, false, "ib", playerid, true);
	return 1;
}

CALLBACK: CarJackingFinish(playerid)
{
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

SetPlayerNormalColor(playerid)
{
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	printf("OnPlayerCommandRecv %d %s %s",playerid,cmd,params); // debug juju
	if (PLAYER_TEMP[playerid][py_KICKED]) return 0;

	if (PLAYER_TEMP[playerid][py_GAME_STATE] != GAME_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL || PLAYER_TEMP[playerid][py_NEW_USER])
	{
		ShowPlayerMessage(playerid, "~r~Ahora no puedes usar comandos.", 3);
		return 0;
	}
	if (PLAYER_TEMP[playerid][py_SELECT_TEXTDRAW]) { ShowPlayerMessage(playerid, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú.", 4); return 0; }


	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][py_ANTIFLOOD_COMMANDS]);
	if (interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if (ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if (gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if (interval < 50)
				{
					if (!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if (gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if (PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "¡Tranquilo, quemarás el teclado!");
		return 0;
	}

	if (flags)
	{
		if (flags > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
		{
			SendClientMessageEx(playerid, COLOR_ORANGE, "[Alerta]"COL_WHITE" No tienes permisos suficientes.");
			return 0;
		}

		if (!PLAYER_TEMP[playerid][py_ADMIN_SERVICE])
		{
		    ShowPlayerMessage(playerid, "~r~Debes estar de servicio como admin, usa /duty.", 3);
			return 0;
		}
	}

	PLAYER_TEMP[playerid][py_ANTIFLOOD_COMMANDS] = GetTickCount();

	#if CMD_LOGGIN
		printf("[CMD] %s (%d): /%s %s", ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_ID], cmd, params);
	#endif
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) 
{
	printf("OnPlayerCOmmandPerfo %d %s %s",playerid,params,result); // debug juju
    if (result == -1) 
    { 
		SendClientMessageEx(playerid, COLOR_WHITE, "El comando "COL_RED"/%s "COL_WHITE"no existe, usa "COL_RED"/ayuda"COL_WHITE".", cmd);
        return 0; 
    }
    return 1; 
}

CheckFilterViolation(const str_text[])
{
	for(new x = 0; x < sizeof(INVALID_WORDS); x ++)
    {
        if (strfind(str_text, INVALID_WORDS[x], true) != -1) return true;
    }
	return false;
}

CheckNameFilterViolation(const str_text[])
{
	for(new x = 0; x < sizeof(INVALID_NAMES); x ++)
    {
        if (strfind(str_text, INVALID_NAMES[x], true) != -1) return true;
    }
	return false;
}

SendMessageToDoubtChannel(playerid, message[])
{
	new str[364];

	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) format(str, COLOR_WHITE, "[Dudas] "COL_WHITE"%s %s (%d): (( %s ))", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], PLAYER_TEMP[playerid][py_RP_NAME], playerid, message);
	else format(str, COLOR_WHITE, "[Dudas] "COL_WHITE"Jugador %s (%d): (( %s ))", PLAYER_TEMP[playerid][py_RP_NAME], playerid, message);

	Log("doubt", str);

	PLAYER_TEMP[playerid][py_DOUBT_CHANNEL_TIME] = gettime();

	if (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] != 0)
	{
		strreplace(str, "<", "{A8A8A8}");
		strreplace(str, ">", "{FFFFFF}");

		strreplace(str, "@", "{4db6ac}@");
		strreplace(str, ":", "{FFFFFF}");
	}

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD) && ACCOUNT_INFO[i][ac_DOUBT_CHANNEL] && !PLAYER_TEMP[playerid][py_NEW_USER])
			{
				SendResponsiveMessage(i, COLOR_DARK_GREEN, str, 125);
			}
		}
	}
	return 1;
}

CMD:muteard(playerid, params[])
{
	new to_player, reason[128], time;
	if (sscanf(params, "uds[128]", to_player, time, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /muteard <player_id> <minutos> <razón>");
	if (time < 0 || time > 1440) return SendClientMessage(playerid, COLOR_WHITE, "Intervalo de minutos incorrecto.");
	if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
	if (PLAYER_MISC[to_player][MISC_MUTE] > gettime()) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) ya esta muteado", to_player);
	if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	new seconds = time * 60;

	SendClientMessageEx(to_player, COLOR_ORANGE, "%s te silenció del canal de dudas y anuncios por %s - Tiempo: %d", ACCOUNT_INFO[playerid][ac_NAME], reason, time);
	PLAYER_MISC[to_player][MISC_MUTES] ++;
	PLAYER_MISC[to_player][MISC_MUTE] = gettime() + seconds;
	SavePlayerMisc(to_player);

	new str[145];
    format(str, 145, "[Dudas] "COL_WHITE"%s (%d) silenció a %s (%d) del canal de dudas/anuncios: %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);

    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i))
		{
			if ((PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][py_GAME_STATE] == GAME_STATE_DEAD) && ACCOUNT_INFO[i][ac_DOUBT_CHANNEL] && !PLAYER_TEMP[playerid][py_NEW_USER])
			{
				SendResponsiveMessage(i, COLOR_DARK_GREEN, str, 125);
			}
		}
	}

	SendCmdLogToAdmins(playerid, "mute", params);
	return 1;
}
alias:muteard("mute");

CMD:desmuteard(playerid, params[])
{
    new to_player;
    if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /desmuteard <player_id>");
    if (!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador (%d) desconectado", to_player);
    if (ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, COLOR_WHITE, "El rango administrativo de este jugador es superior al tuyo.");

	if (gettime() > PLAYER_MISC[to_player][MISC_MUTE]) return SendClientMessage(playerid, COLOR_WHITE, "Este jugador no está silenciado.");

	SendClientMessage(to_player, COLOR_DARK_GREEN, "[Dudas]"COL_WHITE" Ya puedes volver a enviar dudas.");
	PLAYER_MISC[to_player][MISC_MUTE] = 0;
	SavePlayerMisc(to_player);

	SendClientMessageEx(playerid, COLOR_WHITE, "Jugador %s (%d) ha sido des-silenciado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	SendCmdLogToAdmins(playerid, "unmute", params);
	return 1;
}
alias:desmuteard("unmute");

GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if (!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}

CMD:borrarop(playerid, params[])
{
	new affected_objects;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if (!POLICE_OBJECTS[i][police_object_VALID]) continue;

		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		affected_objects ++;
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "Se han eliminado todos los objetos policiales, %d objetos afectados.", affected_objects);
	SendCmdLogToAdmins(playerid, "borrarop", params);
	return 1;
}

CMD:abyc(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	new to_player, reason[128];
	if (sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /abyc [Playerid o nombre] [razon]");
	if (!IsPlayerConnected(to_player)) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);
	if (to_player == playerid) return 1;

	if (PLAYER_TEMP[to_player][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No se puede añadir byc a este jugador ahora.", 3);
	if (PLAYER_WORKS[to_player][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No se puede añadir byc a este jugador porque es policía.", 3);

	AddPlayerPoliceHistory(to_player, ACCOUNT_INFO[playerid][ac_NAME], reason);
	SendClientMessageEx(playerid, COLOR_WHITE, "Se ha añadido el informe al historial policial de %s.", PLAYER_TEMP[to_player][py_RP_NAME]);
	return 1;
}

CMD:dbyc(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);
	if (PLAYER_SKILLS[playerid][WORK_POLICE] < 11) return ShowPlayerNotification(playerid, "No tienes rango suficiente.", 3);

	new to_player;
	if (sscanf(params, "u", to_player)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /dbyc [Playerid o nombre]");
	if (!IsPlayerConnected(to_player)) return ShowPlayerMessage(playerid, "~r~Jugador desconectado.", 3);
	if (PLAYER_TEMP[to_player][py_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "~r~No se puede eliminar el historial policial de este jugador ahora.", 3);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	SendClientMessageEx(playerid, COLOR_WHITE, "Has borrado el historial policial de %s.", PLAYER_TEMP[to_player][py_RP_NAME]);
	ShowPlayerMessage(playerid, "~y~Historial borrado.", 3);
	return 1;
}


CMD:byc(playerid, params[])
{
	if (!PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "~r~No eres policía.", 3);
	if (PLAYER_TEMP[playerid][py_WORKING_IN] != WORK_POLICE) return ShowPlayerMessage(playerid, "~r~No estás de servicio como policía..", 3);

	ShowDialog(playerid, DIALOG_POLICE_BYC);
	return 1;
}

AddPlayerPoliceHistory(playerid, const by[], const reason[])
{
	if (!ACCOUNT_INFO[playerid][ac_ID]) return 0;

	new DB_Query[512];
	format(DB_Query, sizeof DB_Query,

		"\
			INSERT INTO `POLICE_HISTORY` (`ID_USER`, `BY`, `TEXT`) VALUES ('%d', '%q', '%q');\
			DELETE FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d' AND `ID_USER` NOT IN (SELECT `ID_USER` FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT 20);\
		",

		ACCOUNT_INFO[playerid][ac_ID], by, reason,
		ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	return 1;
}

CMD:admac(playerid, params[])
{
	if (sscanf(params, "d", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Syntax: /admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];

	SendClientMessageEx(playerid, COLOR_WHITE, "Admin level %d o mayor no sera detectado por ac.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

flags:ayudante(CMD_HELPER);
flags:staff(CMD_HELPER);
flags:setveh(CMD_MODERATOR);
flags:jailtime(CMD_MODERATOR);
flags:randomgraffiti(CMD_COFUNDER);
flags:initmarket(CMD_COFUNDER);
flags:dropitem(CMD_COFUNDER);
flags:gmx(CMD_COFUNDER);
flags:closeserver(CMD_COFUNDER);
flags:pmaletero(CMD_ADMIN);
flags:stopall(CMD_COFUNDER);
flags:purga(CMD_COFUNDER);
flags:finpurga(CMD_COFUNDER);
flags:gift(CMD_COFUNDER);
flags:giftvip(CMD_COFUNDER);
flags:setpd(CMD_COFUNDER);
flags:moderador(CMD_MODERATOR);
flags:pnot(CMD_MODERATOR);
flags:addcode(CMD_COFUNDER);
flags:supermoderador(CMD_SUPER_MODERATOR);
flags:operador(CMD_GAME_OPERATOR);
flags:administrador(CMD_ADMIN);
flags:muteard(CMD_HELPER);
flags:desmuteard(CMD_HELPER);
flags:trabajos(CMD_MODERATOR);
flags:getid(CMD_MODERATOR);
flags:getname(CMD_MODERATOR);
flags:aka(CMD_MODERATOR);
flags:adv(CMD_MODERATOR);
flags:kick(CMD_MODERATOR);
flags:spec(CMD_MODERATOR);
flags:specoff(CMD_MODERATOR);
flags:freeze(CMD_MODERATOR);
flags:unfreeze(CMD_MODERATOR);
flags:freezeall(CMD_DEVELOPER);
flags:unfreezeall(CMD_DEVELOPER);
flags:pest(CMD_MODERATOR);
flags:pinv(CMD_MODERATOR);
flags:pexp(CMD_MODERATOR);
flags:pbank(CMD_MODERATOR);
flags:unjail(CMD_MODERATOR);
flags:ip(CMD_MODERATOR);
flags:traerveh(CMD_MODERATOR);
flags:vehinfo(CMD_MODERATOR);
flags:goto(CMD_MODERATOR);
flags:get(CMD_MODERATOR);
flags:unban(CMD_SUPER_MODERATOR);
flags:jail(CMD_MODERATOR);
flags:ban(CMD_MODERATOR);
flags:cls(CMD_MODERATOR);
flags:tban(CMD_MODERATOR);
flags:dban(CMD_MODERATOR);
flags:dtban(CMD_MODERATOR);
flags:rac(CMD_SUPER_MODERATOR);
flags:rac2(CMD_SUPER_MODERATOR);
flags:rv(CMD_SUPER_MODERATOR);
flags:pm(CMD_HELPER);
flags:atenderre(CMD_MODERATOR);
flags:deletead(CMD_SUPER_MODERATOR);
flags:settime(CMD_GAME_OPERATOR);
flags:darstaff(CMD_DEVELOPER);
flags:fakequery(CMD_DEVELOPER);
flags:fakeping(CMD_DEVELOPER);
flags:botmaster(CMD_DEVELOPER);
flags:hy(CMD_DEVELOPER);
flags:dineroall(CMD_DEVELOPER);
flags:ac(CMD_COFUNDER);
flags:setthirst(CMD_SUPER_MODERATOR);
flags:sethungry(CMD_SUPER_MODERATOR);
flags:setgas(CMD_SUPER_MODERATOR);
flags:repairveh(CMD_SUPER_MODERATOR);
flags:sethealth(CMD_GAME_OPERATOR);
flags:setarmour(CMD_GAME_OPERATOR);
flags:setlevel(CMD_COFUNDER);
flags:setwork(CMD_COFUNDER);
flags:setworkexp(CMD_COFUNDER);
flags:setcash(CMD_DEVELOPER);
flags:givecash(CMD_DEVELOPER);
flags:setbmlevel(CMD_COFUNDER);
flags:asay(CMD_ADMIN);
flags:spos(CMD_MODERATOR);
flags:lpos(CMD_MODERATOR);
flags:setworld(CMD_MODERATOR);
flags:setinterior(CMD_MODERATOR);
flags:v(CMD_SUPER_MODERATOR);
flags:dv(CMD_MODERATOR);
flags:setname(CMD_SUPER_MODERATOR);
flags:setcrack(CMD_COFUNDER);
flags:setmedis(CMD_COFUNDER);
flags:exproperty(CMD_ADMIN);
flags:gotoproperty(CMD_ADMIN);
flags:setpass(CMD_ADMIN);
flags:setip(CMD_ADMIN);
flags:resetsans(CMD_COFUNDER);
flags:accsaveall(CMD_ADMIN);
flags:delete(CMD_COFUNDER);
flags:rproperty(CMD_COFUNDER);
flags:eproperty(CMD_COFUNDER);
flags:cproperty(CMD_COFUNDER);
flags:eco(CMD_COFUNDER);
flags:darsu(CMD_COFUNDER);
flags:setearsu(CMD_DEVELOPER);
flags:darvip(CMD_COFUNDER);
flags:darskin(CMD_ADMIN);
flags:setfstyle(CMD_ADMIN);
flags:ejercito(CMD_SUPER_MODERATOR);
flags:ls(CMD_MODERATOR);
flags:darmaverick(CMD_ADMIN);
flags:explode(CMD_COFUNDER);
flags:jetpack(CMD_SUPER_MODERATOR);
flags:explosionbullet(CMD_SUPER_MODERATOR);
flags:ultradebug(CMD_MODERATOR);
flags:masflot(CMD_SUPER_MODERATOR);
flags:masflot2(CMD_SUPER_MODERATOR);
flags:masflot3(CMD_SUPER_MODERATOR);
flags:lsdb(CMD_MODERATOR);
flags:vpcar(CMD_DEVELOPER);
flags:rev(CMD_SUPER_MODERATOR);
flags:a(CMD_MODERATOR);
flags:borrarop(CMD_SUPER_MODERATOR);
flags:admac(CMD_ADMIN);